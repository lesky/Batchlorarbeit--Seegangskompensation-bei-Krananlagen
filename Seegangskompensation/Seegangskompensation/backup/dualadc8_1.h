//*****************************************************************************
//*****************************************************************************
//  FILENAME: DUALADC8_1.h
//   Version: 1.20, Updated on 2013/5/19 at 10:43:29
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION: DualADC8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef DUALADC8_1_INCLUDE
#define DUALADC8_1_INCLUDE

#include <m8C.h>

//-------------------------------------------------
// Constants for DUALADC8_1 API's.
//-------------------------------------------------
//
// Power Setting Constants
#define DUALADC8_1_OFF            0
#define DUALADC8_1_LOWPOWER       1
#define DUALADC8_1_MEDPOWER       2
#define DUALADC8_1_HIGHPOWER      3

// Function fastcall16 Pragmas
#pragma fastcall16 DUALADC8_1_Start
#pragma fastcall16 DUALADC8_1_SetPower
#pragma fastcall16 DUALADC8_1_GetSamples
#pragma fastcall16 DUALADC8_1_StopAD
#pragma fastcall16 DUALADC8_1_Stop
#pragma fastcall16 DUALADC8_1_fIsData
#pragma fastcall16 DUALADC8_1_fIsDataAvailable
#pragma fastcall16 DUALADC8_1_cGetData1
#pragma fastcall16 DUALADC8_1_cGetData1ClearFlag
#pragma fastcall16 DUALADC8_1_cGetData2
#pragma fastcall16 DUALADC8_1_cGetData2ClearFlag
#pragma fastcall16 DUALADC8_1_ClearFlag
#pragma fastcall16 DUALADC8_1_SetCalcTime

//-------------------------------------------------
// Prototypes of the DUALADC8_1 API.
//-------------------------------------------------
extern void DUALADC8_1_Start(BYTE bPower);
extern void DUALADC8_1_SetPower(BYTE bPower);
extern void DUALADC8_1_GetSamples(void);
extern void DUALADC8_1_StopAD(void);
extern void DUALADC8_1_Stop(void);
extern CHAR DUALADC8_1_fIsData(void);
extern CHAR DUALADC8_1_fIsDataAvailable(void);
extern char DUALADC8_1_cGetData1(void);
extern char DUALADC8_1_cGetData2(void);
extern char DUALADC8_1_cGetData1ClearFlag(void);
extern char DUALADC8_1_cGetData2ClearFlag(void);
extern void DUALADC8_1_ClearFlag(void);
extern void DUALADC8_1_SetCalcTime(int iCalcTime);

//-------------------------------------------------
// Register Addresses for DUALADC8_1
//-------------------------------------------------
// ADC1 Integrator Block Register Definitions
#pragma ioport  DUALADC8_1_bfADC1cr0:   0x080
BYTE            DUALADC8_1_bfADC1cr0;
#pragma ioport  DUALADC8_1_bfADC1cr1:   0x081
BYTE            DUALADC8_1_bfADC1cr1;
#pragma ioport  DUALADC8_1_bfADC1cr2:   0x082
BYTE            DUALADC8_1_bfADC1cr2;
#pragma ioport  DUALADC8_1_bfADC1cr3:   0x083
BYTE            DUALADC8_1_bfADC1cr3;

// ADC2 Integrator Block Register Definitions
#pragma ioport  DUALADC8_1_bfADC2cr0:   0x084
BYTE            DUALADC8_1_bfADC2cr0;
#pragma ioport  DUALADC8_1_bfADC2cr1:   0x085
BYTE            DUALADC8_1_bfADC2cr1;
#pragma ioport  DUALADC8_1_bfADC2cr2:   0x086
BYTE            DUALADC8_1_bfADC2cr2;
#pragma ioport  DUALADC8_1_bfADC2cr3:   0x087
BYTE            DUALADC8_1_bfADC2cr3;

// Counter Block Register Definitions
#pragma ioport  DUALADC8_1_fCounter1FN: 0x128
BYTE            DUALADC8_1_fCounter1FN;
#pragma ioport  DUALADC8_1_fCounter1SL: 0x129
BYTE            DUALADC8_1_fCounter1SL;
#pragma ioport  DUALADC8_1_fCounter1OS: 0x12a
BYTE            DUALADC8_1_fCounter1OS;
#pragma ioport  DUALADC8_1_bCount1: 0x028
BYTE            DUALADC8_1_bCount1;
#pragma ioport  DUALADC8_1_bPeriod1:    0x029
BYTE            DUALADC8_1_bPeriod1;
#pragma ioport  DUALADC8_1_bCompare1:   0x02a
BYTE            DUALADC8_1_bCompare1;
#pragma ioport  DUALADC8_1_bCounter1_CR0:   0x02b
BYTE            DUALADC8_1_bCounter1_CR0;

// Counter Block Register Definitions
#pragma ioport  DUALADC8_1_fCounter2FN: 0x134
BYTE            DUALADC8_1_fCounter2FN;
#pragma ioport  DUALADC8_1_fCounter2SL: 0x135
BYTE            DUALADC8_1_fCounter2SL;
#pragma ioport  DUALADC8_1_fCounter2OS: 0x136
BYTE            DUALADC8_1_fCounter2OS;
#pragma ioport  DUALADC8_1_bCount2: 0x034
BYTE            DUALADC8_1_bCount2;
#pragma ioport  DUALADC8_1_bPeriod2:    0x035
BYTE            DUALADC8_1_bPeriod2;
#pragma ioport  DUALADC8_1_bCompare2:   0x036
BYTE            DUALADC8_1_bCompare2;
#pragma ioport  DUALADC8_1_bCounter2_CR0:   0x037
BYTE            DUALADC8_1_bCounter2_CR0;

// PWM16 Block Register Definitions
#pragma ioport  DUALADC8_1_bfPWM_LSB_FN:    0x12c
BYTE            DUALADC8_1_bfPWM_LSB_FN;
#pragma ioport  DUALADC8_1_bfPWM_MSB_FN:    0x130
BYTE            DUALADC8_1_bfPWM_MSB_FN;
#pragma ioport  DUALADC8_1_fPWM_LSB_CR0:    0x02f
BYTE            DUALADC8_1_fPWM_LSB_CR0;
#pragma ioport  DUALADC8_1_fPWM_MSB_CR0:    0x033
BYTE            DUALADC8_1_fPWM_MSB_CR0;
#pragma ioport  DUALADC8_1_bPWM_Count_MSB:  0x030
BYTE            DUALADC8_1_bPWM_Count_MSB;
#pragma ioport  DUALADC8_1_bPWM_Count_LSB:  0x02c
BYTE            DUALADC8_1_bPWM_Count_LSB;
#pragma ioport  DUALADC8_1_bPWM_Period_MSB: 0x031
BYTE            DUALADC8_1_bPWM_Period_MSB;
#pragma ioport  DUALADC8_1_bPWM_Period_LSB: 0x02d
BYTE            DUALADC8_1_bPWM_Period_LSB;
#pragma ioport  DUALADC8_1_bPWM_IntTime_MSB:    0x032
BYTE            DUALADC8_1_bPWM_IntTime_MSB;
#pragma ioport  DUALADC8_1_bPWM_IntTime_LSB:    0x02e
BYTE            DUALADC8_1_bPWM_IntTime_LSB;
#pragma ioport  DUALADC8_1_bfPWM_LSB_FN:    0x12c
BYTE            DUALADC8_1_bfPWM_LSB_FN;
#pragma ioport  DUALADC8_1_bfPWM_MSB_FN:    0x130
BYTE            DUALADC8_1_bfPWM_MSB_FN;

#endif
// end of file DUALADC8_1.h
