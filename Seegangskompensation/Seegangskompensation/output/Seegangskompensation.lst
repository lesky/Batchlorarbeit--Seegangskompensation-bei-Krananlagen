FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 09 7A LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 02 E8 LJMP  _PWM8_1_ISR        (0149)     ljmp	_PWM8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 18    MOV   A,0x18             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [prozess+234],0x0  (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [prozess+235],0x0  (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 75 LCALL 0x0275             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 06 0E MOV   [__r0],0xE         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 06 14 CMP   [__r0],0x14        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 06    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 B0    MOV   X,0xB0             (0368)     mov  X,<__idata_start
00AC: 55 06 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 06 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 06    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 66 LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
01B0: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_seegangskompensation_Bank1
                                        (0019) export LoadConfigTBL_seegangskompensation_Bank0
                                        (0020) export LoadConfigTBL_seegangskompensation_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_seegangskompensation_Bank0:
                                        (0023) ;  Instance name I2Cm, User Module I2Cm
                                        (0024) ;  Instance name IN1, User Module LED
                                        (0025) ;  Instance name IN2, User Module LED
                                        (0026) ;  Instance name LCD_1, User Module LCD
                                        (0027) ;  Instance name PWM8_1, User Module PWM8
                                        (0028) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0029) 	db		23h, 00h		;PWM8_1_CONTROL_REG(DBB00CR0)
                                        (0030) 	db		21h, ffh		;PWM8_1_PERIOD_REG(DBB00DR1)
                                        (0031) 	db		22h, 00h		;PWM8_1_COMPARE_REG(DBB00DR2)
                                        (0032) ;  Global Register values Bank 0
                                        (0033) 	db		60h, 6bh		; AnalogColumnInputSelect register (AMX_IN)
                                        (0034) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0035) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0036) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0037) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0038) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0039) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0040) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0041) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0042) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0043) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0044) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0045) 	db		b5h, 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0046) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0047) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0048) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0049) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0050) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0051) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0052) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0053) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0054) 	db		ffh
                                        (0055) LoadConfigTBL_seegangskompensation_Bank1:
                                        (0056) ;  Instance name I2Cm, User Module I2Cm
                                        (0057) ;  Instance name IN1, User Module LED
                                        (0058) ;  Instance name IN2, User Module LED
                                        (0059) ;  Instance name LCD_1, User Module LCD
                                        (0060) ;  Instance name PWM8_1, User Module PWM8
                                        (0061) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0062) 	db		20h, 31h		;PWM8_1_FUNC_REG(DBB00FN)
                                        (0063) 	db		21h, 17h		;PWM8_1_INPUT_REG(DBB00IN)
                                        (0064) 	db		22h, 44h		;PWM8_1_OUTPUT_REG(DBB00OU)
                                        (0065) ;  Global Register values Bank 1
                                        (0066) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0067) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0068) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0069) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0070) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0071) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0072) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0073) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0074) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0075) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0076) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0077) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0078) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0079) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0080) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0081) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0082) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0083) 	db		ffh
                                        (0084) AREA psoc_config(rom, rel)
                                        (0085) LoadConfigTBL_seegangskompensation_Ordered:
                                        (0086) ;  Ordered Global Register values
                                        (0087) 	M8C_SetBank0
01B2: 62 00 00 MOV   REG[0x0],0x0       (0088) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01B5: 71 10    OR    F,0x10             
                                        (0089) 	M8C_SetBank1
01B7: 62 00 00 MOV   REG[0x0],0x0       (0090) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01BA: 62 01 FF MOV   REG[0x1],0xFF      (0091) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01BD: 70 EF    AND   F,0xEF             
                                        (0092) 	M8C_SetBank0
01BF: 62 03 FE MOV   REG[0x3],0xFE      (0093) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
01C2: 62 02 00 MOV   REG[0x2],0x0       (0094) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01C5: 71 10    OR    F,0x10             
                                        (0095) 	M8C_SetBank1
01C7: 62 02 01 MOV   REG[0x2],0x1       (0096) 	mov	reg[02h], 01h		; Port_0_IntCtrl_0 register (PRT0IC0)
01CA: 62 03 00 MOV   REG[0x3],0x0       (0097) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01CD: 70 EF    AND   F,0xEF             
                                        (0098) 	M8C_SetBank0
01CF: 62 01 01 MOV   REG[0x1],0x1       (0099) 	mov	reg[01h], 01h		; Port_0_IntEn register (PRT0IE)
01D2: 62 04 00 MOV   REG[0x4],0x0       (0100) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01D5: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
01D7: 62 04 38 MOV   REG[0x4],0x38      (0102) 	mov	reg[04h], 38h		; Port_1_DriveMode_0 register (PRT1DM0)
01DA: 62 05 C7 MOV   REG[0x5],0xC7      (0103) 	mov	reg[05h], c7h		; Port_1_DriveMode_1 register (PRT1DM1)
01DD: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
01DF: 62 07 C4 MOV   REG[0x7],0xC4      (0105) 	mov	reg[07h], c4h		; Port_1_DriveMode_2 register (PRT1DM2)
01E2: 62 06 10 MOV   REG[0x6],0x10      (0106) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
01E5: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
01E7: 62 06 00 MOV   REG[0x6],0x0       (0108) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01EA: 62 07 00 MOV   REG[0x7],0x0       (0109) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01ED: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
01EF: 62 05 00 MOV   REG[0x5],0x0       (0111) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01F2: 62 08 00 MOV   REG[0x8],0x0       (0112) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01F5: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
01F7: 62 08 7F MOV   REG[0x8],0x7F      (0114) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
01FA: 62 09 80 MOV   REG[0x9],0x80      (0115) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
01FD: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
01FF: 62 0B 80 MOV   REG[0xB],0x80      (0117) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0202: 62 0A 00 MOV   REG[0xA],0x0       (0118) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0205: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
0207: 62 0A 00 MOV   REG[0xA],0x0       (0120) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
020A: 62 0B 00 MOV   REG[0xB],0x0       (0121) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
020D: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
020F: 62 09 00 MOV   REG[0x9],0x0       (0123) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0212: 62 0C 00 MOV   REG[0xC],0x0       (0124) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0215: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
0217: 62 0C 00 MOV   REG[0xC],0x0       (0126) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
021A: 62 0D 00 MOV   REG[0xD],0x0       (0127) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
021D: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
021F: 62 0F 00 MOV   REG[0xF],0x0       (0129) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0222: 62 0E 00 MOV   REG[0xE],0x0       (0130) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0225: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
0227: 62 0E 00 MOV   REG[0xE],0x0       (0132) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
022A: 62 0F 00 MOV   REG[0xF],0x0       (0133) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
022D: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
022F: 62 0D 00 MOV   REG[0xD],0x0       (0135) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0232: 62 10 00 MOV   REG[0x10],0x0      (0136) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0235: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
0237: 62 10 00 MOV   REG[0x10],0x0      (0138) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
023A: 62 11 00 MOV   REG[0x11],0x0      (0139) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
023D: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
023F: 62 13 00 MOV   REG[0x13],0x0      (0141) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0242: 62 12 00 MOV   REG[0x12],0x0      (0142) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0245: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
0247: 62 12 00 MOV   REG[0x12],0x0      (0144) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
024A: 62 13 00 MOV   REG[0x13],0x0      (0145) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
024D: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
024F: 62 11 00 MOV   REG[0x11],0x0      (0147) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0252: 62 14 00 MOV   REG[0x14],0x0      (0148) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0255: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
0257: 62 14 00 MOV   REG[0x14],0x0      (0150) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
025A: 62 15 00 MOV   REG[0x15],0x0      (0151) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
025D: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
025F: 62 17 00 MOV   REG[0x17],0x0      (0153) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0262: 62 16 00 MOV   REG[0x16],0x0      (0154) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0265: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
0267: 62 16 00 MOV   REG[0x16],0x0      (0156) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
026A: 62 17 00 MOV   REG[0x17],0x0      (0157) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
026D: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
026F: 62 15 00 MOV   REG[0x15],0x0      (0159) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0272: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
0274: 7F       RET                      (0161) 	ret
                                        (0162) 
                                        (0163) 
                                        (0164) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_seegangskompensation
                                        (0026) export _LoadConfig_seegangskompensation
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_1_DriveMode_0_SHADE
                                        (0030) export _Port_1_DriveMode_0_SHADE
                                        (0031) export Port_1_DriveMode_1_SHADE
                                        (0032) export _Port_1_DriveMode_1_SHADE
                                        (0033) export Port_1_DriveMode_2_SHADE
                                        (0034) export _Port_1_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
0275: 55 07 00 MOV   [0x7],0x0          (0073) 	mov		[Port_1_Data_SHADE], 0h
0278: 55 09 38 MOV   [0x9],0x38         (0074) 	mov		[Port_1_DriveMode_0_SHADE], 38h
027B: 55 0A C7 MOV   [0xA],0xC7         (0075) 	mov		[Port_1_DriveMode_1_SHADE], c7h
027E: 55 0B C4 MOV   [0xB],0xC4         (0076) 	mov		[Port_1_DriveMode_2_SHADE], c4h
0281: 55 08 00 MOV   [0x8],0x0          (0077) 	mov		[Port_2_Data_SHADE], 0h
0284: 55 0C 7F MOV   [0xC],0x7F         (0078) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0287: 55 0D 80 MOV   [0xD],0x80         (0079) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0080) 
028A: 7C 02 91 LCALL 0x0291             (0081) 	lcall	LoadConfig_seegangskompensation
028D: 7C 01 B0 LCALL 0x01B0             (0082) 	lcall	LoadConfigTBL_seegangskompensation_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
0290: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration seegangskompensation
                                        (0090) ;
                                        (0091) ;    Load configuration registers for seegangskompensation.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_seegangskompensation:
                                        (0108)  LoadConfig_seegangskompensation:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
0291: 10       PUSH  X                  (0111) 	push	x
0292: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0294: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
0296: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
0297: 50 01    MOV   A,0x1              (0116)     mov     A, >LoadConfigTBL_seegangskompensation_Bank0
0299: 57 56    MOV   X,0x56             (0117)     mov     X, <LoadConfigTBL_seegangskompensation_Bank0
029B: 7C 02 AC LCALL 0x02AC             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
029E: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
02A0: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
02A1: 50 01    MOV   A,0x1              (0123)     mov     A, >LoadConfigTBL_seegangskompensation_Bank1
02A3: 57 87    MOV   X,0x87             (0124)     mov     X, <LoadConfigTBL_seegangskompensation_Bank1
02A5: 7C 02 AC LCALL 0x02AC             (0125)     lcall   LoadConfig              ; Load the bank 1 values
02A8: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
02AA: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
02AB: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
02AC: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
02AE: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
02AF: 08       PUSH  A                  (0155)     push    A
02B0: 4F       MOV   X,SP               (0156)     mov     X, SP
02B1: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
02B4: D0 04    JNC   0x02B9             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02B6: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
02B9: 18       POP   A                  (0161)     pop     A
02BA: 20       POP   X                  (0162)     pop     X
02BB: 70 EF    AND   F,0xEF             
02BD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02C0: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
02C1: 08       PUSH  A                  (0168)     push    A
02C2: 28       ROMX                     (0169)     romx                            ; Load register address from table
02C3: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
02C5: A0 1F    JZ    0x02E5             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
02C7: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
02C8: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
02CB: A0 03    JZ    0x02CF             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02CD: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
02CF: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
02D1: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
02D2: 20       POP   X                  (0179)     pop     X
02D3: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
02D4: 09 00    ADC   A,0x0              (0181)     adc     A, 0
02D6: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
02D7: 08       PUSH  A                  (0183)     push    A
02D8: 28       ROMX                     (0184)     romx                            ; load config data from the table
02D9: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
02DA: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
02DC: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
02DE: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
02DF: 20       POP   X                  (0189)     pop     X
02E0: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
02E1: 09 00    ADC   A,0x0              (0191)     adc     A, 0
02E3: 8F D7    JMP   0x02BB             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
02E5: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
02E7: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_1_Data_SHADE:
                                        (0204) Port_1_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_1_DriveMode_0_SHADE:
                                        (0208) Port_1_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_1_DriveMode_1_SHADE:
                                        (0210) Port_1_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_1_DriveMode_2_SHADE:
                                        (0212) Port_1_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
02E8: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
02E9: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA seegangskompensation_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
02EC: 7F       RET                      (0095)    ret
02ED: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
02F0: 7F       RET                      (0123)    ret
02F1: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
02F4: 7F       RET                      (0152)    ret
02F5: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
02F8: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
02F9: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
02FB: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
02FC: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
02FE: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
02FF: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0301: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0302: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0303: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
0305: 08       PUSH  A                  (0305)    push  A                                       ;
0306: 41 23 FE AND   REG[0x23],0xFE     
0309: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
030B: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
030D: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
030E: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
0311: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0313: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
0315: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
0317: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0318: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
031A: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
031C: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
031E: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0320: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
0322: 70 EF    AND   F,0xEF             
0324: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
0327: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0328: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
032A: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
032B: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
032C: 10       PUSH  X                  (0209)     push  X
032D: 28       ROMX                     (0210)     romx                               ; Get character from ROM
032E: B0 04    JNZ   0x0333             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0330: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0331: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0332: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0333: 90 3C    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data|LCD_1_WriteData(0218)     call  LCD_1_WriteData              ; Write data to LCD
0335: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0336: 18       POP   A                  (0220)     pop   A
0337: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0338: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
033A: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
033B: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
034D: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
034E: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
034F: 67       ASR   A                  (0262)     asr   A
0350: 67       ASR   A                  (0263)     asr   A
0351: 67       ASR   A                  (0264)     asr   A
0352: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0354: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0356: 90 19    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data|LCD_1_WriteData(0267)     call  LCD_1_WriteData              ; Write data to screen
0358: 18       POP   A                  (0268)     pop   A                            ; Restore value
0359: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
035B: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
035D: 90 12    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data|LCD_1_WriteData(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
035F: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0360: 4B       SWAP  A,X                (0305)     swap  A,X
0361: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
0363: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0364: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0366: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0367: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0369: A0 06    JZ    0x0370             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
036B: 90 04    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data|LCD_1_WriteData(0349)     call  LCD_1_WriteData              ; Write data to screen
036D: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
036E: 8F F8    JMP   _LCD_1_PrString    (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0370: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0371: 90 5F    CALL  0x03D2             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0373: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0374: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0375: 67       ASR   A                  (0390)     asr   A
0376: 67       ASR   A                  (0391)     asr   A
0377: 67       ASR   A                  (0392)     asr   A
0378: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
037A: 90 38    CALL  0x03B4             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
037C: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
037D: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
037F: 40       NOP                      (0397)     nop
0380: 40       NOP                      (0398)     nop
0381: 40       NOP                      (0399)     nop
0382: 90 30    CALL  0x03B4             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0384: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0385: 90 4B    CALL  0x03D2             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0387: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0388: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0389: 67       ASR   A                  (0436)     asr   A
038A: 67       ASR   A                  (0437)     asr   A
038B: 67       ASR   A                  (0438)     asr   A
038C: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
038E: 90 09    CALL  0x0399             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
0390: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0391: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0393: 40       NOP                      (0443)     nop
0394: 40       NOP                      (0444)     nop
0395: 40       NOP                      (0445)     nop
0396: 90 01    CALL  0x0399             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0398: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0399: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
039A: 26 08 80 AND   [0x8],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
039D: 51 08    MOV   A,[0x8]            (0480)     mov   A,[Port_2_Data_SHADE]
039F: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
03A1: 18       POP   A                  (0483)     pop   A
03A2: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
03A4: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
03A6: 2A 08    OR    A,[0x8]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
03A8: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
03AA: 53 08    MOV   [0x8],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03AC: 40       NOP                      (0489)     nop
03AD: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
03AF: 53 08    MOV   [0x8],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03B1: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
03B3: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
03B4: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
03B5: 26 08 80 AND   [0x8],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
03B8: 2E 08 20 OR    [0x8],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
03BB: 51 08    MOV   A,[0x8]            (0527)     mov   A,[Port_2_Data_SHADE]
03BD: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
03BF: 18       POP   A                  (0530)     pop   A
03C0: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
03C2: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
03C4: 2A 08    OR    A,[0x8]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
03C6: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
03C8: 53 08    MOV   [0x8],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
03CA: 40       NOP                      (0536)     NOP
03CB: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
03CD: 53 08    MOV   [0x8],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
03CF: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
03D1: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
03D2: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
03D3: 26 08 80 AND   [0x8],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
03D6: 51 08    MOV   A,[0x8]            (0574)     mov   A,[Port_2_Data_SHADE]
03D8: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
03DA: 26 0C F0 AND   [0xC],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
03DD: 51 0C    MOV   A,[0xC]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
03DF: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
03E1: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
03E3: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
03E5: 2E 08 40 OR    [0x8],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
03E8: 51 08    MOV   A,[0x8]            (0584)     mov   A,[Port_2_Data_SHADE]
03EA: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
03EC: 40       NOP                      (0586)     NOP
                                        (0587) 
03ED: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
03EE: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
03F0: 2E 08 50 OR    [0x8],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
03F3: 51 08    MOV   A,[0x8]            (0593)     mov   A,[Port_2_Data_SHADE]
03F5: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
03F7: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
03F8: 40       NOP                      (0597)     nop
03F9: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
03FB: 08       PUSH  A                  (0610)     push  A
03FC: 26 08 C0 AND   [0x8],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
03FF: 51 08    MOV   A,[0x8]            (0612)     mov   A,[Port_2_Data_SHADE]
0401: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
0403: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0404: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0405: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0406: 2E 08 50 OR    [0x8],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0409: 51 08    MOV   A,[0x8]            (0620)     mov   A,[Port_2_Data_SHADE]
040B: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
040D: 40       NOP                      (0623)     nop
040E: 40       NOP                      (0624)     nop
                                        (0625) 
040F: 26 08 C0 AND   [0x8],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0412: 51 08    MOV   A,[0x8]            (0627)     mov   A,[Port_2_Data_SHADE]
0414: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0416: 18       POP   A                  (0630)     pop   A
0417: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0419: A0 04    JZ    0x041E             (0633)     jz    .UNLOCK
041B: 79       DEC   X                  (0634)     dec   X
041C: BF D3    JNZ   0x03F0             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
041E: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
041F: 2E 0C 7F OR    [0xC],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
0422: 51 0C    MOV   A,[0xC]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0424: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0426: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0428: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
042A: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
042B: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
042C: 26 0C 80 AND   [0xC],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
042F: 2E 0C 7F OR    [0xC],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
0432: 26 0D 80 AND   [0xD],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
0435: 51 0C    MOV   A,[0xC]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0437: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0439: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
043B: 51 0D    MOV   A,[0xD]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
043D: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
043F: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0441: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0443: 90 63    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
0445: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0447: 90 5F    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0449: 50 03    MOV   A,0x3              (0701)     mov   A,03h
044B: 9F 4C    CALL  0x0399             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
044D: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
044F: 90 57    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
0451: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0453: 9F 44    CALL  0x0399             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
0455: 90 5F    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0457: 90 5D    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0459: 90 5B    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
045B: 50 03    MOV   A,0x3              (0714)     mov   A,03h
045D: 9F 3A    CALL  0x0399             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
045F: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0461: 90 45    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
0463: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0465: 9F 32    CALL  0x0399             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0467: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0469: 90 3D    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
046B: 50 08    MOV   A,0x8              (0726)     mov   A,08h
046D: 9F 16    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
046F: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0471: 90 35    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
0473: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0475: 9F 0E    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0477: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0479: 90 2D    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
047B: 50 06    MOV   A,0x6              (0736)     mov   A,06h
047D: 9F 06    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
047F: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0481: 9F 02    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
0483: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0485: 9E FE    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0487: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0489: 9E FA    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
048B: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
048D: 9E F6    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
048F: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
0491: 9E F2    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0493: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0495: 90 11    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0497: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
049C: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
049E: 10       PUSH  X                  (0791)     push  X                            ; Store COL
049F: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
04A1: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
04A2: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
04A4: 20       POP   X                  (0795)     pop   X
                                        (0796) 
04A5: 9E DE    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
04A7: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
04A8: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
04AA: 78       DEC   A                  (0828)     dec   A
04AB: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
04AD: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
04B6: 08       PUSH  A                  (0871)     push  A
04B7: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
04B9: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
04BB: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
04BD: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
04BF: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
04C1: D0 06    JNC   0x04C8             (0877)     jnc   .Delay50u_End
04C3: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
04C5: 78       DEC   A                  (0880)     dec   A                              ; [4]
04C6: BF FE    JNZ   0x04C5             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
04C8: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
04C9: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_1_Control                ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_1_WriteData              ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_1_Control                ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_1_WriteData              ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\in2.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   IN2.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "IN2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _IN2_Start
                                        (0027) export  IN2_Start
                                        (0028) 
                                        (0029) export _IN2_Stop
                                        (0030) export  IN2_Stop
                                        (0031) 
                                        (0032) export _IN2_On
                                        (0033) export  IN2_On
                                        (0034) 
                                        (0035) export _IN2_Off
                                        (0036) export  IN2_Off
                                        (0037) 
                                        (0038) export _IN2_Switch
                                        (0039) export  IN2_Switch
                                        (0040) 
                                        (0041) export _IN2_Invert
                                        (0042) export  IN2_Invert
                                        (0043) 
                                        (0044) export _IN2_GetState
                                        (0045) export  IN2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: IN2_Start(void)
                                        (0054) ;  FUNCTION NAME: IN2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: IN2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _IN2_On:
                                        (0079)  IN2_On:
04CA: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
04CC: 80 03    JMP   _IN2_Switch        (0081)    jmp  IN2_Switch 
                                        (0082) 
                                        (0083) _IN2_Start:
                                        (0084)  IN2_Start:
                                        (0085) _IN2_Stop:
                                        (0086)  IN2_Stop:
                                        (0087) _IN2_Off:
                                        (0088)  IN2_Off:
04CE: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _IN2_Switch:
                                        (0092)  IN2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
04D0: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
04D2: A0 06    JZ    0x04D9             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],IN2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
04D4: 26 07 DF AND   [0x7],0xDF         (0104)    and  [Port_1_Data_SHADE],~IN2_PinMask
                                        (0105) ENDIF
04D7: 80 04    JMP   0x04DC             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~IN2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
04D9: 2E 07 20 OR    [0x7],0x20         (0112)    or   [Port_1_Data_SHADE],IN2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
04DC: 51 07    MOV   A,[0x7]            (0116)    mov  A,[Port_1_Data_SHADE]
04DE: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[IN2_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
04E0: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: IN2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _IN2_Invert:
                                        (0144)  IN2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
04E1: 36 07 20 XOR   [0x7],0x20         (0149)    xor  [Port_1_Data_SHADE],IN2_PinMask
04E4: 51 07    MOV   A,[0x7]            (0150)    mov  A,[Port_1_Data_SHADE]
04E6: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[IN2_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
04E8: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: IN2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _IN2_GetState:
                                        (0177)  IN2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
04E9: 51 07    MOV   A,[0x7]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
04EB: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
04EC: 21 20    AND   A,0x20             (0188)    and   A,IN2_PinMask                 ; Mask off the trash
04EE: A0 03    JZ    0x04F2             (0189)    jz    .End_LED_GS                   ; If zero, we're done
04F0: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
04F2: 7F       RET                      (0195)    ret
FILE: lib\in1.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   IN1.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "IN1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _IN1_Start
                                        (0027) export  IN1_Start
                                        (0028) 
                                        (0029) export _IN1_Stop
                                        (0030) export  IN1_Stop
                                        (0031) 
                                        (0032) export _IN1_On
                                        (0033) export  IN1_On
                                        (0034) 
                                        (0035) export _IN1_Off
                                        (0036) export  IN1_Off
                                        (0037) 
                                        (0038) export _IN1_Switch
                                        (0039) export  IN1_Switch
                                        (0040) 
                                        (0041) export _IN1_Invert
                                        (0042) export  IN1_Invert
                                        (0043) 
                                        (0044) export _IN1_GetState
                                        (0045) export  IN1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: IN1_Start(void)
                                        (0054) ;  FUNCTION NAME: IN1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: IN1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _IN1_On:
                                        (0079)  IN1_On:
04F3: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
04F5: 80 03    JMP   _IN1_Switch        (0081)    jmp  IN1_Switch 
                                        (0082) 
                                        (0083) _IN1_Start:
                                        (0084)  IN1_Start:
                                        (0085) _IN1_Stop:
                                        (0086)  IN1_Stop:
                                        (0087) _IN1_Off:
                                        (0088)  IN1_Off:
04F7: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _IN1_Switch:
                                        (0092)  IN1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
04F9: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
04FB: A0 06    JZ    0x0502             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],IN1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
04FD: 26 07 F7 AND   [0x7],0xF7         (0104)    and  [Port_1_Data_SHADE],~IN1_PinMask
                                        (0105) ENDIF
0500: 80 04    JMP   0x0505             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~IN1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0502: 2E 07 08 OR    [0x7],0x8          (0112)    or   [Port_1_Data_SHADE],IN1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0505: 51 07    MOV   A,[0x7]            (0116)    mov  A,[Port_1_Data_SHADE]
0507: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[IN1_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0509: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: IN1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _IN1_Invert:
                                        (0144)  IN1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
050A: 36 07 08 XOR   [0x7],0x8          (0149)    xor  [Port_1_Data_SHADE],IN1_PinMask
050D: 51 07    MOV   A,[0x7]            (0150)    mov  A,[Port_1_Data_SHADE]
050F: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[IN1_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0511: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: IN1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _IN1_GetState:
                                        (0177)  IN1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
0512: 51 07    MOV   A,[0x7]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
0514: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0515: 21 08    AND   A,0x8              (0188)    and   A,IN1_PinMask                 ; Mask off the trash
0517: A0 03    JZ    0x051B             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0519: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
051B: 7F       RET                      (0195)    ret
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area seegangskompensation_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_1_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
051C: 2E 0A 03 OR    [0xA],0x3          (0125)     or   [Port_1_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
051F: 26 09 FC AND   [0x9],0xFC         (0126)     and  [Port_1_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
0522: 26 0B FC AND   [0xB],0xFC         (0129)     and  [Port_1_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0525: 51 0B    MOV   A,[0xB]            (0130)     mov  A,[Port_1_DriveMode_2_SHADE]
0527: 60 07    MOV   REG[0x7],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0529: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
052B: 51 0A    MOV   A,[0xA]            (0135)     mov  A,[Port_1_DriveMode_1_SHADE]
052D: 60 05    MOV   REG[0x5],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
052F: 51 09    MOV   A,[0x9]            (0137)     mov  A,[Port_1_DriveMode_0_SHADE]
0531: 60 04    MOV   REG[0x4],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
0533: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0535: 26 07 FC AND   [0x7],0xFC         (0142)     and  [Port_1_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0538: 51 07    MOV   A,[0x7]            (0143)     mov  A,[Port_1_Data_SHADE]
053A: 60 04    MOV   REG[0x4],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
053C: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
053D: 7F       RET                      (0174)     ret
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
053E: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
053F: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0541: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0542: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0544: 55 14 00 MOV   [prozess+6],0x0    (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0547: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
054A: B0 05    JNZ   0x0550             (0228)     jnz   DoRestartRx
054C: 91 AE    CALL  0x06FC             (0229)     call  I2C_DoStart                                      ; Send a start and address.
054E: 80 03    JMP   0x0552             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0550: 91 77    CALL  0x06C9             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
0552: 47 14 01 TST   [prozess+6],0x1    (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0555: A0 20    JZ    0x0576             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0557: 2E 14 10 OR    [prozess+6],0x10   (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
055A: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
055B: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
055D: B0 04    JNZ   0x0562             (0242)     jnz   I2C_READ
055F: 26 14 EF AND   [prozess+6],0xEF   (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
0562: 92 49    CALL  0x07AD             (0245)     call  I2Cm_read                                        ; Read a byte
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
0564: 20       POP   X                  (0247)     pop   x                                                ; Restore x
0565: 10       PUSH  X                  (0248)     push  x
0566: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0568: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0252)     mov   A,[x+RxArrayMSB]
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0569: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
056A: 51 15    MOV   A,[prozess+7]      (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
056C: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
056E: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
056F: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0571: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0574: BF E5    JNZ   0x055A             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0576: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0579: B0 03    JNZ   0x057D             (0265)     jnz   SkipRxStop
057B: 92 B6    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
057D: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
057F: 47 14 01 TST   [prozess+6],0x1    (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0582: A0 03    JZ    0x0586             (0271)     jz    End_ReadBytes
0584: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0586: 7F       RET                      (0276)     ret
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
0587: 64       ASL   A                  (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
0588: 29 01    OR    A,0x1              (0316)     or    A,0x01                                       ; OR the address with the Read bit.
058A: 55 14 00 MOV   [prozess+6],0x0    (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
058D: 48 FD 01 TST   [X-3],0x1          (0318)     tst   [x+RxMode_X],I2Cm_RepStart
0590: B0 05    JNZ   0x0596             (0319)     jnz   DoRestartRxSmm
0592: 91 68    CALL  0x06FC             (0320)     call  I2C_DoStart                                      ; Send a start and address.
0594: 80 03    JMP   0x0598             (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
0596: 91 31    CALL  0x06C9             (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
0598: 47 14 01 TST   [prozess+6],0x1    (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
059B: A0 1E    JZ    0x05BA             (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
059D: 2E 14 10 OR    [prozess+6],0x10   (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
05A0: 10       PUSH  X                  (0330)     push  x                                                ; Save X for later
05A1: 7B FE    DEC   [X-2]              (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
05A3: B0 04    JNZ   0x05A8             (0332)     jnz   I2C_READSmm
05A5: 26 14 EF AND   [prozess+6],0xEF   (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
05A8: 92 03    CALL  0x07AD             (0335)     call  I2Cm_read                                        ; Read a byte
05AA: 20       POP   X                  (0336)     pop   x                                                ; Restore x
05AB: 10       PUSH  X                  (0337)     push  x                                                ; Store x
05AC: 59 00    MOV   X,[X+0]            (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
05AE: 51 15    MOV   A,[prozess+7]      (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
05B0: 54 00    MOV   [X+0],A            (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
05B2: 20       POP   X                  (0341)     pop   x                                                ; Restore the original pointer
05B3: 77 00    INC   [X+0]              (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
05B5: 48 FE FF TST   [X-2],0xFF         (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
05B8: BF E7    JNZ   0x05A0             (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
05BA: 48 FD 02 TST   [X-3],0x2          (0346)     tst   [x+RxMode_X],I2Cm_NoStop
05BD: B0 03    JNZ   0x05C1             (0347)     jnz   SkipRxStopSmm
05BF: 92 72    CALL  _I2Cm_SendStop     (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
05C1: 50 00    MOV   A,0x0              (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
05C3: 47 14 01 TST   [prozess+6],0x1    (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
05C6: A0 03    JZ    0x05CA             (0352)     jz    End_ReadBytesSmm
05C8: 50 01    MOV   A,0x1              (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
05CA: 7F       RET                      (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
05CB: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
05CC: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
05CE: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
05CF: 55 14 00 MOV   [prozess+6],0x0    (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
05D2: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
05D5: B0 05    JNZ   0x05DB             (0414)     jnz   DoRestartTx
05D7: 91 23    CALL  0x06FC             (0415)     call  I2C_DoStart                                 ; Send a start and address.
05D9: 80 03    JMP   0x05DD             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
05DB: 90 EC    CALL  0x06C9             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
05DD: 55 16 00 MOV   [prozess+8],0x0    (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
05E0: 47 14 01 TST   [prozess+6],0x1    (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
05E3: A0 1A    JZ    0x05FE             (0423)     jz    End_WR_Loop
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
05E5: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
05E6: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
05E8: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0430)     mov   a,[x+TxArrayMSB]
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
05E9: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
05EA: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
05EC: 53 15    MOV   [prozess+7],A      (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
05EE: 91 36    CALL  0x0726             (0436)     call  I2Cm_write                                  ; Write the data
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
05F0: 20       POP   X                  (0439)     pop   x
05F1: 47 14 01 TST   [prozess+6],0x1    (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
05F4: A0 0E    JZ    0x0603             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
05F6: 76 16    INC   [prozess+8]        (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
05F8: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
05FA: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
05FC: BF E8    JNZ   0x05E5             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
05FE: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
0601: B0 03    JNZ   0x0605             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0603: 92 2E    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0605: 51 16    MOV   A,[prozess+8]      (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0607: 7F       RET                      (0457)     ret
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
0608: 64       ASL   A                  (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
0609: 55 14 00 MOV   [prozess+6],0x0    (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
060C: 48 FD 01 TST   [X-3],0x1          (0504)     tst   [x+TxMode_X],I2Cm_RepStart
060F: B0 05    JNZ   0x0615             (0505)     jnz   DoRestartTxSmm
0611: 90 E9    CALL  0x06FC             (0506)     call  I2C_DoStart                                 ; Send a start and address.
0613: 80 03    JMP   0x0617             (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
0615: 90 B2    CALL  0x06C9             (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
0617: 55 16 00 MOV   [prozess+8],0x0    (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
061A: 47 14 01 TST   [prozess+6],0x1    (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
061D: A0 18    JZ    0x0636             (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
061F: 10       PUSH  X                  (0515)     push  x                                           ; Save X for later
0620: 59 00    MOV   X,[X+0]            (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
0622: 52 00    MOV   A,[X+0]            (0517)     mov   a,[x]                                       ; Get data pointer to by X
0624: 53 15    MOV   [prozess+7],A      (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
0626: 90 FE    CALL  0x0726             (0519)     call  I2Cm_write                                  ; Write the data
0628: 20       POP   X                  (0520)     pop   x
0629: 47 14 01 TST   [prozess+6],0x1    (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
062C: A0 0E    JZ    0x063B             (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
062E: 76 16    INC   [prozess+8]        (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0630: 77 00    INC   [X+0]              (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
0632: 7B FE    DEC   [X-2]              (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
0634: BF EA    JNZ   0x061F             (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
0636: 48 FD 02 TST   [X-3],0x2          (0528)     tst   [x+TxMode_X],I2Cm_NoStop
0639: B0 03    JNZ   0x063D             (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
063B: 91 F6    CALL  _I2Cm_SendStop     (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
063D: 51 16    MOV   A,[prozess+8]      (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
063F: 7F       RET                      (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0640: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0641: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0643: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0644: 55 14 00 MOV   [prozess+6],0x0    (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0647: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
064A: B0 05    JNZ   0x0650             (0591)     jnz   DoCRestartTx                                ; should executed.
064C: 90 AE    CALL  0x06FC             (0592)     call  I2C_DoStart                                 ; Send a start and address.
064E: 80 03    JMP   0x0652             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0650: 90 77    CALL  0x06C9             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0652: 55 16 00 MOV   [prozess+8],0x0    (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0655: 47 14 01 TST   [prozess+6],0x1    (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0658: A0 1D    JZ    0x0676             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
065A: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
065B: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
065D: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
065F: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0660: 53 15    MOV   [prozess+7],A      (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
0662: 90 C2    CALL  0x0726             (0609)     call  I2Cm_write                                  ; Write the data
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
0664: 20       POP   X                  (0611)     pop   x
0665: 47 14 01 TST   [prozess+6],0x1    (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0668: A0 12    JZ    0x067B             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
066A: 76 16    INC   [prozess+8]        (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
066C: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
066E: D0 03    JNC   0x0672             (0616)     jnc   DecBCnt
0670: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0672: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0674: BF E5    JNZ   0x065A             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0676: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0679: B0 03    JNZ   0x067D             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
067B: 91 B6    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
067D: 51 16    MOV   A,[prozess+8]      (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
067F: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
0680: 64       ASL   A                  (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
0681: 55 14 00 MOV   [prozess+6],0x0    (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
0684: 48 FD 01 TST   [X-3],0x1          (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
0687: B0 05    JNZ   0x068D             (0680)     jnz   DoCRestartTxSmm                                ; should executed.
0689: 90 71    CALL  0x06FC             (0681)     call  I2C_DoStart                                 ; Send a start and address.
068B: 80 03    JMP   0x068F             (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
068D: 90 3A    CALL  0x06C9             (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
068F: 55 16 00 MOV   [prozess+8],0x0    (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0692: 47 14 01 TST   [prozess+6],0x1    (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0695: A0 1D    JZ    0x06B3             (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
0697: 10       PUSH  X                  (0691)     push  x                                           ; Save X for later
                                        (0692) 
0698: 52 FF    MOV   A,[X-1]            (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
069A: 59 00    MOV   X,[X+0]            (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
069C: 28       ROMX                     (0695)     romx                                              ; Put ROM Data in a
069D: 53 15    MOV   [prozess+7],A      (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
069F: 90 85    CALL  0x0726             (0697)     call  I2Cm_write                                  ; Write the data
06A1: 20       POP   X                  (0698)     pop   x
06A2: 47 14 01 TST   [prozess+6],0x1    (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
06A5: A0 12    JZ    0x06B8             (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
06A7: 76 16    INC   [prozess+8]        (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
06A9: 77 00    INC   [X+0]              (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
06AB: D0 03    JNC   0x06AF             (0703)     jnc   DecBCntSmm
06AD: 77 FF    INC   [X-1]              (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
06AF: 7B FE    DEC   [X-2]              (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
06B1: BF E5    JNZ   0x0697             (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
06B3: 48 FD 02 TST   [X-3],0x2          (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
06B6: B0 03    JNZ   0x06BA             (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
06B8: 91 79    CALL  _I2Cm_SendStop     (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
06BA: 51 16    MOV   A,[prozess+8]      (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
06BC: 7F       RET                      (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
06BD: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
06BE: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
06BF: D0 04    JNC   0x06C4             (0755)     jnc   .setRead                                ; Do a write if zero
06C1: 90 06    CALL  0x06C9             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
06C3: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
06C4: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
06C6: 90 01    CALL  0x06C9             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
06C8: 7F       RET                      (0763)     ret  
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
06C9: 08       PUSH  A                  (0768)     push  a
06CA: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
06CC: 2E 09 02 OR    [0x9],0x2          (0770)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
06CF: 26 09 FE AND   [0x9],0xFE         (0771)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
06D2: 51 09    MOV   A,[0x9]            (0772)     mov   A,[Port_1_DriveMode_0_SHADE]
06D4: 60 04    MOV   REG[0x4],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
06D6: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
06D8: 91 88    CALL  0x0862             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
06DA: 26 09 FD AND   [0x9],0xFD         (0779)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
06DD: 51 09    MOV   A,[0x9]            (0780)     mov   A,[Port_1_DriveMode_0_SHADE]
06DF: 60 04    MOV   REG[0x4],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
06E1: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
06E3: 49 04 02 TST   REG[0x4],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
06E6: AF FC    JZ    0x06E3             (0787)     jz    clockstretch1
                                        (0788) 
06E8: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
06EA: 91 76    CALL  0x0862             (0790)     call  I2Cm_delay
06EC: 18       POP   A                  (0791)     pop   a
06ED: 90 0D    CALL  0x06FC             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
06EF: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
06F0: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
06F1: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
06F2: D0 04    JNC   0x06F7             (0832)     jnc   .SetRead
06F4: 90 06    CALL  0x06FC             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
06F6: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
06F7: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
06F9: 90 01    CALL  0x06FC             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
06FB: 7F       RET                      (0840)     ret
06FC: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
06FE: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
06FF: 2E 09 01 OR    [0x9],0x1          (0847)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0702: 51 09    MOV   A,[0x9]            (0848)     mov   A,[Port_1_DriveMode_0_SHADE]
0704: 60 04    MOV   REG[0x4],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
0706: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0708: 91 58    CALL  0x0862             (0852)     call  I2Cm_delay
070A: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
070B: 70 EF    AND   F,0xEF             
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
070D: 53 15    MOV   [prozess+7],A      (0856)     mov   [I2Cm_bData],A
070F: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0711: 2E 09 02 OR    [0x9],0x2          (0860)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0714: 51 09    MOV   A,[0x9]            (0861)     mov   A,[Port_1_DriveMode_0_SHADE]
0716: 60 04    MOV   REG[0x4],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
0718: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
071A: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
071C: 91 44    CALL  0x0862             (0866)     call  I2Cm_delay
071E: 90 06    CALL  0x0726             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0720: 7F       RET                      (0869)     ret
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
0721: 53 15    MOV   [prozess+7],A      (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
0723: 90 01    CALL  0x0726             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0725: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
0726: 55 17 08 MOV   [prozess+9],0x8    (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0729: 7A 17    DEC   [prozess+9]        (0932)     dec   [I2Cm_bit_count]
072B: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
072D: 2E 09 02 OR    [0x9],0x2          (0937)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin
0730: 51 09    MOV   A,[0x9]            (0938)     mov   A,[Port_1_DriveMode_0_SHADE]
0732: 60 04    MOV   REG[0x4],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
0734: 70 EF    AND   F,0xEF             
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
0736: 6B 15    RLC   [prozess+7]        (0943)     rlc   [I2Cm_bData]
0738: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
073A: C0 0A    JC    0x0745             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
073C: 2E 09 01 OR    [0x9],0x1          (0947)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SDA_pin
073F: 51 09    MOV   A,[0x9]            (0948)     mov   A,[Port_1_DriveMode_0_SHADE]
0741: 60 04    MOV   REG[0x4],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
0743: 80 08    JMP   0x074C             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0745: 26 09 FE AND   [0x9],0xFE         (0953)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0748: 51 09    MOV   A,[0x9]            (0954)     mov   A,[Port_1_DriveMode_0_SHADE]
074A: 60 04    MOV   REG[0x4],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
074C: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
074E: 91 12    CALL  0x0862             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0750: 26 09 FD AND   [0x9],0xFD         (0961)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
0753: 51 09    MOV   A,[0x9]            (0962)     mov   A,[Port_1_DriveMode_0_SHADE]
0755: 60 04    MOV   REG[0x4],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
0757: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0759: 49 04 02 TST   REG[0x4],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
075C: AF FC    JZ    0x0759             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
075E: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0760: 91 00    CALL  0x0862             (0972)     call  I2Cm_delay
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
0762: 3C 17 00 CMP   [prozess+9],0x0    (0975)     cmp   [I2Cm_bit_count],0
0765: BF C3    JNZ   0x0729             (0976)     jnz   writenextbit
0767: 90 01    CALL  0x076A             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0769: 7F       RET                      (0980)     ret
076A: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
076C: 2E 09 02 OR    [0x9],0x2          (1013)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin
076F: 51 09    MOV   A,[0x9]            (1014)     mov   A,[Port_1_DriveMode_0_SHADE]
0771: 60 04    MOV   REG[0x4],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0773: 26 09 FE AND   [0x9],0xFE         (1017)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin
0776: 51 09    MOV   A,[0x9]            (1018)     mov   A,[Port_1_DriveMode_0_SHADE]
0778: 60 04    MOV   REG[0x4],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
077A: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
077C: 90 E4    CALL  0x0862             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
077E: 26 09 FD AND   [0x9],0xFD         (1024)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
0781: 51 09    MOV   A,[0x9]            (1025)     mov   A,[Port_1_DriveMode_0_SHADE]
0783: 60 04    MOV   REG[0x4],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
0785: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0787: 49 04 02 TST   REG[0x4],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
078A: AF FC    JZ    0x0787             (1032)     jz    clockstretch3
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
078C: 26 14 FE AND   [prozess+6],0xFE   (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
078F: 49 04 01 TST   REG[0x4],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0792: B0 04    JNZ   0x0797             (1038)     jnz    getack2                                         ; If ACKed, set flag
0794: 2E 14 01 OR    [prozess+6],0x1    (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0797: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0799: 90 C7    CALL  0x0862             (1043)     call  I2Cm_delay
                                        (1044) 
079B: 51 14    MOV   A,[prozess+6]      (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
079D: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
079F: 7F       RET                      (1048)     ret
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
07A0: 55 14 00 MOV   [prozess+6],0x0    (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
07A3: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
07A5: A0 07    JZ    0x07AD             (1086)     jz    I2Cm_read                                        ; Don't ACK
07A7: 2E 14 10 OR    [prozess+6],0x10   (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
07AA: 90 01    CALL  0x07AD             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
07AC: 7F       RET                      (1090)     ret
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
07AD: 55 17 08 MOV   [prozess+9],0x8    (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
07B0: 7A 17    DEC   [prozess+9]        (1098)     dec   [I2Cm_bit_count]
07B2: 6B 15    RLC   [prozess+7]        (1099)     rlc   [I2Cm_bData]
07B4: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
07B6: 2E 09 02 OR    [0x9],0x2          (1103)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin
07B9: 51 09    MOV   A,[0x9]            (1104)     mov   A,[Port_1_DriveMode_0_SHADE]
07BB: 60 04    MOV   REG[0x4],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
07BD: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
07BF: 90 A1    CALL  0x0862             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
07C1: 26 09 FD AND   [0x9],0xFD         (1110)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
07C4: 51 09    MOV   A,[0x9]            (1111)     mov   A,[Port_1_DriveMode_0_SHADE]
07C6: 60 04    MOV   REG[0x4],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
07C8: 70 EF    AND   F,0xEF             
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
07CA: 49 04 02 TST   REG[0x4],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
07CD: AF FC    JZ    0x07CA             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
07CF: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
07D1: 90 8F    CALL  0x0862             (1123)     call  I2Cm_delay
                                        (1124) 
07D3: 26 15 FE AND   [prozess+7],0xFE   (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
07D6: 49 04 01 TST   REG[0x4],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
07D9: A0 04    JZ    0x07DE             (1127)     jz    readnobit
07DB: 2E 15 01 OR    [prozess+7],0x1    (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
07DE: 3C 17 00 CMP   [prozess+9],0x0    (1130)     cmp   [I2Cm_bit_count],0
07E1: BF CE    JNZ   0x07B0             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
07E3: 90 01    CALL  0x07E6             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
07E5: 7F       RET                      (1135)     ret
07E6: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
07E8: 2E 09 02 OR    [0x9],0x2          (1171)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin
07EB: 51 09    MOV   A,[0x9]            (1172)     mov   A,[Port_1_DriveMode_0_SHADE]
07ED: 60 04    MOV   REG[0x4],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
07EF: 70 EF    AND   F,0xEF             
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
07F1: 47 14 10 TST   [prozess+6],0x10   (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
07F4: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
07F6: A0 0A    JZ    0x0801             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
07F8: 2E 09 01 OR    [0x9],0x1          (1185)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SDA_pin
07FB: 51 09    MOV   A,[0x9]            (1186)     mov   A,[Port_1_DriveMode_0_SHADE]
07FD: 60 04    MOV   REG[0x4],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
07FF: 80 08    JMP   0x0808             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0801: 26 09 FE AND   [0x9],0xFE         (1191)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin
0804: 51 09    MOV   A,[0x9]            (1192)     mov   A,[Port_1_DriveMode_0_SHADE]
0806: 60 04    MOV   REG[0x4],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0808: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
080A: 90 56    CALL  0x0862             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
080C: 26 09 FD AND   [0x9],0xFD         (1199)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
080F: 51 09    MOV   A,[0x9]            (1200)     mov   A,[Port_1_DriveMode_0_SHADE]
0811: 60 04    MOV   REG[0x4],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
0813: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0815: 49 04 02 TST   REG[0x4],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0818: AF FC    JZ    0x0815             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
081A: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
081C: 90 44    CALL  0x0862             (1210)     call  I2Cm_delay
081E: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0820: 2E 09 02 OR    [0x9],0x2          (1213)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin
0823: 51 09    MOV   A,[0x9]            (1214)     mov   A,[Port_1_DriveMode_0_SHADE]
0825: 60 04    MOV   REG[0x4],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0827: 26 09 FE AND   [0x9],0xFE         (1218)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
082A: 51 09    MOV   A,[0x9]            (1219)     mov   A,[Port_1_DriveMode_0_SHADE]
082C: 60 04    MOV   REG[0x4],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
082E: 70 EF    AND   F,0xEF             
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0830: 51 15    MOV   A,[prozess+7]      (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0832: 7F       RET                      (1226)     ret
0833: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0835: 2E 09 03 OR    [0x9],0x3          (1260)     or    [Port_1_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0838: 51 09    MOV   A,[0x9]            (1261)     mov   A,[Port_1_DriveMode_0_SHADE]
083A: 60 04    MOV   REG[0x4],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
083C: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
083E: 90 22    CALL  0x0862             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0840: 26 09 FD AND   [0x9],0xFD         (1267)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SCL_pin
0843: 51 09    MOV   A,[0x9]            (1268)     mov   A,[Port_1_DriveMode_0_SHADE]
0845: 60 04    MOV   REG[0x4],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
0847: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0849: 49 04 02 TST   REG[0x4],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
084C: AF FC    JZ    0x0849             (1275)     jz    clockstretch6
084E: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0850: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0852: 90 0E    CALL  0x0862             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0854: 26 09 FE AND   [0x9],0xFE         (1282)     and   [Port_1_DriveMode_0_SHADE],~I2Cm_SDA_pin
0857: 51 09    MOV   A,[0x9]            (1283)     mov   A,[Port_1_DriveMode_0_SHADE]
0859: 60 04    MOV   REG[0x4],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
085B: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
085D: 90 03    CALL  0x0862             (1287)     call  I2Cm_delay
085F: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0861: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0862: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0863: BF FE    JNZ   0x0862             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0865: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: C:\Users\Lesky\Desktop\UNITTE~2\SEEGAN~1\SEEGAN~1\main.c
(0001) /********************************************************
(0002) * C main-Funktion										*
(0003) * Programm: Seegangskompensation bei Krahnanlagen		*
(0004) * Controler: CY8C27446-24PXI							*
(0005) * 														*
(0006) * I/O-Konfiguration:									*
(0007) * LCD 			-> Port 2								*
(0008) * SDA			-> 1.0									*
(0009) * SCL 			-> 1.1			 						*
(0010) * IN1		 	-> 1.3									*
(0011) * IN2			-> 1.5									*
(0012) * PWM 1			-> 1.4									*
(0013) * Beschleunigung-> 0.7									*
(0014) * Entfernung 	-> 0.4									*
(0015) * Sollwert		-> 0.5									*
(0016) * 														*
(0017) * Zusätzlich definierte Prüfixe zur Variablenbenennung	*
(0018) * Mittels Ungaricher Notation nach Charles Simonyi:		*
(0019) * pd	-> Prozessbezogene Daten						*
(0020) * ko	-> Konstanten									*
(0021) * hi	-> Interne Hilfsgrößen							*
(0022) * in	-> Datentyp Integer								*
(0023) ********************************************************/
(0024) 
(0025) // Präprozessor:Für Unittesting:
(0026) // #defein Test nicht auskomentieren:
(0027) // #define UTEST
(0028) 
(0029) #include <m8c.h>        
(0030) #include "PSoCAPI.h"    
(0031) #include <stdlib.h>
(0032) 
(0033) // globale Structur zur Übergabe der Prozessdaten:
(0034) struct 
(0035)    {	  						
(0036) 	char pdchBechleunigung;
(0037) 	char pdchEntfernung;			
(0038) 	char pdchSollwert;
(0039) 	char pdchDrehzahl; 
(0040) 	char pdchRichtung;
(0041) 	char hichBeschleunigungssumme;
(0042) 	} prozess;
(0043) 
(0044) // Funktionsprototypen:
(0045) void Initalisierung(void);
(0046) void LCDansteuern(char);
(0047) void Ausgangansteuern(char, char);
(0048) void Ausgangberechnen(void);
(0049) void Dateneinlesen(void);
(0050) 
(0051) // mainfunktion
(0052) // Präprozessor: kompiliere wenn kein test
(0053) #ifndef UTEST
(0054) 	void main(void )
(0055) 		{
(0056) 			Initalisierung();
__UserModules_end|_main|__text_start|_main:
    0866: 90 4F    CALL  _Initalisierung
(0057) 			Dateneinlesen();
    0868: 90 E3    CALL  _Dateneinlesen
(0058) 			Ausgangberechnen();
    086A: 90 9A    CALL  _Ausgangberechnen
(0059) 			Ausgangansteuern(prozess.pdchDrehzahl, prozess.pdchRichtung);
    086C: 51 12    MOV   A,[prozess+4]
    086E: 08       PUSH  A
    086F: 51 11    MOV   A,[prozess+3]
    0871: 08       PUSH  A
    0872: 90 09    CALL  _Ausgangansteuern
(0060) 			LCDansteuern(prozess.pdchEntfernung);
    0874: 51 0F    MOV   A,[prozess+1]
    0876: 08       PUSH  A
    0877: 90 52    CALL  _LCDansteuern
    0879: 38 FD    ADD   SP,0xFD
    087B: 8F FF    JMP   0x087B
(0061) 		}
(0062) #else
(0063) 	// Funktion zum Unittesting
(0064) 	void main(void)
(0065) 		{
(0066) 		Initalisierung();
(0067) 		
(0068) 		// Unittest des LCD
(0069) 		LCDansteuern(99);
(0070) 		LCD_1_Position(1,0);    
(0071)     	LCD_1_PrCString("OK");
(0072) 		}
(0073) #endif 
(0074) 
(0075) void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
(0076) 	{
_Ausgangansteuern:
  hichRichtung         --> X-5
  hichAusgangswert     --> X-4
    087D: 10       PUSH  X
    087E: 4F       MOV   X,SP
(0077) 		// Drehrichtung Auswählen
(0078) 		
(0079) 			
(0080) 			// Linkslauf
(0081) 			if (hichRichtung == 1)
    087F: 3D FB 01 CMP   [X-5],0x1
    0882: B0 0F    JNZ   0x0892
(0082) 			{
(0083) 				// IN1 und IN2 Ansteuern
(0084) 				IN1_Switch(0);
    0884: 10       PUSH  X
    0885: 50 00    MOV   A,0x0
    0887: 7C 04 F9 LCALL _IN1_Switch
(0085) 				IN2_Switch(1);
    088A: 50 01    MOV   A,0x1
    088C: 7C 04 D0 LCALL _IN2_Switch
    088F: 20       POP   X
(0086) 				
(0087) 			
(0088) 			}
    0890: 80 1D    JMP   0x08AE
(0089) 			// Rechtslauf
(0090) 			else if (hichRichtung == 2)
    0892: 3D FB 02 CMP   [X-5],0x2
    0895: B0 0F    JNZ   0x08A5
(0091) 			{
(0092) 				
(0093) 				// IN1 und IN2 Ansteuern
(0094) 				IN1_Switch(1);
    0897: 10       PUSH  X
    0898: 50 01    MOV   A,0x1
    089A: 7C 04 F9 LCALL _IN1_Switch
(0095) 				IN2_Switch(0);
    089D: 50 00    MOV   A,0x0
    089F: 7C 04 D0 LCALL _IN2_Switch
    08A2: 20       POP   X
(0096) 				
(0097) 			
(0098) 			}
    08A3: 80 0A    JMP   0x08AE
(0099) 			// Ungültiger Wert
(0100) 			else
(0101) 			{
(0102) 				// Pulsweite auf 0 setzen
(0103) 				PWM8_1_WritePulseWidth(0);
    08A5: 10       PUSH  X
    08A6: 50 00    MOV   A,0x0
    08A8: 7C 02 FC LCALL _PWM8_1_WritePulseWidth
    08AB: 20       POP   X
(0104) 				// Funktion verlassen
(0105) 				return ;
    08AC: 80 08    JMP   0x08B5
(0106) 			}	
(0107) 			
(0108) 		// Pulsweite auf hichAusgangswert setzen 		
(0109) 		PWM8_1_WritePulseWidth(hichAusgangswert);
    08AE: 10       PUSH  X
    08AF: 52 FC    MOV   A,[X-4]
    08B1: 7C 02 FC LCALL _PWM8_1_WritePulseWidth
    08B4: 20       POP   X
    08B5: 20       POP   X
    08B6: 7F       RET   
(0110) 	}
(0111) 
(0112) 		
(0113) void Initalisierung(void)
(0114) 	{
(0115) 	//globale Interrupts Freigeben
(0116) 	M8C_EnableGInt;
_Initalisierung:
    08B7: 71 01    OR    F,0x1
(0117) 		
(0118) 	// I2C Starten
(0119) 	I2Cm_Start();
    08B9: 10       PUSH  X
    08BA: 7C 05 1C LCALL _I2Cm_Start
(0120) //  	// A/D Wandler konfigurieren
(0121) //	I2Cm_fSendStart(0x48,I2Cm_WRITE);       
(0122) //    I2Cm_fWrite(0x00);
(0123) //	I2Cm_SendStop();
(0124) 	// Initialisieren des LCD-Displays
(0125) 	LCD_1_Start();                 					
    08BD: 7C 04 2C LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init
(0126)    	
(0127) 	// Initialisieren des PWM-Moduls
(0128) 	// PWM8_1_WritePeriod(kochPeriodendauer);        	                    
(0129)     PWM8_1_Start();
    08C0: 7C 02 F1 LCALL _PWM8_1_Start
(0130) 	
(0131) 	//Initialisieren der Digitalen Ausgänge
(0132) 	IN1_Start();	
    08C3: 7C 04 F7 LCALL _IN1_Off|_IN1_Stop|_IN1_Start|IN1_Off|IN1_Stop|IN1_Start
(0133) 	IN2_Start();
    08C6: 7C 04 CE LCALL _IN2_Stop|IN2_Off|_IN2_Start|IN2_Start|_IN2_Off
    08C9: 20       POP   X
    08CA: 7F       RET   
(0134) 	}
(0135) 	
(0136) void LCDansteuern(char hichdata)
(0137)     {                
_LCDansteuern:
  rgch                 --> X+0
  hichdata             --> X-4
    08CB: 10       PUSH  X
    08CC: 4F       MOV   X,SP
    08CD: 38 05    ADD   SP,0x5
(0138)     char rgch[5];
(0139)     // Text auf LCD ausgeben
(0140)     LCD_1_Position(0,5);    
    08CF: 10       PUSH  X
    08D0: 57 05    MOV   X,0x5
    08D2: 50 00    MOV   A,0x0
    08D4: 7C 04 9C LCALL _LCD_1_Position
(0141)     LCD_1_PrCString("Wert:");
    08D7: 50 01    MOV   A,0x1
    08D9: 08       PUSH  A
    08DA: 50 50    MOV   A,0x50
    08DC: 5C       MOV   X,A
    08DD: 18       POP   A
    08DE: 7C 03 2B LCALL _LCD_1_PrCString
    08E1: 20       POP   X
(0142)     
(0143)     // Zahl Auf LCD ausgeben
(0144)     itoa(rgch,hichdata,10);
    08E2: 50 00    MOV   A,0x0
    08E4: 08       PUSH  A
    08E5: 50 0A    MOV   A,0xA
    08E7: 08       PUSH  A
    08E8: 52 FC    MOV   A,[X-4]
    08EA: 53 05    MOV   [__r1],A
    08EC: 50 00    MOV   A,0x0
    08EE: 08       PUSH  A
    08EF: 51 05    MOV   A,[__r1]
    08F1: 08       PUSH  A
    08F2: 50 00    MOV   A,0x0
    08F4: 08       PUSH  A
    08F5: 10       PUSH  X
    08F6: 7C 09 B2 LCALL _itoa
    08F9: 38 FA    ADD   SP,0xFA
(0145)     LCD_1_PrString(rgch);                
    08FB: 10       PUSH  X
    08FC: 51 06    MOV   A,[__r0]
    08FE: 7C 03 67 LCALL _LCD_1_PrString
    0901: 20       POP   X
    0902: 38 FB    ADD   SP,0xFB
    0904: 20       POP   X
    0905: 7F       RET   
(0146)     }
(0147) 	
(0148) void Ausgangberechnen(void)
(0149)     {   
_Ausgangberechnen:
  kochKRZ              --> X+2
  kochKR               --> X+1
  hichAusgangswert     --> X+0
    0906: 10       PUSH  X
    0907: 4F       MOV   X,SP
    0908: 38 03    ADD   SP,0x3
(0150) 	// Variablen
(0151) 	char hichAusgangswert;
(0152) 		
(0153) 	// Konstanten					
(0154) 	char kochKR;
(0155) 	char kochKRZ;
(0156) 		// Parameter Berechnen
(0157) 			
(0158) 			prozess.hichBeschleunigungssumme = prozess.hichBeschleunigungssumme + prozess.pdchBechleunigung;
    090A: 51 0E    MOV   A,[prozess]
    090C: 04 13    ADD   [prozess+5],A
(0159) 			
(0160) 			hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKR
    090E: 51 13    MOV   A,[prozess+5]
    0910: 60 E8    MOV   REG[0xE8],A
    0912: 52 02    MOV   A,[X+2]
    0914: 60 E9    MOV   REG[0xE9],A
    0916: 40       NOP   
    0917: 5D EB    MOV   A,REG[0xEB]
    0919: 53 06    MOV   [__r0],A
    091B: 51 10    MOV   A,[prozess+2]
    091D: 12 0E    SUB   A,[prozess]
    091F: 53 04    MOV   [__r2],A
    0921: 52 01    MOV   A,[X+1]
    0923: 60 E8    MOV   REG[0xE8],A
    0925: 51 04    MOV   A,[__r2]
    0927: 60 E9    MOV   REG[0xE9],A
    0929: 40       NOP   
    092A: 5D EB    MOV   A,REG[0xEB]
    092C: 12 06    SUB   A,[__r0]
    092E: 54 00    MOV   [X+0],A
(0161) 								- kochKRZ * prozess.hichBeschleunigungssumme;
(0162) 		
(0163) 			if (hichAusgangswert <= 0)
    0930: 50 00    MOV   A,0x0
    0932: 3B 00    CMP   A,[X+0]
    0934: C0 0A    JC    0x093F
(0164) 			{
(0165) 				prozess.pdchDrehzahl = hichAusgangswert;
    0936: 52 00    MOV   A,[X+0]
    0938: 53 11    MOV   [prozess+3],A
(0166) 				prozess.pdchRichtung = 1;
    093A: 55 12 01 MOV   [prozess+4],0x1
(0167) 			}
    093D: 80 0B    JMP   0x0949
(0168) 			else 
(0169) 			{
(0170) 				prozess.pdchDrehzahl = -hichAusgangswert;
    093F: 52 00    MOV   A,[X+0]
    0941: 73       CPL   A
    0942: 11 FF    SUB   A,0xFF
    0944: 53 11    MOV   [prozess+3],A
(0171) 				prozess.pdchRichtung = 2;
    0946: 55 12 02 MOV   [prozess+4],0x2
(0172) 			};
    0949: 38 FD    ADD   SP,0xFD
    094B: 20       POP   X
    094C: 7F       RET   
(0173) 			
(0174)     }
(0175) 	
(0176) void Dateneinlesen(void)
(0177) 	{	
(0178) 		// I2C Adresse: 1001 000 -> 0x48
(0179) 		// Einleseforgang beginnen
(0180) 		I2Cm_fSendRepeatStart(0x48,I2Cm_READ);
_Dateneinlesen:
    094D: 10       PUSH  X
    094E: 57 01    MOV   X,0x1
    0950: 50 48    MOV   A,0x48
    0952: 7C 06 BD LCALL _I2Cm_fSendRepeatStart
(0181) 		
(0182) 		// Daten Einlesen und ACK an slafe senden
(0183) 		I2Cm_bRead(I2Cm_ACKslave);
    0955: 50 01    MOV   A,0x1
    0957: 7C 07 A0 LCALL _I2Cm_bRead
(0184) 		prozess.pdchBechleunigung = I2Cm_bRead(I2Cm_ACKslave);
    095A: 50 01    MOV   A,0x1
    095C: 7C 07 A0 LCALL _I2Cm_bRead
    095F: 20       POP   X
    0960: 53 0E    MOV   [prozess],A
(0185) 		prozess.pdchEntfernung	= I2Cm_bRead(I2Cm_ACKslave);
    0962: 10       PUSH  X
    0963: 50 01    MOV   A,0x1
    0965: 7C 07 A0 LCALL _I2Cm_bRead
    0968: 20       POP   X
    0969: 53 0F    MOV   [prozess+1],A
(0186) 		
(0187) 		// lezte Daten ohne ACK einlesen
(0188) 		prozess.pdchSollwert = I2Cm_bRead(I2Cm_NAKslave);
    096B: 10       PUSH  X
    096C: 50 00    MOV   A,0x0
    096E: 7C 07 A0 LCALL _I2Cm_bRead
    0971: 20       POP   X
    0972: 53 10    MOV   [prozess+2],A
(0189) 		
(0190) 		//Stop Condition
(0191)        	I2Cm_SendStop();
    0974: 10       PUSH  X
(0192) 
(0193) 	}FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059) 
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
097A: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_itoa:
    09B2: 10       PUSH  X
    09B3: 4F       MOV   X,SP
    09B4: 38 09    ADD   SP,0x9
    09B6: 52 FA    MOV   A,[X-6]
    09B8: 54 03    MOV   [X+3],A
    09BA: 52 F9    MOV   A,[X-7]
    09BC: 54 02    MOV   [X+2],A
    09BE: 3D F9 00 CMP   [X-7],0x0
    09C1: B0 22    JNZ   0x09E4
    09C3: 3D FA 00 CMP   [X-6],0x0
    09C6: B0 1D    JNZ   0x09E4
    09C8: 52 FC    MOV   A,[X-4]
    09CA: 53 05    MOV   [__r1],A
    09CC: 50 30    MOV   A,0x30
    09CE: 3F 05    MVI   [__r1],A
    09D0: 52 FC    MOV   A,[X-4]
    09D2: 01 01    ADD   A,0x1
    09D4: 53 05    MOV   [__r1],A
    09D6: 50 00    MOV   A,0x0
    09D8: 3F 05    MVI   [__r1],A
    09DA: 52 FC    MOV   A,[X-4]
    09DC: 53 05    MOV   [__r1],A
    09DE: 52 FB    MOV   A,[X-5]
    09E0: 53 06    MOV   [__r0],A
    09E2: 81 48    JMP   0x0B2B
    09E4: 52 FA    MOV   A,[X-6]
    09E6: 11 00    SUB   A,0x0
    09E8: 52 F9    MOV   A,[X-7]
    09EA: 31 80    XOR   A,0x80
    09EC: 19 80    SBB   A,0x80
    09EE: D0 26    JNC   0x0A15
    09F0: 3D F7 00 CMP   [X-9],0x0
    09F3: B0 21    JNZ   0x0A15
    09F5: 3D F8 0A CMP   [X-8],0xA
    09F8: B0 1C    JNZ   0x0A15
    09FA: 56 06 01 MOV   [X+6],0x1
    09FD: 52 03    MOV   A,[X+3]
    09FF: 73       CPL   A
    0A00: 53 05    MOV   [__r1],A
    0A02: 52 02    MOV   A,[X+2]
    0A04: 73       CPL   A
    0A05: 53 06    MOV   [__r0],A
    0A07: 51 05    MOV   A,[__r1]
    0A09: 01 01    ADD   A,0x1
    0A0B: 54 03    MOV   [X+3],A
    0A0D: 51 06    MOV   A,[__r0]
    0A0F: 09 00    ADC   A,0x0
    0A11: 54 02    MOV   [X+2],A
    0A13: 80 04    JMP   0x0A18
    0A15: 56 06 00 MOV   [X+6],0x0
    0A18: 52 FC    MOV   A,[X-4]
    0A1A: 54 01    MOV   [X+1],A
    0A1C: 52 F7    MOV   A,[X-9]
    0A1E: 08       PUSH  A
    0A1F: 52 F8    MOV   A,[X-8]
    0A21: 08       PUSH  A
    0A22: 52 02    MOV   A,[X+2]
    0A24: 08       PUSH  A
    0A25: 52 03    MOV   A,[X+3]
    0A27: 08       PUSH  A
    0A28: 7C 09 7B LCALL 0x097B
    0A2B: 38 FE    ADD   SP,0xFE
    0A2D: 18       POP   A
    0A2E: 53 05    MOV   [__r1],A
    0A30: 18       POP   A
    0A31: 53 06    MOV   [__r0],A
    0A33: 51 05    MOV   A,[__r1]
    0A35: 54 08    MOV   [X+8],A
    0A37: 51 06    MOV   A,[__r0]
    0A39: 54 07    MOV   [X+7],A
    0A3B: 50 09    MOV   A,0x9
    0A3D: 13 08    SUB   A,[X+8]
    0A3F: 52 07    MOV   A,[X+7]
    0A41: 31 80    XOR   A,0x80
    0A43: 53 02    MOV   [__rX],A
    0A45: 50 80    MOV   A,0x80
    0A47: 1A 02    SBB   A,[__rX]
    0A49: C0 1D    JC    0x0A67
    0A4B: 52 01    MOV   A,[X+1]
    0A4D: 53 05    MOV   [__r1],A
    0A4F: 52 00    MOV   A,[X+0]
    0A51: 53 06    MOV   [__r0],A
    0A53: 51 05    MOV   A,[__r1]
    0A55: 01 01    ADD   A,0x1
    0A57: 54 01    MOV   [X+1],A
    0A59: 51 06    MOV   A,[__r0]
    0A5B: 09 00    ADC   A,0x0
    0A5D: 54 00    MOV   [X+0],A
    0A5F: 52 08    MOV   A,[X+8]
    0A61: 01 30    ADD   A,0x30
    0A63: 3F 05    MVI   [__r1],A
    0A65: 80 1B    JMP   0x0A81
    0A67: 52 01    MOV   A,[X+1]
    0A69: 53 05    MOV   [__r1],A
    0A6B: 52 00    MOV   A,[X+0]
    0A6D: 53 06    MOV   [__r0],A
    0A6F: 51 05    MOV   A,[__r1]
    0A71: 01 01    ADD   A,0x1
    0A73: 54 01    MOV   [X+1],A
    0A75: 51 06    MOV   A,[__r0]
    0A77: 09 00    ADC   A,0x0
    0A79: 54 00    MOV   [X+0],A
    0A7B: 52 08    MOV   A,[X+8]
    0A7D: 01 57    ADD   A,0x57
    0A7F: 3F 05    MVI   [__r1],A
    0A81: 52 F7    MOV   A,[X-9]
    0A83: 08       PUSH  A
    0A84: 52 F8    MOV   A,[X-8]
    0A86: 08       PUSH  A
    0A87: 52 02    MOV   A,[X+2]
    0A89: 08       PUSH  A
    0A8A: 52 03    MOV   A,[X+3]
    0A8C: 08       PUSH  A
    0A8D: 7C 09 7B LCALL 0x097B
    0A90: 18       POP   A
    0A91: 54 03    MOV   [X+3],A
    0A93: 18       POP   A
    0A94: 54 02    MOV   [X+2],A
    0A96: 38 FE    ADD   SP,0xFE
    0A98: 3D 02 00 CMP   [X+2],0x0
    0A9B: BF 80    JNZ   0x0A1C
    0A9D: 3D 03 00 CMP   [X+3],0x0
    0AA0: BF 7B    JNZ   0x0A1C
    0AA2: 3D 06 00 CMP   [X+6],0x0
    0AA5: A0 19    JZ    0x0ABF
    0AA7: 52 01    MOV   A,[X+1]
    0AA9: 53 05    MOV   [__r1],A
    0AAB: 52 00    MOV   A,[X+0]
    0AAD: 53 06    MOV   [__r0],A
    0AAF: 51 05    MOV   A,[__r1]
    0AB1: 01 01    ADD   A,0x1
    0AB3: 54 01    MOV   [X+1],A
    0AB5: 51 06    MOV   A,[__r0]
    0AB7: 09 00    ADC   A,0x0
    0AB9: 54 00    MOV   [X+0],A
    0ABB: 50 2D    MOV   A,0x2D
    0ABD: 3F 05    MVI   [__r1],A
    0ABF: 52 01    MOV   A,[X+1]
    0AC1: 53 05    MOV   [__r1],A
    0AC3: 52 00    MOV   A,[X+0]
    0AC5: 53 06    MOV   [__r0],A
    0AC7: 51 05    MOV   A,[__r1]
    0AC9: 01 FF    ADD   A,0xFF
    0ACB: 54 01    MOV   [X+1],A
    0ACD: 51 06    MOV   A,[__r0]
    0ACF: 09 FF    ADC   A,0xFF
    0AD1: 54 00    MOV   [X+0],A
    0AD3: 50 00    MOV   A,0x0
    0AD5: 3F 05    MVI   [__r1],A
    0AD7: 52 FC    MOV   A,[X-4]
    0AD9: 54 05    MOV   [X+5],A
    0ADB: 80 3D    JMP   0x0B19
    0ADD: 52 05    MOV   A,[X+5]
    0ADF: 53 05    MOV   [__r1],A
    0AE1: 3E 05    MVI   A,[__r1]
    0AE3: 54 06    MOV   [X+6],A
    0AE5: 52 05    MOV   A,[X+5]
    0AE7: 53 05    MOV   [__r1],A
    0AE9: 52 04    MOV   A,[X+4]
    0AEB: 53 06    MOV   [__r0],A
    0AED: 51 05    MOV   A,[__r1]
    0AEF: 01 01    ADD   A,0x1
    0AF1: 54 05    MOV   [X+5],A
    0AF3: 51 06    MOV   A,[__r0]
    0AF5: 09 00    ADC   A,0x0
    0AF7: 54 04    MOV   [X+4],A
    0AF9: 52 01    MOV   A,[X+1]
    0AFB: 53 03    MOV   [__r3],A
    0AFD: 3E 03    MVI   A,[__r3]
    0AFF: 3F 05    MVI   [__r1],A
    0B01: 52 01    MOV   A,[X+1]
    0B03: 53 05    MOV   [__r1],A
    0B05: 52 00    MOV   A,[X+0]
    0B07: 53 06    MOV   [__r0],A
    0B09: 51 05    MOV   A,[__r1]
    0B0B: 01 FF    ADD   A,0xFF
    0B0D: 54 01    MOV   [X+1],A
    0B0F: 51 06    MOV   A,[__r0]
    0B11: 09 FF    ADC   A,0xFF
    0B13: 54 00    MOV   [X+0],A
    0B15: 52 06    MOV   A,[X+6]
    0B17: 3F 05    MVI   [__r1],A
    0B19: 52 01    MOV   A,[X+1]
    0B1B: 53 06    MOV   [__r0],A
    0B1D: 52 05    MOV   A,[X+5]
    0B1F: 3A 06    CMP   A,[__r0]
    0B21: CF BB    JC    0x0ADD
    0B23: 52 FC    MOV   A,[X-4]
    0B25: 53 05    MOV   [__r1],A
    0B27: 52 FB    MOV   A,[X-5]
    0B29: 53 06    MOV   [__r0],A
    0B2B: 38 F7    ADD   SP,0xF7
    0B2D: 20       POP   X
    0B2E: 7F       RET   
