FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 C9 LJMP  _PWM8_1_ISR        (0149)     ljmp	_PWM8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 5E LJMP  _DUALADC8_CNT1_ISR (0157)     ljmp	_DUALADC8_CNT1_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 08 64 LJMP  _DUALADC8_PWM16_ISR(0165)     ljmp	_DUALADC8_PWM16_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 08 61 LJMP  _DUALADC8_CNT2_ISR (0169)     ljmp	_DUALADC8_CNT2_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 09 92 LJMP  _ADCINC_ADConversion_ISR(0173)     ljmp	_ADCINC_ADConversion_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 3D    MOV   A,0x3D             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [prozess+220],0x0  (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [prozess+221],0x0  (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 04 5F LCALL 0x045F             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 08 1C MOV   [__r0],0x1C        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 08 3B CMP   [__r0],0x3B        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 08    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 03    MOV   A,0x3              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 96    MOV   X,0x96             (0368)     mov  X,<__idata_start
00AC: 55 08 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 08 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 08    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 0A 74 LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
039A: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_seegangskompensation_Bank1
                                        (0019) export LoadConfigTBL_seegangskompensation_Bank0
                                        (0020) export LoadConfigTBL_seegangskompensation_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_seegangskompensation_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DCB12)
                                        (0030) 	db		3bh, 00h		;ADCINC_PWMcr0(DCB12CR0)
                                        (0031) 	db		39h, 00h		;ADCINC_PWMdr1(DCB12DR1)
                                        (0032) 	db		3ah, 01h		;ADCINC_PWMdr2(DCB12DR2)
                                        (0033) ;  Instance name DUALADC8, User Module DUALADC8
                                        (0034) ;       Instance name DUALADC8, Block Name ADC1(ASC10)
                                        (0035) 	db		80h, 90h		;DUALADC8_bfADC1cr0(ASC10CR0)
                                        (0036) 	db		81h, 00h		;DUALADC8_bfADC1cr1(ASC10CR1)
                                        (0037) 	db		82h, 60h		;DUALADC8_bfADC1cr2(ASC10CR2)
                                        (0038) 	db		83h, f0h		;DUALADC8_bfADC1cr3(ASC10CR3)
                                        (0039) ;       Instance name DUALADC8, Block Name ADC2(ASD11)
                                        (0040) 	db		84h, 90h		;DUALADC8_bfADC2cr0(ASD11CR0)
                                        (0041) 	db		85h, 00h		;DUALADC8_bfADC2cr1(ASD11CR1)
                                        (0042) 	db		86h, 60h		;DUALADC8_bfADC2cr2(ASD11CR2)
                                        (0043) 	db		87h, f0h		;DUALADC8_bfADC2cr3(ASD11CR3)
                                        (0044) ;       Instance name DUALADC8, Block Name CNT1(DCB02)
                                        (0045) 	db		2bh, 00h		;DUALADC8_bCounter1_CR0(DCB02CR0)
                                        (0046) 	db		29h, 00h		;DUALADC8_bPeriod1(DCB02DR1)
                                        (0047) 	db		2ah, 00h		;DUALADC8_bCompare1(DCB02DR2)
                                        (0048) ;       Instance name DUALADC8, Block Name CNT2(DBB11)
                                        (0049) 	db		37h, 00h		;DUALADC8_bCounter2_CR0(DBB11CR0)
                                        (0050) 	db		35h, 00h		;DUALADC8_bPeriod2(DBB11DR1)
                                        (0051) 	db		36h, 00h		;DUALADC8_bCompare2(DBB11DR2)
                                        (0052) ;       Instance name DUALADC8, Block Name PWM16_LSB(DCB03)
                                        (0053) 	db		2fh, 00h		;DUALADC8_fPWM_LSB_CR0(DCB03CR0)
                                        (0054) 	db		2dh, 00h		;DUALADC8_bPWM_Period_LSB(DCB03DR1)
                                        (0055) 	db		2eh, 00h		;DUALADC8_bPWM_IntTime_LSB(DCB03DR2)
                                        (0056) ;       Instance name DUALADC8, Block Name PWM16_MSB(DBB10)
                                        (0057) 	db		33h, 00h		;DUALADC8_fPWM_MSB_CR0(DBB10CR0)
                                        (0058) 	db		31h, 00h		;DUALADC8_bPWM_Period_MSB(DBB10DR1)
                                        (0059) 	db		32h, 00h		;DUALADC8_bPWM_IntTime_MSB(DBB10DR2)
                                        (0060) ;  Instance name IN1, User Module LED
                                        (0061) ;  Instance name IN2, User Module LED
                                        (0062) ;  Instance name LCD_1, User Module LCD
                                        (0063) ;  Instance name PGA_1, User Module PGA
                                        (0064) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0065) 	db		71h, 0ch		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0066) 	db		72h, 21h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0067) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0068) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0069) ;  Instance name PGA_2, User Module PGA
                                        (0070) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0071) 	db		75h, 0ch		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0072) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0073) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0074) 	db		74h, 00h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0075) ;  Instance name PGA_3, User Module PGA
                                        (0076) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0077) 	db		79h, 0ch		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0078) 	db		7ah, 21h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0079) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0080) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0081) ;  Instance name PWM8_1, User Module PWM8
                                        (0082) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0083) 	db		23h, 00h		;PWM8_1_CONTROL_REG(DBB00CR0)
                                        (0084) 	db		21h, 00h		;PWM8_1_PERIOD_REG(DBB00DR1)
                                        (0085) 	db		22h, 00h		;PWM8_1_COMPARE_REG(DBB00DR2)
                                        (0086) ;  Instance name SELBSTTEST, User Module LED
                                        (0087) ;  Global Register values Bank 0
                                        (0088) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0089) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0090) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0091) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0092) 	db		e6h, 3dh		; DecimatorControl_0 register (DEC_CR0)
                                        (0093) 	db		e7h, 10h		; DecimatorControl_1 register (DEC_CR1)
                                        (0094) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0095) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0096) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0097) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0098) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0099) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0100) 	db		b5h, 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0101) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0102) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0103) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0104) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0105) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0106) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0107) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0108) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0109) 	db		ffh
                                        (0110) LoadConfigTBL_seegangskompensation_Bank1:
                                        (0111) ;  Instance name ADCINC, User Module ADCINC
                                        (0112) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0113) ;       Instance name ADCINC, Block Name PWM(DCB12)
                                        (0114) 	db		38h, 31h		;ADCINC_PWMfn(DCB12FN)
                                        (0115) 	db		39h, 10h		;ADCINC_PWMsl(DCB12IN)
                                        (0116) 	db		3ah, 40h		;ADCINC_PWMos(DCB12OU)
                                        (0117) ;  Instance name DUALADC8, User Module DUALADC8
                                        (0118) ;       Instance name DUALADC8, Block Name ADC1(ASC10)
                                        (0119) ;       Instance name DUALADC8, Block Name ADC2(ASD11)
                                        (0120) ;       Instance name DUALADC8, Block Name CNT1(DCB02)
                                        (0121) 	db		28h, 21h		;DUALADC8_fCounter1FN(DCB02FN)
                                        (0122) 	db		29h, 40h		;DUALADC8_fCounter1SL(DCB02IN)
                                        (0123) 	db		2ah, 40h		;DUALADC8_fCounter1OS(DCB02OU)
                                        (0124) ;       Instance name DUALADC8, Block Name CNT2(DBB11)
                                        (0125) 	db		34h, 21h		;DUALADC8_fCounter2FN(DBB11FN)
                                        (0126) 	db		35h, 50h		;DUALADC8_fCounter2SL(DBB11IN)
                                        (0127) 	db		36h, 40h		;DUALADC8_fCounter2OS(DBB11OU)
                                        (0128) ;       Instance name DUALADC8, Block Name PWM16_LSB(DCB03)
                                        (0129) 	db		2ch, 01h		;DUALADC8_bfPWM_LSB_FN(DCB03FN)
                                        (0130) 	db		2dh, 10h		;DUALADC8_(DCB03IN)
                                        (0131) 	db		2eh, 40h		;DUALADC8_(DCB03OU)
                                        (0132) ;       Instance name DUALADC8, Block Name PWM16_MSB(DBB10)
                                        (0133) 	db		30h, 21h		;DUALADC8_bfPWM_MSB_FN(DBB10FN)
                                        (0134) 	db		31h, 30h		;DUALADC8_(DBB10IN)
                                        (0135) 	db		32h, 40h		;DUALADC8_(DBB10OU)
                                        (0136) ;  Instance name IN1, User Module LED
                                        (0137) ;  Instance name IN2, User Module LED
                                        (0138) ;  Instance name LCD_1, User Module LCD
                                        (0139) ;  Instance name PGA_1, User Module PGA
                                        (0140) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0141) ;  Instance name PGA_2, User Module PGA
                                        (0142) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0143) ;  Instance name PGA_3, User Module PGA
                                        (0144) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0145) ;  Instance name PWM8_1, User Module PWM8
                                        (0146) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0147) 	db		20h, 21h		;PWM8_1_FUNC_REG(DBB00FN)
                                        (0148) 	db		21h, 00h		;PWM8_1_INPUT_REG(DBB00IN)
                                        (0149) 	db		22h, 04h		;PWM8_1_OUTPUT_REG(DBB00OU)
                                        (0150) ;  Instance name SELBSTTEST, User Module LED
                                        (0151) ;  Global Register values Bank 1
                                        (0152) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0153) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0154) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0155) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0156) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0157) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0158) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0159) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0160) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0161) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0162) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0163) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0164) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0165) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0166) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0167) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0168) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0169) 	db		ffh
                                        (0170) AREA psoc_config(rom, rel)
                                        (0171) LoadConfigTBL_seegangskompensation_Ordered:
                                        (0172) ;  Ordered Global Register values
                                        (0173) 	M8C_SetBank0
039C: 62 00 00 MOV   REG[0x0],0x0       (0174) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
039F: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
03A1: 62 00 00 MOV   REG[0x0],0x0       (0176) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
03A4: 62 01 FE MOV   REG[0x1],0xFE      (0177) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
03A7: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
03A9: 62 03 FF MOV   REG[0x3],0xFF      (0179) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
03AC: 62 02 00 MOV   REG[0x2],0x0       (0180) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
03AF: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
03B1: 62 02 00 MOV   REG[0x2],0x0       (0182) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03B4: 62 03 00 MOV   REG[0x3],0x0       (0183) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
03B7: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
03B9: 62 01 00 MOV   REG[0x1],0x0       (0185) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
03BC: 62 04 00 MOV   REG[0x4],0x0       (0186) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03BF: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
03C1: 62 04 1E MOV   REG[0x4],0x1E      (0188) 	mov	reg[04h], 1eh		; Port_1_DriveMode_0 register (PRT1DM0)
03C4: 62 05 E1 MOV   REG[0x5],0xE1      (0189) 	mov	reg[05h], e1h		; Port_1_DriveMode_1 register (PRT1DM1)
03C7: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
03C9: 62 07 E1 MOV   REG[0x7],0xE1      (0191) 	mov	reg[07h], e1h		; Port_1_DriveMode_2 register (PRT1DM2)
03CC: 62 06 10 MOV   REG[0x6],0x10      (0192) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
03CF: 71 10    OR    F,0x10             
                                        (0193) 	M8C_SetBank1
03D1: 62 06 00 MOV   REG[0x6],0x0       (0194) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
03D4: 62 07 00 MOV   REG[0x7],0x0       (0195) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
03D7: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
03D9: 62 05 00 MOV   REG[0x5],0x0       (0197) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
03DC: 62 08 00 MOV   REG[0x8],0x0       (0198) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
03DF: 71 10    OR    F,0x10             
                                        (0199) 	M8C_SetBank1
03E1: 62 08 7F MOV   REG[0x8],0x7F      (0200) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
03E4: 62 09 80 MOV   REG[0x9],0x80      (0201) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
03E7: 70 EF    AND   F,0xEF             
                                        (0202) 	M8C_SetBank0
03E9: 62 0B 80 MOV   REG[0xB],0x80      (0203) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
03EC: 62 0A 00 MOV   REG[0xA],0x0       (0204) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
03EF: 71 10    OR    F,0x10             
                                        (0205) 	M8C_SetBank1
03F1: 62 0A 00 MOV   REG[0xA],0x0       (0206) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
03F4: 62 0B 00 MOV   REG[0xB],0x0       (0207) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
03F7: 70 EF    AND   F,0xEF             
                                        (0208) 	M8C_SetBank0
03F9: 62 09 00 MOV   REG[0x9],0x0       (0209) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
03FC: 62 0C 00 MOV   REG[0xC],0x0       (0210) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
03FF: 71 10    OR    F,0x10             
                                        (0211) 	M8C_SetBank1
0401: 62 0C 00 MOV   REG[0xC],0x0       (0212) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0404: 62 0D 00 MOV   REG[0xD],0x0       (0213) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0407: 70 EF    AND   F,0xEF             
                                        (0214) 	M8C_SetBank0
0409: 62 0F 00 MOV   REG[0xF],0x0       (0215) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
040C: 62 0E 00 MOV   REG[0xE],0x0       (0216) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
040F: 71 10    OR    F,0x10             
                                        (0217) 	M8C_SetBank1
0411: 62 0E 00 MOV   REG[0xE],0x0       (0218) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0414: 62 0F 00 MOV   REG[0xF],0x0       (0219) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0417: 70 EF    AND   F,0xEF             
                                        (0220) 	M8C_SetBank0
0419: 62 0D 00 MOV   REG[0xD],0x0       (0221) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
041C: 62 10 00 MOV   REG[0x10],0x0      (0222) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
041F: 71 10    OR    F,0x10             
                                        (0223) 	M8C_SetBank1
0421: 62 10 00 MOV   REG[0x10],0x0      (0224) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0424: 62 11 00 MOV   REG[0x11],0x0      (0225) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0427: 70 EF    AND   F,0xEF             
                                        (0226) 	M8C_SetBank0
0429: 62 13 00 MOV   REG[0x13],0x0      (0227) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
042C: 62 12 00 MOV   REG[0x12],0x0      (0228) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
042F: 71 10    OR    F,0x10             
                                        (0229) 	M8C_SetBank1
0431: 62 12 00 MOV   REG[0x12],0x0      (0230) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0434: 62 13 00 MOV   REG[0x13],0x0      (0231) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0437: 70 EF    AND   F,0xEF             
                                        (0232) 	M8C_SetBank0
0439: 62 11 00 MOV   REG[0x11],0x0      (0233) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
043C: 62 14 00 MOV   REG[0x14],0x0      (0234) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
043F: 71 10    OR    F,0x10             
                                        (0235) 	M8C_SetBank1
0441: 62 14 00 MOV   REG[0x14],0x0      (0236) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0444: 62 15 00 MOV   REG[0x15],0x0      (0237) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0447: 70 EF    AND   F,0xEF             
                                        (0238) 	M8C_SetBank0
0449: 62 17 00 MOV   REG[0x17],0x0      (0239) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
044C: 62 16 00 MOV   REG[0x16],0x0      (0240) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
044F: 71 10    OR    F,0x10             
                                        (0241) 	M8C_SetBank1
0451: 62 16 00 MOV   REG[0x16],0x0      (0242) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0454: 62 17 00 MOV   REG[0x17],0x0      (0243) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0457: 70 EF    AND   F,0xEF             
                                        (0244) 	M8C_SetBank0
0459: 62 15 00 MOV   REG[0x15],0x0      (0245) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
045C: 70 EF    AND   F,0xEF             
                                        (0246) 	M8C_SetBank0
045E: 7F       RET                      (0247) 	ret
                                        (0248) 
                                        (0249) 
                                        (0250) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_seegangskompensation
                                        (0026) export _LoadConfig_seegangskompensation
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
045F: 55 09 00 MOV   [0x9],0x0          (0067) 	mov		[Port_1_Data_SHADE], 0h
0462: 55 0A 00 MOV   [0xA],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
0465: 55 0B 7F MOV   [0xB],0x7F         (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0468: 55 0C 80 MOV   [0xC],0x80         (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
046B: 7C 04 72 LCALL 0x0472             (0072) 	lcall	LoadConfig_seegangskompensation
046E: 7C 03 9A LCALL 0x039A             (0073) 	lcall	LoadConfigTBL_seegangskompensation_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0471: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration seegangskompensation
                                        (0081) ;
                                        (0082) ;    Load configuration registers for seegangskompensation.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_seegangskompensation:
                                        (0099)  LoadConfig_seegangskompensation:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0472: 10       PUSH  X                  (0102) 	push	x
0473: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0475: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0477: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0478: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_seegangskompensation_Bank0
047A: 57 5B    MOV   X,0x5B             (0108)     mov     X, <LoadConfigTBL_seegangskompensation_Bank0
047C: 7C 04 8D LCALL 0x048D             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
047F: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0481: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0482: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_seegangskompensation_Bank1
0484: 57 DA    MOV   X,0xDA             (0115)     mov     X, <LoadConfigTBL_seegangskompensation_Bank1
0486: 7C 04 8D LCALL 0x048D             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0489: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
048B: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
048C: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
048D: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
048F: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0490: 08       PUSH  A                  (0146)     push    A
0491: 4F       MOV   X,SP               (0147)     mov     X, SP
0492: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0495: D0 04    JNC   0x049A             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0497: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
049A: 18       POP   A                  (0152)     pop     A
049B: 20       POP   X                  (0153)     pop     X
049C: 70 EF    AND   F,0xEF             
049E: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
04A1: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
04A2: 08       PUSH  A                  (0159)     push    A
04A3: 28       ROMX                     (0160)     romx                            ; Load register address from table
04A4: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
04A6: A0 1F    JZ    0x04C6             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
04A8: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
04A9: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
04AC: A0 03    JZ    0x04B0             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
04AE: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
04B0: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
04B2: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
04B3: 20       POP   X                  (0170)     pop     X
04B4: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
04B5: 09 00    ADC   A,0x0              (0172)     adc     A, 0
04B7: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
04B8: 08       PUSH  A                  (0174)     push    A
04B9: 28       ROMX                     (0175)     romx                            ; load config data from the table
04BA: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
04BB: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
04BD: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
04BF: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
04C0: 20       POP   X                  (0180)     pop     X
04C1: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
04C2: 09 00    ADC   A,0x0              (0182)     adc     A, 0
04C4: 8F D7    JMP   0x049C             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
04C6: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
04C8: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
04C9: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
04CA: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA seegangskompensation_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
04CD: 7F       RET                      (0095)    ret
04CE: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
04D1: 7F       RET                      (0123)    ret
04D2: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
04D5: 7F       RET                      (0152)    ret
04D6: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
04D9: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
04DA: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
04DC: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
04DD: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
04DF: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
04E0: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
04E2: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
04E3: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
04E4: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
04E6: 08       PUSH  A                  (0305)    push  A                                       ;
04E7: 41 23 FE AND   REG[0x23],0xFE     
04EA: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
04EC: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
04EE: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
04EF: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
04F2: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
04F4: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
04F6: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
04F8: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
04F9: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
04FB: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
04FD: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
04FF: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0501: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
0503: 70 EF    AND   F,0xEF             
0505: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
0508: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0509: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
050B: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\pga_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_3.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_3.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_3_Start
                                        (0060) export _PGA_3_Start
                                        (0061) export  PGA_3_SetPower
                                        (0062) export _PGA_3_SetPower
                                        (0063) 
                                        (0064) export  PGA_3_SetGain
                                        (0065) export _PGA_3_SetGain
                                        (0066) 
                                        (0067) export  PGA_3_Stop
                                        (0068) export _PGA_3_Stop
                                        (0069) 
                                        (0070) IF (PGA_3_AGNDBUFAPI)
                                        (0071) export  PGA_3_EnableAGNDBuffer
                                        (0072) export _PGA_3_EnableAGNDBuffer
                                        (0073) export  PGA_3_DisableAGNDBuffer
                                        (0074) export _PGA_3_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_3_Start
                                        (0092) ;  FUNCTION NAME: PGA_3_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_3_Start:
                                        (0111) _PGA_3_Start:
                                        (0112)  PGA_3_SetPower:
                                        (0113) _PGA_3_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
050C: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
050E: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
050F: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0510: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_3_GAIN_CR2]                             ; read power value
0512: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0514: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0516: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_3_GAIN_CR2], A                        ; move complete value back to register
0518: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0519: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_3_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_3_SetGain:
                                        (0154) _PGA_3_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
051A: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
051C: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
051D: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
051E: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_3_GAIN_CR0]                             ; read mux settings
0520: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0522: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0525: B0 0A    JNZ   0x0530             (0164)    jnz  .SETHIGHGAIN
0527: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_3_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
052A: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
052C: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
052E: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
052F: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0530: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0533: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0535: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
0537: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_3_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
053A: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
053B: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_3_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_3_Stop:
                                        (0203) _PGA_3_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
053C: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_3_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
053F: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_3_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_3_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_3_EnableAGNDBuffer:
                                        (0233) _PGA_3_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_3_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_3_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_3_DisableAGNDBuffer:
                                        (0261) _PGA_3_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_3_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_3.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0540: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0542: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0543: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0544: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
0546: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0548: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
054A: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
054C: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
054D: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
054E: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0550: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0551: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0552: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
0554: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0556: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0559: B0 0A    JNZ   0x0564             (0164)    jnz  .SETHIGHGAIN
055B: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
055E: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0560: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
0562: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0563: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0564: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0567: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0569: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
056B: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
056E: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
056F: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0570: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0573: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0574: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0576: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0577: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0578: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
057A: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
057C: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
057E: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0580: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0581: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0582: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0584: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0585: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0586: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
0588: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
058A: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
058D: B0 0A    JNZ   0x0598             (0164)    jnz  .SETHIGHGAIN
058F: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0592: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0594: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0596: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0597: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0598: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
059B: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
059D: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
059F: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
05A2: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
05A3: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
05A4: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
05A7: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
05A8: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
05A9: 10       PUSH  X                  (0209)     push  X
05AA: 28       ROMX                     (0210)     romx                               ; Get character from ROM
05AB: B0 04    JNZ   0x05B0             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
05AD: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
05AE: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
05AF: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
05B0: 90 3C    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
05B2: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
05B3: 18       POP   A                  (0220)     pop   A
05B4: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
05B5: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
05B7: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
05B8: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05CA: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05CB: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05CC: 67       ASR   A                  (0262)     asr   A
05CD: 67       ASR   A                  (0263)     asr   A
05CE: 67       ASR   A                  (0264)     asr   A
05CF: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
05D1: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
05D3: 90 19    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
05D5: 18       POP   A                  (0268)     pop   A                            ; Restore value
05D6: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
05D8: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
05DA: 90 12    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
05DC: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
05DD: 4B       SWAP  A,X                (0305)     swap  A,X
05DE: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
05E0: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
05E1: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
05E3: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
05E4: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
05E6: A0 06    JZ    0x05ED             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
05E8: 90 04    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
05EA: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
05EB: 8F F8    JMP   _LCD_1_PrString    (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
05ED: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
05EE: 90 5F    CALL  0x064F             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
05F0: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
05F1: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
05F2: 67       ASR   A                  (0390)     asr   A
05F3: 67       ASR   A                  (0391)     asr   A
05F4: 67       ASR   A                  (0392)     asr   A
05F5: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05F7: 90 38    CALL  0x0631             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
05F9: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05FA: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05FC: 40       NOP                      (0397)     nop
05FD: 40       NOP                      (0398)     nop
05FE: 40       NOP                      (0399)     nop
05FF: 90 30    CALL  0x0631             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0601: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0602: 90 4B    CALL  0x064F             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0604: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0605: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0606: 67       ASR   A                  (0436)     asr   A
0607: 67       ASR   A                  (0437)     asr   A
0608: 67       ASR   A                  (0438)     asr   A
0609: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
060B: 90 09    CALL  0x0616             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
060D: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
060E: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0610: 40       NOP                      (0443)     nop
0611: 40       NOP                      (0444)     nop
0612: 40       NOP                      (0445)     nop
0613: 90 01    CALL  0x0616             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0615: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0616: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0617: 26 0A 80 AND   [0xA],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
061A: 51 0A    MOV   A,[0xA]            (0480)     mov   A,[Port_2_Data_SHADE]
061C: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
061E: 18       POP   A                  (0483)     pop   A
061F: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0621: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0623: 2A 0A    OR    A,[0xA]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0625: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0627: 53 0A    MOV   [0xA],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0629: 40       NOP                      (0489)     nop
062A: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
062C: 53 0A    MOV   [0xA],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
062E: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0630: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0631: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0632: 26 0A 80 AND   [0xA],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0635: 2E 0A 20 OR    [0xA],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0638: 51 0A    MOV   A,[0xA]            (0527)     mov   A,[Port_2_Data_SHADE]
063A: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
063C: 18       POP   A                  (0530)     pop   A
063D: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
063F: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
0641: 2A 0A    OR    A,[0xA]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0643: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0645: 53 0A    MOV   [0xA],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0647: 40       NOP                      (0536)     NOP
0648: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
064A: 53 0A    MOV   [0xA],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
064C: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
064E: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
064F: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0650: 26 0A 80 AND   [0xA],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0653: 51 0A    MOV   A,[0xA]            (0574)     mov   A,[Port_2_Data_SHADE]
0655: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
0657: 26 0B F0 AND   [0xB],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
065A: 51 0B    MOV   A,[0xB]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
065C: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
065E: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
0660: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0662: 2E 0A 40 OR    [0xA],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0665: 51 0A    MOV   A,[0xA]            (0584)     mov   A,[Port_2_Data_SHADE]
0667: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
0669: 40       NOP                      (0586)     NOP
                                        (0587) 
066A: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
066B: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
066D: 2E 0A 50 OR    [0xA],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
0670: 51 0A    MOV   A,[0xA]            (0593)     mov   A,[Port_2_Data_SHADE]
0672: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0674: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0675: 40       NOP                      (0597)     nop
0676: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0678: 08       PUSH  A                  (0610)     push  A
0679: 26 0A C0 AND   [0xA],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
067C: 51 0A    MOV   A,[0xA]            (0612)     mov   A,[Port_2_Data_SHADE]
067E: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
0680: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0681: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0682: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0683: 2E 0A 50 OR    [0xA],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0686: 51 0A    MOV   A,[0xA]            (0620)     mov   A,[Port_2_Data_SHADE]
0688: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
068A: 40       NOP                      (0623)     nop
068B: 40       NOP                      (0624)     nop
                                        (0625) 
068C: 26 0A C0 AND   [0xA],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
068F: 51 0A    MOV   A,[0xA]            (0627)     mov   A,[Port_2_Data_SHADE]
0691: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0693: 18       POP   A                  (0630)     pop   A
0694: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0696: A0 04    JZ    0x069B             (0633)     jz    .UNLOCK
0698: 79       DEC   X                  (0634)     dec   X
0699: BF D3    JNZ   0x066D             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
069B: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
069C: 2E 0B 7F OR    [0xB],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
069F: 51 0B    MOV   A,[0xB]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
06A1: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
06A3: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
06A5: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
06A7: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
06A8: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
06A9: 26 0B 80 AND   [0xB],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
06AC: 2E 0B 7F OR    [0xB],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
06AF: 26 0C 80 AND   [0xC],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
06B2: 51 0B    MOV   A,[0xB]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
06B4: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
06B6: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
06B8: 51 0C    MOV   A,[0xC]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
06BA: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
06BC: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06BE: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06C0: 90 63    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
06C2: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06C4: 90 5F    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
06C6: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06C8: 9F 4C    CALL  0x0616             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
06CA: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06CC: 90 57    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
06CE: 50 03    MOV   A,0x3              (0707)     mov   A,03h
06D0: 9F 44    CALL  0x0616             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
06D2: 90 5F    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
06D4: 90 5D    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
06D6: 90 5B    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
06D8: 50 03    MOV   A,0x3              (0714)     mov   A,03h
06DA: 9F 3A    CALL  0x0616             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
06DC: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06DE: 90 45    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
06E0: 50 02    MOV   A,0x2              (0720)     mov   A,02h
06E2: 9F 32    CALL  0x0616             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
06E4: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06E6: 90 3D    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
06E8: 50 08    MOV   A,0x8              (0726)     mov   A,08h
06EA: 9F 16    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
06EC: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06EE: 90 35    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
06F0: 50 01    MOV   A,0x1              (0731)     mov   A,01h
06F2: 9F 0E    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
06F4: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06F6: 90 2D    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
06F8: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06FA: 9F 06    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
06FC: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
06FE: 9F 02    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
0700: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0702: 9E FE    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0704: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0706: 9E FA    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0708: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
070A: 9E F6    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
070C: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
070E: 9E F2    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0710: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0712: 90 11    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0714: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0719: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
071B: 10       PUSH  X                  (0791)     push  X                            ; Store COL
071C: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
071E: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
071F: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0721: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0722: 9E DE    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0724: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0725: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0727: 78       DEC   A                  (0828)     dec   A
0728: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
072A: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0733: 08       PUSH  A                  (0871)     push  A
0734: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0736: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0738: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
073A: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
073C: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
073E: D0 06    JNC   0x0745             (0877)     jnc   .Delay50u_End
0740: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0742: 78       DEC   A                  (0880)     dec   A                              ; [4]
0743: BF FE    JNZ   0x0742             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0745: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0746: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
0747: 10       PUSH  X                  (0943)     push  X
0748: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
074A: 9F CD    CALL  _LCD_1_Position    (0945)     call  LCD_1_Position               ; Set cursor position
074C: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
074D: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0750: B0 05    JNZ   0x0756             (0950)     jnz   .LCD_CHECK1X
0752: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0754: 80 11    JMP   0x0766             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0756: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0759: D0 07    JNC   0x0761             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
075B: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
075D: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
075F: 80 06    JMP   0x0766             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0761: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0763: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0766: 9E 86    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
0768: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
076A: BF E2    JNZ   0x074D             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
076C: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
076D: 4F       MOV   X,SP               (1015)     mov   X, SP
076E: 10       PUSH  X                  (1016)     push  X
076F: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0771: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0773: 9F A4    CALL  _LCD_1_Position    (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0775: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0776: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0779: B0 05    JNZ   0x077F             (1026)     jnz   .LCD_CHECK1
077B: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
077D: 80 11    JMP   0x078F             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
077F: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0782: D0 07    JNC   0x078A             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0784: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0786: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0788: 80 06    JMP   0x078F             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
078A: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
078C: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
078F: 9E 5D    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
0791: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0793: BF E2    JNZ   0x0776             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0795: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
0796: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0798: 08       PUSH  A                  (1098)     push  A
0799: FF 7A    INDEX LCD_1_ROW_OFFSET   (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
079B: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
079D: 9E 63    CALL  _LCD_1_Control     (1101)     call  LCD_1_Control                ; Position Cursor
079F: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
07A2: B0 05    JNZ   0x07A8             (1103)     jnz   .VBG_NZ_SEGX
07A4: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
07A6: 80 13    JMP   0x07BA             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
07A8: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
07AB: D0 09    JNC   0x07B5             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
07AD: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
07AF: 78       DEC   A                  (1111)     dec   A
07B0: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
07B3: 80 06    JMP   0x07BA             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
07B5: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
07B8: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
07BA: 9E 32    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(1120)     call  LCD_1_WriteData              ; Write value
07BC: 18       POP   A                  (1121)     pop   A
07BD: 78       DEC   A                  (1122)     dec   A
07BE: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
07C0: BF D7    JNZ   0x0798             (1124)     jnz   .VBG_LOOPX
07C2: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
07C3: 4F       MOV   X,SP               (1168)     mov   X, SP
07C4: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
07C6: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
07C8: 08       PUSH  A                  (1172)     push  A
07C9: FF 4A    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
07CB: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
07CD: 9E 33    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
07CF: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
07D2: B0 05    JNZ   0x07D8             (1177)     jnz   .VBG_NZ_SEG
07D4: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
07D6: 80 13    JMP   0x07EA             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
07D8: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
07DB: D0 09    JNC   0x07E5             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
07DD: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
07DF: 78       DEC   A                  (1185)     dec   A
07E0: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
07E3: 80 06    JMP   0x07EA             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
07E5: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
07E8: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
07EA: 9E 02    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(1194)     call  LCD_1_WriteData              ; Write value
07EC: 18       POP   A                  (1195)     pop   A
07ED: 78       DEC   A                  (1196)     dec   A
07EE: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
07F0: BF D7    JNZ   0x07C8             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
07F2: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
07F3: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
07F4: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
07F5: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
07F6: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
07F8: 9E 08    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
07FA: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
07FD: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0800: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0802: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0804: D0 05    JNC   0x080A             (1251)     jnc   .VBG_SOLID
0806: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0808: 80 03    JMP   0x080C             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
080A: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
080C: 9D E0    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(1257)     call  LCD_1_WriteData              ; character data
080E: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0810: BF EF    JNZ   0x0800             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0812: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0814: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0817: BF E5    JNZ   0x07FD             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0819: 18       POP   A                  (1264)     pop  A
081A: 18       POP   A                  (1265)     pop  A
081B: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
081D: 9D E3    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
081F: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
082E: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
082F: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0831: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0833: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0835: 9D CB    CALL  _LCD_1_Control     (1324)     call  LCD_1_Control                ; Position the CG pointer
0837: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
083A: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
083D: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
083F: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0842: B0 05    JNZ   0x0848             (1332)     jnz   .BG_OTHER
0844: FF DA    INDEX LCD_1_BG_TYPE1     (1333)     index LCD_1_BG_TYPE1
0846: 80 03    JMP   0x084A             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0848: FF DD    INDEX LCD_1_BG_TYPE2     (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
084A: 9D A2    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_WriteData|_LCD_1_Write_Data(1338)     call  LCD_1_WriteData
084C: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
084E: BF EE    JNZ   0x083D             (1340)     jnz   .BG_Loop2
0850: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0852: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0855: BF E4    JNZ   0x083A             (1343)     jnz   .BG_Loop1
                                        (1344) 
0857: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0859: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_1_DISP_ON
085B: 9D A5    CALL  _LCD_1_Control     (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
085D: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\dualadc8int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DUALADC8INT.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:43:29
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC8 Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "DUALADC8.inc"
                                        (0016) 
                                        (0017) ; Prototypes for ADCINCVR Interrupt routines
                                        (0018) export _DUALADC8_CNT1_ISR
                                        (0019) export _DUALADC8_CNT2_ISR
                                        (0020) export _DUALADC8_PWM16_ISR
                                        (0021) 
                                        (0022) ; Define the ADCVARINC RAM variables
                                        (0023) area InterruptRAM(RAM,REL,CON)
                                        (0024)  export  DUALADC8_cCounter1U
                                        (0025)  export  DUALADC8_cCounter2U
                                        (0026)  export _DUALADC8_iResult1
                                        (0027)  export  DUALADC8_iResult1
                                        (0028)  export _DUALADC8_iResult2
                                        (0029)  export  DUALADC8_iResult2
                                        (0030)  export _DUALADC8_bfStatus
                                        (0031)  export  DUALADC8_bfStatus
                                        (0032) 
                                        (0033) ;-----------------------------------------------
                                        (0034) ; Variable Allocation
                                        (0035) ;-----------------------------------------------
                                        (0036)  DUALADC8_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0037)  DUALADC8_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0038) _DUALADC8_iResult1:
                                        (0039)  DUALADC8_iResult1:       BLK   2  ;A/D value
                                        (0040) _DUALADC8_iResult2:
                                        (0041)  DUALADC8_iResult2:       BLK   2  ;A/D value
                                        (0042) _DUALADC8_bfStatus:
                                        (0043)  DUALADC8_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0044) 
                                        (0045) 
                                        (0046) ;-----------------------------------------------
                                        (0047) ;  Constant Definitions
                                        (0048) ;-----------------------------------------------
                                        (0049) LowByte:   equ 1
                                        (0050) HighByte:  equ 0
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0055) ;---------------------------------------------------
                                        (0056) ; Insert your custom declarations below this banner
                                        (0057) ;---------------------------------------------------
                                        (0058) 
                                        (0059) ;------------------------
                                        (0060) ; Includes
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 	
                                        (0064) ;------------------------
                                        (0065) ;  Constant Definitions
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;------------------------
                                        (0070) ; Variable Allocation
                                        (0071) ;------------------------
                                        (0072) 
                                        (0073) 
                                        (0074) ;---------------------------------------------------
                                        (0075) ; Insert your custom declarations above this banner
                                        (0076) ;---------------------------------------------------
                                        (0077) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _DUALADC8CNT1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;    Increment the upper (software) half on the counter whenever the
                                        (0084) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0085) ;    should start out at the most negative value.
                                        (0086) ;
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) ;
                                        (0089) _DUALADC8_CNT1_ISR:
085E: 76 0D    INC   [0xD]              (0090)    inc [DUALADC8_cCounter1U]
                                        (0091)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0092)    ;---------------------------------------------------
                                        (0093)    ; Insert your custom code below this banner
                                        (0094)    ;---------------------------------------------------
                                        (0095) 
                                        (0096)    ;---------------------------------------------------
                                        (0097)    ; Insert your custom code above this banner
                                        (0098)    ;---------------------------------------------------
                                        (0099)    ;@PSoC_UserCode_END@ (Do not change this line.)
0860: 7E       RETI                     (0100)    reti
                                        (0101) 
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103) ;  FUNCTION NAME: _DUALADC8CNT2_ISR
                                        (0104) ;
                                        (0105) ;  DESCRIPTION:
                                        (0106) ;     Increment the upper (software) half on the counter whenever the
                                        (0107) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0108) ;     should start out at the most negative value.
                                        (0109) ;
                                        (0110) ;-----------------------------------------------------------------------------
                                        (0111) ;
                                        (0112) _DUALADC8_CNT2_ISR:
0861: 76 0E    INC   [0xE]              (0113)    inc [DUALADC8_cCounter2U]
                                        (0114)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0115)    ;---------------------------------------------------
                                        (0116)    ; Insert your custom code below this banner
                                        (0117)    ;---------------------------------------------------
                                        (0118) 
                                        (0119)    ;---------------------------------------------------
                                        (0120)    ; Insert your custom code above this banner
                                        (0121)    ;---------------------------------------------------
                                        (0122)    ;@PSoC_UserCode_END@ (Do not change this line.)
0863: 7E       RETI                     (0123)    reti
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;  FUNCTION NAME: _DUALADC8PWM16_ISR
                                        (0126) ;
                                        (0127) ;  DESCRIPTION:
                                        (0128) ;     This service routine may be called at the beginning of a compare
                                        (0129) ;     and at the terminal count of the PWM.
                                        (0130) ;
                                        (0131) ;     This routine allows the counter to collect data for 64 timer cycles
                                        (0132) ;     This routine then holds the integrater in reset for one cycle while
                                        (0133) ;     the A/D value is calculated.
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) _DUALADC8_PWM16_ISR:
0864: 41 2B FE AND   REG[0x2B],0xFE     (0138)    and   reg[DUALADC8_bCounter1_CR0], ~DUALADC8_fDBLK_ENABLE  ; Disable Counter
0867: 41 37 FE AND   REG[0x37],0xFE     (0139)    and   reg[DUALADC8_bCounter2_CR0], ~DUALADC8_fDBLK_ENABLE  ; Disable Counter
                                        (0140) IF DUALADC8_NoAZ
086A: 43 82 20 OR    REG[0x82],0x20     (0141)    or    reg[DUALADC8_bfADC1cr2], DUALADC8_fAutoZero       ; Put Integrator in AutoZero
086D: 43 86 20 OR    REG[0x86],0x20     (0142)    or    reg[DUALADC8_bfADC2cr2], DUALADC8_fAutoZero       ; Put Integrator in AutoZero
                                        (0143) ENDIF
0870: 43 83 10 OR    REG[0x83],0x10     (0144)    or   reg[DUALADC8_bfADC1cr3],DUALADC8_fFSW0             ; Put Integrator in reset
0873: 43 87 10 OR    REG[0x87],0x10     (0145)    or   reg[DUALADC8_bfADC2cr3],DUALADC8_fFSW0             ; Put Integrator in reset
0876: 71 01    OR    F,0x1              
                                        (0146) 
                                        (0147)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0148)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0149)    M8C_EnableGInt
0878: 40       NOP                      (0150)    nop                                                     ; Wait a couple cycles
0879: 70 FE    AND   F,0xFE             
                                        (0151)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
087B: 08       PUSH  A                  (0152)    push  A                                                 ; Save the Accumulator
                                        (0153) 
                                        (0154) 
                                        (0155)    ; Get ADC1 result
087C: 5D 28    MOV   A,REG[0x28]        (0156)    mov   A,reg[DUALADC8_bCount1]                           ; Read counter value  (Bogus read puts value in Period register)
087E: 5D 2A    MOV   A,REG[0x2A]        (0157)    mov   A,reg[DUALADC8_bCompare1]                         ; Read counter value
0880: 78       DEC   A                  (0158)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0881: 73       CPL   A                  (0159)    cpl   A                                                 ; Invert the value
0882: D0 03    JNC   0x0886             (0160)    jnc   DUALADC8_ISR_CALCV1                               ; if carry, then inc MSB as well
0884: 76 0D    INC   [0xD]              (0161)    inc   [DUALADC8_cCounter1U]
                                        (0162) DUALADC8_ISR_CALCV1:
0886: 53 10    MOV   [0x10],A           (0163)    mov   [(DUALADC8_iResult1 + LowByte)],A                 ; Store LSB value
0888: 51 0D    MOV   A,[0xD]            (0164)    mov   A, [DUALADC8_cCounter1U]                          ; Store MSB from temp counter
088A: 53 0F    MOV   [0xF],A            (0165)    mov   [(DUALADC8_iResult1 + HighByte)],A
                                        (0166) 
                                        (0167)    ; Get ADC2 result
088C: 5D 34    MOV   A,REG[0x34]        (0168)    mov   A,reg[DUALADC8_bCount2]                           ; Read counter value  (Bogus read puts value in Period register)
088E: 5D 36    MOV   A,REG[0x36]        (0169)    mov   A,reg[DUALADC8_bCompare2]                         ; Read counter value
0890: 78       DEC   A                  (0170)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0891: 73       CPL   A                  (0171)    cpl   A                                                 ; Invert the value
0892: D0 03    JNC   0x0896             (0172)    jnc   DUALADC8_ISR_CALCV2                               ; if carry, then inc MSB as well
0894: 76 0E    INC   [0xE]              (0173)    inc   [DUALADC8_cCounter2U]
                                        (0174) DUALADC8_ISR_CALCV2:
0896: 53 12    MOV   [0x12],A           (0175)    mov   [(DUALADC8_iResult2 + LowByte)],A                 ; Store LSB value
0898: 51 0E    MOV   A,[0xE]            (0176)    mov   A, [DUALADC8_cCounter2U]                          ; Store MSB from temp counter
089A: 53 11    MOV   [0x11],A           (0177)    mov   [(DUALADC8_iResult2 + HighByte)],A
                                        (0178) 
                                        (0179)                                                            ; The new value has been stored,
                                        (0180)                                                            ; so get counters ready for next reading first.
089C: 62 29 FF MOV   REG[0x29],0xFF     (0181)    mov   reg[DUALADC8_bPeriod1], ffh                       ; Initialize counter1 to FF - Set to overflow after 256 counts
089F: 62 35 FF MOV   REG[0x35],0xFF     (0182)    mov   reg[DUALADC8_bPeriod2], ffh                       ; Initialize counter2 to FF - Set to overflow after 256 counts
08A2: 62 2B 01 MOV   REG[0x2B],0x1      (0183)    mov   reg[DUALADC8_bCounter1_CR0],DUALADC8_fDBLK_ENABLE ; Enable Counter1
08A5: 62 37 01 MOV   REG[0x37],0x1      (0184)    mov   reg[DUALADC8_bCounter2_CR0],DUALADC8_fDBLK_ENABLE ; Enable Counter2
                                        (0185) 
                                        (0186) 
                                        (0187) IF (DUALADC8_DATA_FORMAT)                                  ; Only check for Negative numbers if SIGNED result
08A8: 55 0D FE MOV   [0xD],0xFE         (0188)    mov   [DUALADC8_cCounter1U], 0xFE                       ; load MSB with Max negative *4
08AB: 55 0E FE MOV   [0xE],0xFE         (0189)    mov   [DUALADC8_cCounter2U], 0xFE                       ; Load MSB with Max negative *4
                                        (0190) ELSE
                                        (0191)    mov   [DUALADC8_cCounter1U], 00h                        ; Place result back into MSB of counter
                                        (0192)    mov   [DUALADC8_cCounter2U], 00h                        ; Place result back into MSB of counter
                                        (0193) ENDIF
                                        (0194) 
                                        (0195)    ;***********************************************
                                        (0196)    ; If the input is muxed with multiple inputs
                                        (0197)    ; this is a good place to change inputs.
                                        (0198)    ;***********************************************
                                        (0199)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0200)    ;---------------------------------------------------
                                        (0201)    ; Insert your custom code below this banner
                                        (0202)    ;---------------------------------------------------
                                        (0203) 
                                        (0204)    ;---------------------------------------------------
                                        (0205)    ; Insert your custom code above this banner
                                        (0206)    ;---------------------------------------------------
                                        (0207)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
08AE: 41 83 EF AND   REG[0x83],0xEF     (0209)    and   reg[DUALADC8_bfADC1cr3],~DUALADC8_fFSW0           ; Take Integrator out of reset
08B1: 41 87 EF AND   REG[0x87],0xEF     (0210)    and   reg[DUALADC8_bfADC2cr3],~DUALADC8_fFSW0           ; Take Integrator out of reset
                                        (0211) IF DUALADC8_NoAZ
08B4: 41 82 DF AND   REG[0x82],0xDF     (0212)    and   reg[DUALADC8_bfADC1cr2],~DUALADC8_fAutoZero       ; Take Integrator out of AutoZero
08B7: 41 86 DF AND   REG[0x86],0xDF     (0213)    and   reg[DUALADC8_bfADC2cr2],~DUALADC8_fAutoZero       ; Take Integrator out of AutoZero
                                        (0214) ENDIF
                                        (0215) 
                                        (0216)    ;****************************************************************************
                                        (0217)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0218)    ;                          ; if stack space isn't at a premium.
                                        (0219)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0220)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0221)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0222)    ;        successful acquisition of the next byte.
                                        (0223)    ;****************************************************************************
                                        (0224) 
                                        (0225) ;------------------------------------ ADC1 --------------------------------------
                                        (0226) IF (DUALADC8_DATA_FORMAT)                        ; Only check for Negative numbers if SIGNED result
                                        (0227)                                                  ; Negative Overflow Check
08BA: 47 0F 80 TST   [0xF],0x80         (0228)    tst   [(DUALADC8_iResult1 + HighByte)],80h
08BD: B0 0E    JNZ   0x08CC             (0229)    jnz   DUALADC8_NOT_POVFL1
                                        (0230)                                                  ; Postive Overflow Check
08BF: 50 02    MOV   A,0x2              (0231)    mov   A,0x02                                  ; Overflow if signed result  (4x of MSB)
08C1: 22 0F    AND   A,[0xF]            (0232)    and   A, [(DUALADC8_iResult1 + HighByte)]
08C3: A0 08    JZ    0x08CC             (0233)    jz    DUALADC8_NOT_POVFL1
                                        (0234)                                                  ; Positive overflow, fix it - set to Max Positive + 1
08C5: 50 01    MOV   A,0x1              (0235)    mov   A,0x01                                  ; Overflow if signed result  (4x of MSB - 1)
                                        (0236) ELSE
                                        (0237)                                                  ; Postive Overflow Check
                                        (0238)    mov   A,0x04                                  ; Overflow if unsigned result (4x of MSB)
                                        (0239)    and   A, [(DUALADC8_iResult1 + HighByte)]
                                        (0240)    jz    DUALADC8_NOT_POVFL1
                                        (0241)                                                  ; Positive overflow, fix it - set to Max Positive + 1
                                        (0242)    mov   A,0x03                                  ; Overflow if unsigned result (4x of MSB - 1)
                                        (0243) ENDIF
                                        (0244) 
                                        (0245)                                                  ; Force most positive * 4 into result
08C7: 53 0F    MOV   [0xF],A            (0246)    mov   [(DUALADC8_iResult1 + HighByte)], A
08C9: 55 10 FF MOV   [0x10],0xFF        (0247)    mov   [(DUALADC8_iResult1 + LowByte)], ffh
                                        (0248) 
                                        (0249) DUALADC8_NOT_POVFL1:
08CC: 68 0F    ASR   [0xF]              (0250)    asr   [(DUALADC8_iResult1 + HighByte)]        ; Shift MSB and LSB right twice to divide by four
08CE: 6E 10    RRC   [0x10]             (0251)    rrc   [(DUALADC8_iResult1 + LowByte)]         ; Remember digital clock 4 times analog clock
08D0: 68 0F    ASR   [0xF]              (0252)    asr   [(DUALADC8_iResult1 + HighByte)]
08D2: 6E 10    RRC   [0x10]             (0253)    rrc   [(DUALADC8_iResult1 + LowByte)]
                                        (0254) 
                                        (0255) ;------------------------------------ ADC2 --------------------------------------
                                        (0256) IF (DUALADC8_DATA_FORMAT)                        ; Only check for Negative numbers if SIGNED result
                                        (0257)                                                  ; Negative Overflow Check
08D4: 47 11 80 TST   [0x11],0x80        (0258)    tst   [(DUALADC8_iResult2 + HighByte)],80h
08D7: B0 0E    JNZ   0x08E6             (0259)    jnz   DUALADC8_NOT_POVFL2
                                        (0260)                                                  ; Postive Overflow Check
08D9: 50 02    MOV   A,0x2              (0261)    mov   A,0x02                                  ; Overflow if signed result  (4x of MSB)
08DB: 22 11    AND   A,[0x11]           (0262)    and   A, [(DUALADC8_iResult2 + HighByte)]
08DD: A0 08    JZ    0x08E6             (0263)    jz    DUALADC8_NOT_POVFL2
08DF: 50 01    MOV   A,0x1              (0264)    mov   A,0x01                                  ; Overflow if signed result  (4x of MSB - 1)
                                        (0265) ELSE
                                        (0266)                                                  ; Postive Overflow Check
                                        (0267)    mov   A,0x04                                  ; Overflow if unsigned result (4x of MSB)
                                        (0268)    and   A, [(DUALADC8_iResult2 + HighByte)]
                                        (0269)    jz    DUALADC8_NOT_POVFL2
                                        (0270)    mov   A,0x03                                  ; Overflow if unsigned result (4x of MSB - 1)
                                        (0271) ENDIF
                                        (0272) 
                                        (0273)                                                  ; Positive overflow, fix it - set to Max Positive + 1
                                        (0274)                                                  ; Force most positive * 4 into result
08E1: 53 11    MOV   [0x11],A           (0275)    mov   [(DUALADC8_iResult2 + HighByte)], A
08E3: 55 12 FF MOV   [0x12],0xFF        (0276)    mov   [(DUALADC8_iResult2 + LowByte)], ffh
                                        (0277) 
                                        (0278) DUALADC8_NOT_POVFL2:
08E6: 68 11    ASR   [0x11]             (0279)    asr   [(DUALADC8_iResult2 + HighByte)]        ; Shift MSB and LSB right twice to divide by four
08E8: 6E 12    RRC   [0x12]             (0280)    rrc   [(DUALADC8_iResult2 + LowByte)]         ; Remember digital clock 4 times analog clock
08EA: 68 11    ASR   [0x11]             (0281)    asr   [(DUALADC8_iResult2 + HighByte)]
08EC: 6E 12    RRC   [0x12]             (0282)    rrc   [(DUALADC8_iResult2 + LowByte)]
                                        (0283) 
08EE: 18       POP   A                  (0284)    pop   A                                       ; Restore A, not used any more
08EF: 2E 13 10 OR    [0x13],0x10        (0285)    or    [DUALADC8_bfStatus],DUALADC8_fDATA_READY  ; Set Data ready bit
                                        (0286) 
                                        (0287)    ;**********************************************
                                        (0288)    ; Data is ready at this point.
                                        (0289)    ; If processing Data at Interrupt level - add
                                        (0290)    ;     User Code to handle the data
                                        (0291)    ;**********************************************
                                        (0292)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0293)    ;---------------------------------------------------
                                        (0294)    ; Insert your custom code below this banner
                                        (0295)    ;---------------------------------------------------
                                        (0296) 
                                        (0297)    ;---------------------------------------------------
                                        (0298)    ; Insert your custom code above this banner
                                        (0299)    ;---------------------------------------------------
                                        (0300)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0301) 
                                        (0302) 
                                        (0303) DUALADC8_END_PWM16_ISR:
08F2: 7E       RETI                     (0304)    reti
                                        (0305) 
                                        (0306) DUALADC8_APIINT_END:
                                        (0307) 
                                        (0308) ; end of file DUALADC8INT.asm
FILE: lib\dualadc8.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DUALADC8.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:43:29
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DUALADC8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DUALADC8_Start
                                        (0030) export _DUALADC8_Start
                                        (0031) export  DUALADC8_SetPower
                                        (0032) export _DUALADC8_SetPower
                                        (0033) export  DUALADC8_Stop
                                        (0034) export _DUALADC8_Stop
                                        (0035) export  DUALADC8_GetSamples
                                        (0036) export _DUALADC8_GetSamples
                                        (0037) export  DUALADC8_StopAD
                                        (0038) export _DUALADC8_StopAD
                                        (0039) export  DUALADC8_fIsData
                                        (0040) export _DUALADC8_fIsData
                                        (0041) export  DUALADC8_fIsDataAvailable
                                        (0042) export _DUALADC8_fIsDataAvailable
                                        (0043) export  DUALADC8_cGetData1
                                        (0044) export _DUALADC8_cGetData1
                                        (0045) export  DUALADC8_cGetData2
                                        (0046) export _DUALADC8_cGetData2
                                        (0047) export  DUALADC8_ClearFlag
                                        (0048) export _DUALADC8_ClearFlag
                                        (0049) export  DUALADC8_cGetData1ClearFlag
                                        (0050) export _DUALADC8_cGetData1ClearFlag
                                        (0051) export  DUALADC8_cGetData2ClearFlag
                                        (0052) export _DUALADC8_cGetData2ClearFlag
                                        (0053) export  DUALADC8_SetCalcTime
                                        (0054) export _DUALADC8_SetCalcTime
                                        (0055) export _DUALADC8_iCalcTime
                                        (0056) export  DUALADC8_iCalcTime
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) LowByte:       equ 1
                                        (0062) HighByte:      equ 0
                                        (0063) 
                                        (0064) ;-----------------------------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;-----------------------------------------------
                                        (0067) area seegangskompensation_RAM (RAM, REL, CON)
                                        (0068) _DUALADC8_iCalcTime:
                                        (0069)  DUALADC8_iCalcTime:      BLK   2  ;CalcTime
                                        (0070) 
                                        (0071) AREA UserModules (ROM, REL)
                                        (0072) 
                                        (0073) .SECTION
                                        (0074) ;-----------------------------------------------------------------------------
                                        (0075) ;  FUNCTION NAME: DUALADC8_Start
                                        (0076) ;
                                        (0077) ;  DESCRIPTION:
                                        (0078) ;     Applies power setting to the module's analog PSoc block.
                                        (0079) ;
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;
                                        (0082) ;  ARGUMENTS:
                                        (0083) ;    A contains the power setting 0-3
                                        (0084) ;
                                        (0085) ;  RETURNS:  None
                                        (0086) ;
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.    
                                        (0093) ;
                                        (0094)  DUALADC8_Start:
                                        (0095) _DUALADC8_Start:
                                        (0096)  DUALADC8_SetPower:
                                        (0097) _DUALADC8_SetPower:
                                        (0098)    RAM_PROLOGUE RAM_USE_CLASS_2
08F3: 21 03    AND   A,0x3              (0099)    and   A,DUALADC8_bfPOWERMASK                      ; Mask only the valid power setting bits
08F5: 4F       MOV   X,SP               (0100)    mov   X, SP                                       ; Get location of next location on stack
08F6: 08       PUSH  A                  (0101)    push  A                                           ; Save power value on temp location
                                        (0102) 
                                        (0103)                                                      ; Set power for ADC1
08F7: 5D 83    MOV   A,REG[0x83]        (0104)    mov   A, reg[DUALADC8_bfADC1cr3]                  ; Get current value of ADC1cr3
08F9: 21 FC    AND   A,0xFC             (0105)    and   A, ~DUALADC8_bfPOWERMASK                    ; Mask off old power value
08FB: 2B 00    OR    A,[X+0]            (0106)    or    A, [X]                                      ; OR in new power value
08FD: 29 F0    OR    A,0xF0             (0107)    or    A, f0h                                      ; Make sure other register is set correctly
08FF: 60 83    MOV   REG[0x83],A        (0108)    mov   reg[DUALADC8_bfADC1cr3], A                  ; Reload CR with new power value
                                        (0109) 
                                        (0110)                                                      ; Set power for ADC2
0901: 5D 87    MOV   A,REG[0x87]        (0111)    mov   A, reg[DUALADC8_bfADC2cr3]                  ; Get current value of ADC2cr3
0903: 21 FC    AND   A,0xFC             (0112)    and   A, ~DUALADC8_bfPOWERMASK                    ; Mask off old power value
0905: 2B 00    OR    A,[X+0]            (0113)    or    A, [X]                                      ; OR in new power value
0907: 29 F0    OR    A,0xF0             (0114)    or    A, f0h                                      ; Make sure other register is set correctly
0909: 60 87    MOV   REG[0x87],A        (0115)    mov   reg[DUALADC8_bfADC2cr3], A                  ; Reload CR with new power value
                                        (0116) 
090B: 18       POP   A                  (0117)    pop   A                                           ; Restore the stack and power value
                                        (0118)    RAM_EPILOGUE RAM_USE_CLASS_2
090C: 7F       RET                      (0119)    ret
                                        (0120) .ENDSECTION
                                        (0121) 
                                        (0122) .SECTION
                                        (0123) ;-----------------------------------------------------------------------------
                                        (0124) ;  FUNCTION NAME: DUALADC8_Stop
                                        (0125) ;
                                        (0126) ;  DESCRIPTION:
                                        (0127) ;     Removes power from the module's analog PSoc block, but the digital
                                        (0128) ;     blocks keep on running.
                                        (0129) ;
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;
                                        (0132) ;  ARGUMENTS:  None
                                        (0133) ;
                                        (0134) ;  RETURNS: None
                                        (0135) ;
                                        (0136) ;  SIDE EFFECTS:
                                        (0137) ;    The A and X registers may be modified by this or future implementations
                                        (0138) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0139) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0140) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0141) ;    functions.
                                        (0142) ;
                                        (0143)  DUALADC8_Stop:
                                        (0144) _DUALADC8_Stop:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_1
090D: 41 83 FC AND   REG[0x83],0xFC     (0146)    and   reg[DUALADC8_bfADC1cr3], ~DUALADC8_bfPOWERMASK
0910: 41 87 FC AND   REG[0x87],0xFC     (0147)    and   reg[DUALADC8_bfADC2cr3], ~DUALADC8_bfPOWERMASK
                                        (0148)    RAM_EPILOGUE RAM_USE_CLASS_1
0913: 7F       RET                      (0149)    ret
                                        (0150) .ENDSECTION
                                        (0151) 
                                        (0152) .SECTION
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;  FUNCTION NAME: DUALADC8_GetSamples
                                        (0155) ;
                                        (0156) ;  DESCRIPTION:
                                        (0157) ;     Starts the A/D convertor and will place data is memory.  A flag
                                        (0158) ;     is set whenever a new data value is available.
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;
                                        (0162) ;  ARGUMENTS:
                                        (0163) ;     None:
                                        (0164) ;
                                        (0165) ;  RETURNS:  None
                                        (0166) ;
                                        (0167) ;  SIDE EFFECTS:
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;          
                                        (0174) ;    Currently only the page pointer registers listed below are modified: 
                                        (0175) ;          CUR_PP
                                        (0176) ;
                                        (0177)  DUALADC8_GetSamples:
                                        (0178) _DUALADC8_GetSamples:
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0180)    RAM_SETPAGE_CUR >DUALADC8_iCalcTime
0914: 90 3D    CALL  _DUALADC8_StopAD   (0181)    call  DUALADC8_StopAD                                   ; Halt PWM and counter, Disable
                                        (0182)                                                            ; Interrupts, Put A/D in reset
                                        (0183) 
0916: 62 2E 00 MOV   REG[0x2E],0x0      (0184)    mov   reg[DUALADC8_bPWM_IntTime_LSB], 00h
0919: 62 32 04 MOV   REG[0x32],0x4      (0185)    mov   reg[DUALADC8_bPWM_IntTime_MSB], 0x04
                                        (0186) 
                                        (0187)                                                    ; Load the CalcTime into the PWM Period
091C: 51 3C    MOV   A,[prozess+32]     (0188)    mov   A,[DUALADC8_iCalcTime+LowByte]
091E: 60 2D    MOV   REG[0x2D],A        (0189)    mov   reg[DUALADC8_bPWM_Period_LSB],A
0920: 50 04    MOV   A,0x4              (0190)    mov   A,0x4
0922: 02 3B    ADD   A,[prozess+31]     (0191)    add   A,[DUALADC8_iCalcTime+HighByte]
0924: 60 31    MOV   REG[0x31],A        (0192)    mov   reg[DUALADC8_bPWM_Period_MSB],A
                                        (0193) 
                                        (0194) 
                                        (0195) DUALADC8_LoadMSBCounter:                                   ; The PWM has been setup by SetResolution, now set the upper
                                        (0196)                                                            ; counter which will be the same as the period.
                                        (0197)                                                            ; Reset MSB of counter to most negative value
                                        (0198)    RAM_SETPAGE_CUR >DUALADC8_cCounter1U
                                        (0199) IF (DUALADC8_DATA_FORMAT)
0926: 55 0D FE MOV   [0xD],0xFE         (0200)    mov   [DUALADC8_cCounter1U], 0xFE                       ; Start counter1 at most negative signed value
0929: 55 0E FE MOV   [0xE],0xFE         (0201)    mov   [DUALADC8_cCounter2U], 0xFE                       ; Start counter2 at most negative signed value
                                        (0202) ELSE
                                        (0203)    mov   [DUALADC8_cCounter1U], 00h                        ; Always start at zero for unsigned values for ADC1
                                        (0204)    mov   [DUALADC8_cCounter2U], 00h                        ; Always start at zero for unsigned values for ADC2
                                        (0205) ENDIF
092C: 5D 2E    MOV   A,REG[0x2E]        (0206)    mov   A, reg[DUALADC8_bPWM_IntTime_LSB]                 ; Dummy Read  - required do not remove
092E: 62 29 FF MOV   REG[0x29],0xFF     (0207)    mov   reg[DUALADC8_bPeriod1], FFh                       ; Make sure counter1 starts at FF
0931: 62 35 FF MOV   REG[0x35],0xFF     (0208)    mov   reg[DUALADC8_bPeriod2], FFh                       ; Make sure counter2 starts at FF
                                        (0209) 
0934: 41 83 EF AND   REG[0x83],0xEF     (0210)    and   reg[DUALADC8_bfADC1cr3],~DUALADC8_fFSW0           ; Take Integrator out of reset
0937: 41 87 EF AND   REG[0x87],0xEF     (0211)    and   reg[DUALADC8_bfADC2cr3],~DUALADC8_fFSW0           ; Take Integrator out of reset
                                        (0212) IF DUALADC8_NoAZ
093A: 41 82 DF AND   REG[0x82],0xDF     (0213)    and   reg[DUALADC8_bfADC1cr2],~DUALADC8_fAutoZero       ; Take Integrator out of AutoZero
093D: 41 86 DF AND   REG[0x86],0xDF     (0214)    and   reg[DUALADC8_bfADC2cr2],~DUALADC8_fAutoZero       ; Take Integrator out of AutoZero
                                        (0215) ENDIF
                                        (0216) 
                                        (0217)                                                                ; Enable the A/D and Start it!
0940: 43 2B 05 OR    REG[0x2B],0x5      (0218)    or    reg[DUALADC8_bCounter1_CR0], (DUALADC8_fDBLK_ENABLE|DUALADC8_fPULSE_WIDE)   ; Enable the Counter
0943: 43 37 05 OR    REG[0x37],0x5      (0219)    or    reg[DUALADC8_bCounter2_CR0], (DUALADC8_fDBLK_ENABLE|DUALADC8_fPULSE_WIDE)   ; Enable the Counter
0946: 43 2F 01 OR    REG[0x2F],0x1      (0220)    or    reg[DUALADC8_fPWM_LSB_CR0], DUALADC8_fDBLK_ENABLE          ; Enable PWM
0949: 43 E1 10 OR    REG[0xE1],0x10     (0221)    or    reg[DUALADC8_bfPWM16_INT_REG], DUALADC8_bfPWM16_Mask      ; Enable PWM and Counter interrupts
094C: 43 E1 04 OR    REG[0xE1],0x4      (0222)    or    reg[DUALADC8_bfCounter1_INT_REG], DUALADC8_bfCounter1_Mask
094F: 43 E1 20 OR    REG[0xE1],0x20     (0223)    or    reg[DUALADC8_bfCounter2_INT_REG], DUALADC8_bfCounter2_Mask
                                        (0224)    RAM_EPILOGUE RAM_USE_CLASS_4
0952: 7F       RET                      (0225)    ret
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) .SECTION
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  FUNCTION NAME: DUALADC8_StopAD
                                        (0231) ;
                                        (0232) ;  DESCRIPTION:
                                        (0233) ;     Completely shuts down the A/D is an orderly manner.  Both the
                                        (0234) ;     Timer and Counter are disabled and their interrupts are deactivated.
                                        (0235) ;
                                        (0236) ;-----------------------------------------------------------------------------
                                        (0237) ;
                                        (0238) ;  ARGUMENTS:
                                        (0239) ;
                                        (0240) ;  RETURNS:
                                        (0241) ;
                                        (0242) ;  SIDE EFFECTS:
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  DUALADC8_StopAD:
                                        (0250) _DUALADC8_StopAD:
                                        (0251)    RAM_PROLOGUE RAM_USE_CLASS_1
0953: 41 2F FE AND   REG[0x2F],0xFE     (0252)    and   reg[DUALADC8_fPWM_LSB_CR0], ~DUALADC8_fDBLK_ENABLE    ; Disable the PWM
                                        (0253) 
0956: 41 2B FE AND   REG[0x2B],0xFE     (0254)    and   reg[DUALADC8_bCounter1_CR0], ~DUALADC8_fDBLK_ENABLE           ; Disable the Counter
0959: 41 37 FE AND   REG[0x37],0xFE     (0255)    and   reg[DUALADC8_bCounter2_CR0], ~DUALADC8_fDBLK_ENABLE           ; Disable the Counter
                                        (0256) 
                                        (0257) IF DUALADC8_NoAZ
095C: 43 82 20 OR    REG[0x82],0x20     (0258)    or    reg[DUALADC8_bfADC1cr2], DUALADC8_fAutoZero           ; Put the Integrator into Autozero mode
095F: 43 86 20 OR    REG[0x86],0x20     (0259)    or    reg[DUALADC8_bfADC2cr2], DUALADC8_fAutoZero           ; Put the Integrator into Autozero mode
                                        (0260) ENDIF
                                        (0261) 
0962: 43 83 10 OR    REG[0x83],0x10     (0262)    or   reg[DUALADC8_bfADC1cr3], DUALADC8_fFSW0                ; Put Integrator into reset
0965: 43 87 10 OR    REG[0x87],0x10     (0263)    or   reg[DUALADC8_bfADC2cr3], DUALADC8_fFSW0                ; Put Integrator into reset
                                        (0264) 
0968: 41 E1 EF AND   REG[0xE1],0xEF     (0265)    and   reg[DUALADC8_bfPWM16_INT_REG], ~DUALADC8_bfPWM16_Mask      ; Disable interrupts
096B: 41 E1 FB AND   REG[0xE1],0xFB     (0266)    and   reg[DUALADC8_bfCounter1_INT_REG], ~DUALADC8_bfCounter1_Mask
096E: 41 E1 DF AND   REG[0xE1],0xDF     (0267)    and   reg[DUALADC8_bfCounter2_INT_REG], ~DUALADC8_bfCounter2_Mask
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1
0971: 7F       RET                      (0269)    ret
                                        (0270) .ENDSECTION
                                        (0271) 
                                        (0272) .SECTION
                                        (0273) ;-----------------------------------------------------------------------------
                                        (0274) ;  FUNCTION NAME: DUALADC8_fIsData
                                        (0275) ;  FUNCTION NAME: DUALADC8_fIsDataAvailable
                                        (0276) ;
                                        (0277) ;  DESCRIPTION:
                                        (0278) ;    Returns flag to denote completion of an ADC conversion.
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;
                                        (0284) ;  RETURNS:
                                        (0285) ;     A returned data status A =: 0 no data available
                                        (0286) ;                             !=: 0 data available.
                                        (0287) ;
                                        (0288) ;  SIDE EFFECTS:
                                        (0289) ;    The A and X registers may be modified by this or future implementations
                                        (0290) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0291) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0292) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0293) ;    functions.
                                        (0294) ;          
                                        (0295) ;    Currently only the page pointer registers listed below are modified:
                                        (0296) ;          CUR_PP
                                        (0297) ;
                                        (0298)  DUALADC8_fIsData:
                                        (0299) _DUALADC8_fIsData:
                                        (0300)  DUALADC8_fIsDataAvailable:
                                        (0301) _DUALADC8_fIsDataAvailable:
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0303)    RAM_SETPAGE_CUR >DUALADC8_bfStatus
0972: 51 13    MOV   A,[0x13]           (0304)    mov   A, [DUALADC8_bfStatus]                       ; Get status byte
0974: 21 10    AND   A,0x10             (0305)    and   A, DUALADC8_fDATA_READY                      ; Mask off other bits
                                        (0306)    RAM_EPILOGUE RAM_USE_CLASS_4
0976: 7F       RET                      (0307)    ret
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) .SECTION
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;  FUNCTION NAME: DUALADC8_cGetData1ClearFlag
                                        (0313) ;  FUNCTION NAME: DUALADC8_cGetData1
                                        (0314) ;
                                        (0315) ;  DESCRIPTION:
                                        (0316) ;     Returns result data from channel one of the ADC.  If iGetData1ClearFlag
                                        (0317) ;     is called, the data ready flag will be cleared as well.
                                        (0318) ;
                                        (0319) ;-----------------------------------------------------------------------------
                                        (0320) ;
                                        (0321) ;  ARGUMENTS:  None
                                        (0322) ;
                                        (0323) ;  RETURNS:
                                        (0324) ;     A returns the ADC result for channel 1.
                                        (0325) ;
                                        (0326) ;  SIDE EFFECTS:
                                        (0327) ;    The A and X registers may be modified by this or future implementations
                                        (0328) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0329) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0330) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0331) ;    functions.
                                        (0332) ;          
                                        (0333) ;    Currently only the page pointer registers listed below are modified: 
                                        (0334) ;          CUR_PP
                                        (0335) ;
                                        (0336)  DUALADC8_cGetData1ClearFlag:
                                        (0337) _DUALADC8_cGetData1ClearFlag:
                                        (0338)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0339)    RAM_SETPAGE_CUR >DUALADC8_bfStatus   
0977: 26 13 EF AND   [0x13],0xEF        (0340)    and   [DUALADC8_bfStatus], ~DUALADC8_fDATA_READY  ; Clear Data ready bit
097A: 51 10    MOV   A,[0x10]           (0341)    mov   A, [(DUALADC8_iResult1 + LowByte)]
                                        (0342)    RAM_EPILOGUE RAM_USE_CLASS_4
097C: 7F       RET                      (0343)    ret
                                        (0344) 
                                        (0345)  DUALADC8_cGetData1:
                                        (0346) _DUALADC8_cGetData1:
                                        (0347)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0348)    RAM_SETPAGE_CUR >DUALADC8_bfStatus
097D: 51 10    MOV   A,[0x10]           (0349)    mov   A, [(DUALADC8_iResult1 + LowByte)]
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_4
097F: 7F       RET                      (0351)    ret
                                        (0352) .ENDSECTION
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: DUALADC8_cGetData2ClearFlag
                                        (0357) ;  FUNCTION NAME: DUALADC8_cGetData2
                                        (0358) ;
                                        (0359) ;  DESCRIPTION:
                                        (0360) ;     Returns result data from channel two of the ADC.  If iGetData2ClearFlag
                                        (0361) ;     is called, the data ready flag will be cleared as well.
                                        (0362) ;
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:  None
                                        (0366) ;
                                        (0367) ;  RETURNS:
                                        (0368) ;     A returns the ADC result for channel 2.
                                        (0369) ;
                                        (0370) ;  SIDE EFFECTS:
                                        (0371) ;    The A and X registers may be modified by this or future implementations
                                        (0372) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0374) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0375) ;    functions.
                                        (0376) ;          
                                        (0377) ;    Currently only the page pointer registers listed below are modified:
                                        (0378) ;          CUR_PP
                                        (0379) ;
                                        (0380) ;  THEORY of OPERATION or PROCEDURE:
                                        (0381) ;
                                        (0382) ;-----------------------------------------------------------------------------
                                        (0383)  DUALADC8_cGetData2ClearFlag:
                                        (0384) _DUALADC8_cGetData2ClearFlag:
                                        (0385)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0386)    RAM_SETPAGE_CUR >DUALADC8_bfStatus
0980: 26 13 EF AND   [0x13],0xEF        (0387)    and   [DUALADC8_bfStatus], ~DUALADC8_fDATA_READY  ; Clear Data ready bit
0983: 51 12    MOV   A,[0x12]           (0388)    mov   A, [(DUALADC8_iResult2 + LowByte)]
                                        (0389)    RAM_EPILOGUE RAM_USE_CLASS_4
0985: 7F       RET                      (0390)    ret
                                        (0391) 
                                        (0392)  DUALADC8_cGetData2:
                                        (0393) _DUALADC8_cGetData2:
                                        (0394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0395)    RAM_SETPAGE_CUR >DUALADC8_bfStatus
0986: 51 12    MOV   A,[0x12]           (0396)    mov   A, [(DUALADC8_iResult2 + LowByte)]
                                        (0397)    RAM_EPILOGUE RAM_USE_CLASS_4
0988: 7F       RET                      (0398)    ret
                                        (0399) .ENDSECTION
                                        (0400) 
                                        (0401) .SECTION
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;  FUNCTION NAME: DUALADC8_ClearFlag
                                        (0404) ;
                                        (0405) ;  DESCRIPTION:
                                        (0406) ;     Clears the data ready flag.
                                        (0407) ;
                                        (0408) ;-----------------------------------------------------------------------------
                                        (0409) ;
                                        (0410) ;  ARGUMENTS: None
                                        (0411) ;
                                        (0412) ;  RETURNS:  None
                                        (0413) ;
                                        (0414) ;  SIDE EFFECTS:
                                        (0415) ;    The A and X registers may be modified by this or future implementations
                                        (0416) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0417) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0418) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0419) ;    functions.
                                        (0420) ;          
                                        (0421) ;    Currently only the page pointer registers listed below are modified:
                                        (0422) ;          CUR_PP
                                        (0423) ;
                                        (0424) ;  THEORY of OPERATION or PROCEDURE:
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427)  DUALADC8_ClearFlag:
                                        (0428) _DUALADC8_ClearFlag:
                                        (0429)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0430)    RAM_SETPAGE_CUR >DUALADC8_bfStatus
0989: 26 13 EF AND   [0x13],0xEF        (0431)    and   [DUALADC8_bfStatus], ~DUALADC8_fDATA_READY  ; Clear Data ready bit
                                        (0432)    RAM_EPILOGUE RAM_USE_CLASS_4
098C: 7F       RET                      (0433)    ret
                                        (0434) .ENDSECTION
                                        (0435) 
                                        (0436) .SECTION
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;  FUNCTION NAME: DUALADC8_SetCalcTime
                                        (0439) ;
                                        (0440) ;  DESCRIPTION:
                                        (0441) ;    Set the CalcTime of the ADC.  Adds this value to the ADC PWM period
                                        (0442) ;
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;
                                        (0445) ;  ARGUMENTS:
                                        (0446) ;    X:A  16-Bit Calc Value
                                        (0447) ;
                                        (0448) ;  RETURNS:
                                        (0449) ;
                                        (0450) ;  SIDE EFFECTS:
                                        (0451) ;    The A and X registers may be modified by this or future implementations
                                        (0452) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0453) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0454) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0455) ;    functions.
                                        (0456) ;          
                                        (0457) ;    Currently only the page pointer registers listed below are modified: 
                                        (0458) ;          CUR_PP
                                        (0459) ;
                                        (0460) ;  THEORY of OPERATION or PROCEDURE:
                                        (0461) ;
                                        (0462) ;-----------------------------------------------------------------------------
                                        (0463)  DUALADC8_SetCalcTime:
                                        (0464) _DUALADC8_SetCalcTime:
                                        (0465)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0466)    RAM_SETPAGE_CUR >DUALADC8_iCalcTime
098D: 53 3C    MOV   [prozess+32],A     (0467)    mov  [DUALADC8_iCalcTime+LowByte],A
098F: 5A 3B    MOV   [prozess+31],X     (0468)    mov  [DUALADC8_iCalcTime+HighByte],X
                                        (0469)    RAM_EPILOGUE RAM_USE_CLASS_4
0991: 7F       RET                      (0470)    ret
                                        (0471) 
                                        (0472) .ENDSECTION
                                        (0473) 
                                        (0474) DUALADC8_API_End:
                                        (0475) 
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0992: 7A 19    DEC   [0x19]             (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
0994: C0 02    JC    0x0997             (0095)     jc endif1 ; no underflow
0996: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0997: 3C 1A 00 CMP   [0x1A],0x0         (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
099A: B0 12    JNZ   0x09AD             (0100)     jnz endif2  ;leaving reset mode
099C: 08       PUSH  A                  (0101)     push A                            ;read decimator
099D: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
099F: 53 17    MOV   [0x17],A           (0103)     mov  [iTemp + LowByte],A
09A1: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
09A3: 53 16    MOV   [0x16],A           (0105)     mov  [iTemp + HighByte], A
09A5: 18       POP   A                  (0106)     pop A
09A6: 55 1A 01 MOV   [0x1A],0x1         (0107)     mov [ADCINC_fMode],1
09A9: 55 19 FF MOV   [0x19],0xFF        (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
09AC: 7E       RETI                     (0109)     reti
09AD: 43 8A 20 OR    REG[0x8A],0x20     
09B0: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
09B3: 08       PUSH  A                  (0113)     push A
09B4: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
09B6: 12 17    SUB   A,[0x17]           (0115)     sub  A,[iTemp + LowByte]
09B8: 53 17    MOV   [0x17],A           (0116)     mov  [iTemp +LowByte],A
09BA: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
09BC: 1A 16    SBB   A,[0x16]           (0118)     sbb  A,[iTemp + HighByte]
09BE: 67       ASR   A                  (0119)     asr  A
09BF: 6E 17    RRC   [0x17]             (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_9_OR_MORE_BITS
09C1: 01 20    ADD   A,0x20             (0124)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0125) ELSE
                                        (0126)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
                                        (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_8_OR_MORE_BITS
09C3: 39 40    CMP   A,0x40             (0131)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0132) if3: 
09C5: B0 05    JNZ   0x09CB             (0133)     jnz endif3 ;overflow
09C7: 78       DEC   A                  (0134)     dec A
09C8: 55 17 FF MOV   [0x17],0xFF        (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_SIGNED_DATA
                                        (0145) IF ADCINC_9_OR_MORE_BITS
09CB: 11 20    SUB   A,0x20             (0146)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
09CD: 5F 15 17 MOV   [0x15],[0x17]      (0152)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
09D0: 53 14    MOV   [0x14],A           (0153)     mov  [ADCINC_iResult + HighByte],A
09D2: 55 18 01 MOV   [0x18],0x1         (0154)     mov  [ADCINC_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167)     ;---------------------------------------------------
                                        (0168)     ; Insert your custom code above this banner
                                        (0169)     ;---------------------------------------------------
                                        (0170)     ;@PSoC_UserCode_END@ (Do not change this line.)
09D5: 18       POP   A                  (0171)     pop A
09D6: 3C 1B 00 CMP   [0x1B],0x0         (0172)     cmp [ADCINC_bNumSamples],0
                                        (0173) if5: 
09D9: B0 0E    JNZ   0x09E8             (0174)     jnz endif5 ; Number of samples is zero
09DB: 55 1A 00 MOV   [0x1A],0x0         (0175)     mov [ADCINC_fMode],0
09DE: 55 19 00 MOV   [0x19],0x0         (0176)     mov [ADCINC_bState],0
09E1: 41 8B EF AND   REG[0x8B],0xEF     
09E4: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0177)     ADCINC_ENABLE_INTEGRATOR_M
09E7: 7E       RETI                     (0178)     reti       
                                        (0179) endif5:
09E8: 7A 1B    DEC   [0x1B]             (0180)     dec [ADCINC_bNumSamples]
                                        (0181) if6:
09EA: A0 0E    JZ    0x09F9             (0182)     jz endif6  ; count not zero
09EC: 55 1A 00 MOV   [0x1A],0x0         (0183)     mov [ADCINC_fMode],0
09EF: 55 19 00 MOV   [0x19],0x0         (0184)     mov [ADCINC_bState],0
09F2: 41 8B EF AND   REG[0x8B],0xEF     
09F5: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0185)     ADCINC_ENABLE_INTEGRATOR_M
09F8: 7E       RETI                     (0186)     reti       
09F9: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0187) endif6:
                                        (0188)     ;All samples done
                                        (0189)     ADCINC_STOPADC_M
09FC: 7E       RETI                     (0190)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_Start:
                                        (0094) _ADCINC_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
09FD: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
0A00: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0A02: 43 8A 20 OR    REG[0x8A],0x20     
0A05: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
0A08: 62 39 FF MOV   REG[0x39],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0A0B: 43 3B 01 OR    REG[0x3B],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0A0E: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_SetPower:
                                        (0122) _ADCINC_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
0A0F: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
0A10: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
0A12: 08       PUSH  A                  (0126)    push A
0A13: 5D 8B    MOV   A,REG[0x8B]        (0127)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0A15: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
0A17: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
0A19: 60 8B    MOV   REG[0x8B],A        (0130)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0A1B: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
0A1C: 7F       RET                      (0133)    ret
0A1D: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_Stop:
                                        (0153) _ADCINC_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_STOPADC_M
0A20: 41 8B FC AND   REG[0x8B],0xFC     (0156)    and  reg[ADCINC_AtoDcr3], ~03h
0A23: 41 3B FE AND   REG[0x3B],0xFE     (0157)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
0A26: 7F       RET                      (0159)    ret
0A27: 41 8B EF AND   REG[0x8B],0xEF     
0A2A: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_GetSamples:
                                        (0179) _ADCINC_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0182)    ADCINC_ENABLE_INTEGRATOR_M
0A2D: 55 1A 00 MOV   [0x1A],0x0         (0183)    mov [ADCINC_fMode],0
0A30: 55 19 00 MOV   [0x19],0x0         (0184)    mov [ADCINC_bState],0
0A33: 53 1B    MOV   [0x1B],A           (0185)    mov [ADCINC_bNumSamples],A
0A35: 5D 3A    MOV   A,REG[0x3A]        (0186)    mov A, reg[ADCINC_PWMdr2]
0A37: B0 04    JNZ   0x0A3C             (0187)    jnz  .SkipPulseWrite
0A39: 62 3A 01 MOV   REG[0x3A],0x1      (0188)    mov reg[ADCINC_PWMdr2], 1
0A3C: 62 DB BF MOV   REG[0xDB],0xBF     
0A3F: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
0A42: 7F       RET                      (0192)    ret
0A43: 41 E1 BF AND   REG[0xE1],0xBF     
0A46: 43 8A 20 OR    REG[0x8A],0x20     
0A49: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_StopADC:
                                        (0214) _ADCINC_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_STOPADC_M
                                        (0217)    ADCINC_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
0A4C: 7F       RET                      (0219)  ret
0A4D: 51 18    MOV   A,[0x18]           
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_fIsDataAvailable:
                                        (0238) _ADCINC_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
0A4F: 7F       RET                      (0242)    ret
0A50: 55 18 00 MOV   [0x18],0x0         
0A53: 58 14    MOV   X,[0x14]           
0A55: 51 15    MOV   A,[0x15]           
0A57: 3C 18 00 CMP   [0x18],0x0         
0A5A: BF F5    JNZ   _ADCINC_wClearFlagGetData|_ADCINC_iClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0249) ;                  ADCINC_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_iClearFlagGetData:
                                        (0264) _ADCINC_iClearFlagGetData:
                                        (0265)  ADCINC_wClearFlagGetData:
                                        (0266) _ADCINC_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
0A5C: 7F       RET                      (0270)    ret
0A5D: 55 18 00 MOV   [0x18],0x0         
0A60: 51 15    MOV   A,[0x15]           
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0277) ;                  ADCINC_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_cClearFlagGetData:
                                        (0290) _ADCINC_cClearFlagGetData:
                                        (0291)  ADCINC_bClearFlagGetData:
                                        (0292) _ADCINC_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
0A62: 7F       RET                      (0296)    ret
0A63: 58 14    MOV   X,[0x14]           
0A65: 51 15    MOV   A,[0x15]           
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0301) ;                  ADCINC_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_iGetData:
                                        (0315) _ADCINC_iGetData:
                                        (0316)  ADCINC_wGetData:
                                        (0317) _ADCINC_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
0A67: 7F       RET                      (0321)    ret
0A68: 51 15    MOV   A,[0x15]           
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0326) ;                  ADCINC_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_bGetData:
                                        (0340) _ADCINC_bGetData:
                                        (0341)  ADCINC_cGetData:
                                        (0342) _ADCINC_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
0A6A: 7F       RET                      (0346)    ret
0A6B: 51 18    MOV   A,[0x18]           
0A6D: 55 18 00 MOV   [0x18],0x0         
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_fClearFlag:
                                        (0366) _ADCINC_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
0A70: 7F       RET                      (0370)    ret
0A71: 60 3A    MOV   REG[0x3A],A        
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_WritePulseWidth:
                                        (0391) _ADCINC_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
0A73: 7F       RET                      (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC.asm
FILE: C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
(0001) /********************************************************
(0002) * C main-Funktion										*
(0003) * Programm: Seegangskompensation bei Krahnanlagen		*
(0004) * Controler: CY8C27446-24PXI							*
(0005) * 														*
(0006) *I/O-Konfiguration:										*
(0007) * LCD 			-> Port 2								*
(0008) * Selbsttest 	-> 1.1			 						*
(0009) * IN1		 	-> 1.2									*
(0010) * IN2			-> 1.3									*
(0011) * PWM 1			-> 1.4									*
(0012) * Beschleunigung-> 0.1									*
(0013) * Entfernung 	-> 0.4									*
(0014) * Sollwert		-> 0.5									*
(0015) * 														*
(0016) *Zusätzlich definierte Prüfixe zur Variablenbenennung	*
(0017) *Mittels Ungaricher Notation nach Charles Simonyi:		*
(0018) *pd	-> Prozessbezogene Daten							*
(0019) *ko	-> Konstanten										*
(0020) *hi	-> Interne Hilfsgrößen								*
(0021) *in	-> Datentyp Integer									*
(0022) ********************************************************/
(0023) 
(0024) #include <stdio.h>
(0025) #include <m8c.h>        
(0026) #include "PSoCAPI.h"    
(0027) 
(0028) // Präprozessor:Für testzwecke 
(0029) // #defein Test nicht auskomentieren:
(0030) // #define TEST
(0031) 
(0032) // Funktionsprototypen:
(0033) void LCDansteuern(char);
(0034) void Dateneinlesen(void);
(0035) void Ausgangansteuern(char);
(0036) 
(0037) // Präprozessor: kompiliere Funktion nur wenn Test
(0038) #ifdef TEST
(0039) 	void test(char);
(0040) #endif 
(0041) 
(0042) // globale Structur zur Übergabe der Prozessdaten:
(0043) struct 
(0044)    {	  						
(0045) 	char pdchBechleunigung, pdchEntfernung;			
(0046) 	char pdchSollwert;								
(0047) 	char pdchPulsweite;
(0048)     } prozess;
(0049) 
(0050) // Reguläre mani Funktion
(0051) void main(void)
(0052) 	{
__UserModules_end|_main|__text_start|_main:
  kochPeriodendauer    --> X+4
  kochKS               --> X+3
  kochKP               --> X+2
  hichBeschleunigungssumme --> X+1
  hichAusgangswert     --> X+0
    0A74: 10       PUSH  X
    0A75: 4F       MOV   X,SP
    0A76: 38 05    ADD   SP,0x5
(0053) 	// Difinition der Konstanten
(0054) 	char kochPeriodendauer = 50;					
    0A78: 56 04 32 MOV   [X+4],0x32
(0055) 	char kochKP;
(0056) 	char kochKS;
(0057) 		
(0058) 	// Variablendeklration
(0059) 	char hichAusgangswert;							
(0060) 	char hichBeschleunigungssumme;  
(0061) 		
(0062) 	// Initialisierung des Controlers
(0063) 	
(0064) 	//globale Interrupts Freigeben
(0065) 	M8C_EnableGInt;                     				
    0A7B: 71 01    OR    F,0x1
(0066)   	
(0067) 	// Initialisieren des LCD-Displays
(0068) 	LCD_1_Start();                 					
    0A7D: 10       PUSH  X
    0A7E: 7C 06 A9 LCALL _LCD_1_Init|_LCD_1_Start|LCD_1_Init|LCD_1_Start
    0A81: 20       POP   X
(0069)    	
(0070) 	// Initialisieren des PWM-Moduls
(0071) 	PWM8_1_WritePeriod(kochPeriodendauer);        	                    
    0A82: 10       PUSH  X
    0A83: 52 04    MOV   A,[X+4]
    0A85: 7C 04 DA LCALL _PWM8_1_WritePeriod
(0072)     PWM8_1_Start();
    0A88: 7C 04 D2 LCALL _PWM8_1_Start
(0073) 	
(0074) 	// Initialisieren der Verstärker
(0075) 	PGA_1_SetGain(PGA_1_G0_12);						
    0A8B: 50 10    MOV   A,0x10
    0A8D: 7C 05 82 LCALL _PGA_1_SetGain
(0076) 	PGA_2_SetGain(PGA_2_G0_12);
    0A90: 50 10    MOV   A,0x10
    0A92: 7C 05 4E LCALL _PGA_2_SetGain
(0077) 	PGA_3_SetGain(PGA_3_G0_12);
    0A95: 50 10    MOV   A,0x10
    0A97: 7C 05 1A LCALL _PGA_3_SetGain
(0078) 	
(0079) 	PGA_1_Start(PGA_1_LOWPOWER);
    0A9A: 50 01    MOV   A,0x1
    0A9C: 7C 05 74 LCALL PGA_1_SetPower|_PGA_1_Start|_PGA_1_SetPower|PGA_1_Start
(0080) 	PGA_2_Start(PGA_2_LOWPOWER);
    0A9F: 50 01    MOV   A,0x1
    0AA1: 7C 05 40 LCALL _PGA_2_SetPower|_PGA_2_Start|PGA_2_Start|PGA_2_SetPower
(0081) 	PGA_3_Start(PGA_3_LOWPOWER);	
    0AA4: 50 01    MOV   A,0x1
    0AA6: 7C 05 0C LCALL PGA_3_SetPower|_PGA_3_Start|_PGA_3_SetPower|PGA_3_Start
(0082) 	
(0083) 	// Initialisieren des Dualen AD-Wandlers
(0084) 	// für Entfernung und Beschleunigung
(0085) 	DUALADC8_Start(DUALADC8_HIGHPOWER); 			
    0AA9: 50 03    MOV   A,0x3
    0AAB: 7C 08 F3 LCALL _DUALADC8_SetPower|_DUALADC8_Start|DUALADC8_Start|DUALADC8_SetPower
(0086)    	DUALADC8_SetCalcTime(100);          			
    0AAE: 57 00    MOV   X,0x0
    0AB0: 50 64    MOV   A,0x64
    0AB2: 7C 09 8D LCALL _DUALADC8_SetCalcTime
(0087)    	DUALADC8_GetSamples(); 
    0AB5: 7C 09 14 LCALL _DUALADC8_GetSamples
(0088) 	
(0089) 	// Initialisieren des AD-Wandlers
(0090) 	// für den Sollwert
(0091) 	ADCINC_Start(ADCINC_HIGHPOWER);      			
    0AB8: 50 03    MOV   A,0x3
    0ABA: 7C 09 FD LCALL _ADCINC_Start
(0092) 	ADCINC_GetSamples(0);                 			
    0ABD: 50 00    MOV   A,0x0
    0ABF: 7C 0A 27 LCALL _ADCINC_GetSamples
    0AC2: 20       POP   X
(0093) 	
(0094) 	//Initialisieren der Digitalen Ausgänge
(0095) 	IN1_Start;	
(0096) 	IN2_Start;
(0097) 	SELBSTTEST_Start;
    0AC3: 80 47    JMP   0x0B0B
(0098) 	// Präprozessor: kompiliere whileschleife wenn kein test
(0099) 	#ifndef TEST
(0100) 		
(0101) 		// Endlosschleife
(0102) 		while(1) 
(0103) 			{
(0104) 			// Daten Einlesen
(0105) 			Dateneinlesen();
    0AC5: 90 7C    CALL  _Dateneinlesen
(0106) 			                         
(0107) 			// Parameter Berechnen
(0108) 			
(0109) 			hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
    0AC7: 51 1C    MOV   A,[prozess]
    0AC9: 05 01    ADD   [X+1],A
(0110) 			
(0111) 			hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
    0ACB: 52 03    MOV   A,[X+3]
    0ACD: 08       PUSH  A
    0ACE: 50 01    MOV   A,0x1
    0AD0: 08       PUSH  A
    0AD1: 7C 0B A8 LCALL 0x0BA8
    0AD4: 18       POP   A
    0AD5: 53 08    MOV   [__r0],A
    0AD7: 38 FF    ADD   SP,0xFF
    0AD9: 52 01    MOV   A,[X+1]
    0ADB: 60 E8    MOV   REG[0xE8],A
    0ADD: 51 08    MOV   A,[__r0]
    0ADF: 60 E9    MOV   REG[0xE9],A
    0AE1: 40       NOP   
    0AE2: 5D EB    MOV   A,REG[0xEB]
    0AE4: 53 08    MOV   [__r0],A
    0AE6: 51 1E    MOV   A,[prozess+2]
    0AE8: 12 1C    SUB   A,[prozess]
    0AEA: 53 06    MOV   [__r2],A
    0AEC: 52 02    MOV   A,[X+2]
    0AEE: 60 E8    MOV   REG[0xE8],A
    0AF0: 51 06    MOV   A,[__r2]
    0AF2: 60 E9    MOV   REG[0xE9],A
    0AF4: 40       NOP   
    0AF5: 5D EB    MOV   A,REG[0xEB]
    0AF7: 12 08    SUB   A,[__r0]
    0AF9: 54 00    MOV   [X+0],A
(0112) 								- 1 / kochKS * hichBeschleunigungssumme;
(0113) 			//TODO: Korekturfaktor Einfügen 
(0114) 			prozess.pdchPulsweite = hichAusgangswert; 
    0AFB: 52 00    MOV   A,[X+0]
    0AFD: 53 1F    MOV   [prozess+3],A
(0115) 			
(0116) 			Ausgangansteuern(hichAusgangswert);
    0AFF: 52 00    MOV   A,[X+0]
    0B01: 08       PUSH  A
    0B02: 90 72    CALL  _Ausgangansteuern
(0117) 			LCDansteuern(prozess.pdchEntfernung);
    0B04: 51 1D    MOV   A,[prozess+1]
    0B06: 08       PUSH  A
    0B07: 90 09    CALL  _LCDansteuern
    0B09: 38 FE    ADD   SP,0xFE
(0118) 			
(0119) 		};
    0B0B: 8F B9    JMP   0x0AC5
    0B0D: 38 FB    ADD   SP,0xFB
    0B0F: 20       POP   X
    0B10: 8F FF    JMP   0x0B10
(0120) 	// Präprozessor: kompiliere whileschleife wenn test;
(0121) 	#else
(0122) 		
(0123) 			
(0124) 		// whileschleife zu testzwecken
(0125) 		// Konstante zur verweildauer in der schleife
(0126) 		while (1)
(0127) 			{
(0128) 				// Daten Einlesen
(0129) 				void Dateneinlesen(void);
(0130) 				// Daten Nacheinander auf LCD Ausgeeben
(0131) 				test(prozess.pdchBechleunigung);
(0132) 				test(prozess.pdchEntfernung);
(0133) 				test(prozess.pdchSollwert);			
(0134) 			};
(0135) 			
(0136) 	// Präprozessor: Ende der Verzweifung
(0137) 	#endif 
(0138) }
(0139) 
(0140) // Funktionen:
(0141) 	
(0142) void LCDansteuern(char hichdata)
(0143) 	{
_LCDansteuern:
  rgchErstzeile        --> X+0
  hichdata             --> X-4
    0B12: 10       PUSH  X
    0B13: 4F       MOV   X,SP
    0B14: 38 0C    ADD   SP,0xC
(0144) 	char rgchErstzeile[12];
(0145) 	// LCD Ansteuern 
(0146) 	csprintf(rgchErstzeile,"Abstand:%c",hichdata);
    0B16: 52 FC    MOV   A,[X-4]
    0B18: 53 07    MOV   [__r1],A
    0B1A: 50 00    MOV   A,0x0
    0B1C: 08       PUSH  A
    0B1D: 51 07    MOV   A,[__r1]
    0B1F: 08       PUSH  A
    0B20: 50 01    MOV   A,0x1
    0B22: 08       PUSH  A
    0B23: 50 50    MOV   A,0x50
    0B25: 08       PUSH  A
    0B26: 50 00    MOV   A,0x0
    0B28: 08       PUSH  A
    0B29: 10       PUSH  X
    0B2A: 7C 0F 2C LCALL _csprintf
    0B2D: 38 FA    ADD   SP,0xFA
(0147) 	LCD_1_Position(1,0);
    0B2F: 10       PUSH  X
    0B30: 57 00    MOV   X,0x0
    0B32: 50 01    MOV   A,0x1
    0B34: 7C 07 19 LCALL _LCD_1_Position
    0B37: 20       POP   X
(0148) 	LCD_1_PrString(rgchErstzeile);
    0B38: 10       PUSH  X
    0B39: 51 08    MOV   A,[__r0]
    0B3B: 7C 05 E4 LCALL _LCD_1_PrString
    0B3E: 20       POP   X
    0B3F: 38 F4    ADD   SP,0xF4
    0B41: 20       POP   X
    0B42: 7F       RET   
(0149) 	}
(0150) 	
(0151) void Dateneinlesen(void)
(0152) 	{	
(0153) 	// Wenn Sollwertdaten bereit sind
(0154) 	if(ADCINC_fIsDataAvailable() != 0)
_Dateneinlesen:
    0B43: 10       PUSH  X
    0B44: 7C 0A 4D LCALL _ADCINC_fIsDataAvailable
    0B47: 20       POP   X
    0B48: 39 00    CMP   A,0x0
    0B4A: A0 08    JZ    0x0B53
(0155) 			
(0156) 		// Einlesen des Sollwertes
(0157)        	// data ready flag zurüvksetzen	
(0158) 		prozess.pdchSollwert = ADCINC_cClearFlagGetData();		
    0B4C: 10       PUSH  X
    0B4D: 7C 0A 5D LCALL _ADCINC_bClearFlagGetData|ADCINC_cClearFlagGetData|_ADCINC_cClearFlagGetData|ADCINC_bClearFlagGetData
    0B50: 20       POP   X
    0B51: 53 1E    MOV   [prozess+2],A
(0159)               	   
(0160)     	// Auf Entfernung und Position Warten
(0161) 		while(DUALADC8_fIsDataAvailable == 0);    		
    0B53: 50 96    MOV   A,0x96
    0B55: 10       PUSH  X
    0B56: 58 07    MOV   X,[__r1]
    0B58: 08       PUSH  A
    0B59: 28       ROMX  
    0B5A: 53 08    MOV   [__r0],A
    0B5C: 18       POP   A
    0B5D: 75       INC   X
    0B5E: 09 00    ADC   A,0x0
    0B60: 28       ROMX  
    0B61: 20       POP   X
    0B62: 3C 08 00 CMP   [__r0],0x0
    0B65: AF ED    JZ    0x0B53
(0162)    		// Einlesen der Beschleunigung
(0163) 		prozess.pdchBechleunigung = DUALADC8_cGetData1();      	
    0B67: 10       PUSH  X
    0B68: 7C 09 7D LCALL _DUALADC8_cGetData1
    0B6B: 20       POP   X
    0B6C: 53 1C    MOV   [prozess],A
(0164)     	
(0165) 		// Einlesen der Entfernung
(0166)         // data ready flag zurüvksetzen         
(0167) 		prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();	 	
    0B6E: 10       PUSH  X
    0B6F: 7C 09 80 LCALL _DUALADC8_cGetData2ClearFlag
    0B72: 20       POP   X
    0B73: 53 1D    MOV   [prozess+1],A
    0B75: 7F       RET   
(0168) 	}
(0169) 
(0170) void Ausgangansteuern(char hichAusgangswert)
(0171) 	{
_Ausgangansteuern:
  hichAusgangswert     --> X-4
    0B76: 10       PUSH  X
    0B77: 4F       MOV   X,SP
(0172) 		// linksdrehend 
(0173) 		if (hichAusgangswert > 0){				
    0B78: 50 00    MOV   A,0x0
    0B7A: 3B FC    CMP   A,[X-4]
    0B7C: D0 0A    JNC   0x0B87
(0174) 			IN1_On;
(0175) 			IN2_Off;
(0176) 			PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
    0B7E: 10       PUSH  X
    0B7F: 51 1F    MOV   A,[prozess+3]
    0B81: 7C 04 DD LCALL _PWM8_1_WritePulseWidth
    0B84: 20       POP   X
(0177) 		}
    0B85: 80 19    JMP   0x0B9F
(0178) 		// rechtsdrehend
(0179) 		else if (hichAusgangswert < 0){				
    0B87: 3D FC 00 CMP   [X-4],0x0
    0B8A: D0 0D    JNC   0x0B98
(0180) 			IN1_On;
(0181) 			IN2_Off;
(0182) 			PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
    0B8C: 51 1F    MOV   A,[prozess+3]
    0B8E: 73       CPL   A
    0B8F: 11 FF    SUB   A,0xFF
    0B91: 10       PUSH  X
    0B92: 7C 04 DD LCALL _PWM8_1_WritePulseWidth
    0B95: 20       POP   X
(0183) 		}
    0B96: 80 08    JMP   0x0B9F
(0184) 		// Bremsen durch Kurzschluss
(0185) 		else{				
(0186) 			IN1_On;
(0187) 			IN2_On;
(0188) 			PWM8_1_WritePulseWidth(0);
    0B98: 10       PUSH  X
    0B99: 50 00    MOV   A,0x0
    0B9B: 7C 04 DD LCALL _PWM8_1_WritePulseWidth
    0B9E: 20       POP   X
(0189) 		}
    0B9F: 20       POP   X
(0190) 	}	
(0191) // Präprozessor: kompiliere Funktion nur wenn Test
(0192) #ifdef TEST
(0193) 	// Ausgabe der Testdaten auf LCD-Display
(0194) 	void test(char hichdata)
(0195) 		{
(0196) 		// gibt 99999 mal LCD Aus
(0197) 		int iin;
(0198) 		for (iin = 0; iin <= 99999; iin ++)
(0199) 			{
(0200) 			LCDansteuern(hichdata);	
(0201) 			}
(0202) 		}
(0203) #endif     0BA0: 7F       RET   
__plcall:
    0BFC: 53 02    MOV   [__rX],A
    0BFE: 28       ROMX  
    0BFF: 08       PUSH  A
    0C00: 51 02    MOV   A,[__rX]
    0C02: 75       INC   X
    0C03: 09 00    ADC   A,0x0
    0C05: 28       ROMX  
    0C06: 08       PUSH  A
    0C07: 7F       RET   
_itoa:
    0C08: 10       PUSH  X
    0C09: 4F       MOV   X,SP
    0C0A: 38 09    ADD   SP,0x9
    0C0C: 52 FA    MOV   A,[X-6]
    0C0E: 54 03    MOV   [X+3],A
    0C10: 52 F9    MOV   A,[X-7]
    0C12: 54 02    MOV   [X+2],A
    0C14: 3D F9 00 CMP   [X-7],0x0
    0C17: B0 22    JNZ   0x0C3A
    0C19: 3D FA 00 CMP   [X-6],0x0
    0C1C: B0 1D    JNZ   0x0C3A
    0C1E: 52 FC    MOV   A,[X-4]
    0C20: 53 07    MOV   [__r1],A
    0C22: 50 30    MOV   A,0x30
    0C24: 3F 07    MVI   [__r1],A
    0C26: 52 FC    MOV   A,[X-4]
    0C28: 01 01    ADD   A,0x1
    0C2A: 53 07    MOV   [__r1],A
    0C2C: 50 00    MOV   A,0x0
    0C2E: 3F 07    MVI   [__r1],A
    0C30: 52 FC    MOV   A,[X-4]
    0C32: 53 07    MOV   [__r1],A
    0C34: 52 FB    MOV   A,[X-5]
    0C36: 53 08    MOV   [__r0],A
    0C38: 81 48    JMP   0x0D81
    0C3A: 52 FA    MOV   A,[X-6]
    0C3C: 11 00    SUB   A,0x0
    0C3E: 52 F9    MOV   A,[X-7]
    0C40: 31 80    XOR   A,0x80
    0C42: 19 80    SBB   A,0x80
    0C44: D0 26    JNC   0x0C6B
    0C46: 3D F7 00 CMP   [X-9],0x0
    0C49: B0 21    JNZ   0x0C6B
    0C4B: 3D F8 0A CMP   [X-8],0xA
    0C4E: B0 1C    JNZ   0x0C6B
    0C50: 56 06 01 MOV   [X+6],0x1
    0C53: 52 03    MOV   A,[X+3]
    0C55: 73       CPL   A
    0C56: 53 07    MOV   [__r1],A
    0C58: 52 02    MOV   A,[X+2]
    0C5A: 73       CPL   A
    0C5B: 53 08    MOV   [__r0],A
    0C5D: 51 07    MOV   A,[__r1]
    0C5F: 01 01    ADD   A,0x1
    0C61: 54 03    MOV   [X+3],A
    0C63: 51 08    MOV   A,[__r0]
    0C65: 09 00    ADC   A,0x0
    0C67: 54 02    MOV   [X+2],A
    0C69: 80 04    JMP   0x0C6E
    0C6B: 56 06 00 MOV   [X+6],0x0
    0C6E: 52 FC    MOV   A,[X-4]
    0C70: 54 01    MOV   [X+1],A
    0C72: 52 F7    MOV   A,[X-9]
    0C74: 08       PUSH  A
    0C75: 52 F8    MOV   A,[X-8]
    0C77: 08       PUSH  A
    0C78: 52 02    MOV   A,[X+2]
    0C7A: 08       PUSH  A
    0C7B: 52 03    MOV   A,[X+3]
    0C7D: 08       PUSH  A
    0C7E: 7C 0B A1 LCALL 0x0BA1
    0C81: 38 FE    ADD   SP,0xFE
    0C83: 18       POP   A
    0C84: 53 07    MOV   [__r1],A
    0C86: 18       POP   A
    0C87: 53 08    MOV   [__r0],A
    0C89: 51 07    MOV   A,[__r1]
    0C8B: 54 08    MOV   [X+8],A
    0C8D: 51 08    MOV   A,[__r0]
    0C8F: 54 07    MOV   [X+7],A
    0C91: 50 09    MOV   A,0x9
    0C93: 13 08    SUB   A,[X+8]
    0C95: 52 07    MOV   A,[X+7]
    0C97: 31 80    XOR   A,0x80
    0C99: 53 02    MOV   [__rX],A
    0C9B: 50 80    MOV   A,0x80
    0C9D: 1A 02    SBB   A,[__rX]
    0C9F: C0 1D    JC    0x0CBD
    0CA1: 52 01    MOV   A,[X+1]
    0CA3: 53 07    MOV   [__r1],A
    0CA5: 52 00    MOV   A,[X+0]
    0CA7: 53 08    MOV   [__r0],A
    0CA9: 51 07    MOV   A,[__r1]
    0CAB: 01 01    ADD   A,0x1
    0CAD: 54 01    MOV   [X+1],A
    0CAF: 51 08    MOV   A,[__r0]
    0CB1: 09 00    ADC   A,0x0
    0CB3: 54 00    MOV   [X+0],A
    0CB5: 52 08    MOV   A,[X+8]
    0CB7: 01 30    ADD   A,0x30
    0CB9: 3F 07    MVI   [__r1],A
    0CBB: 80 1B    JMP   0x0CD7
    0CBD: 52 01    MOV   A,[X+1]
    0CBF: 53 07    MOV   [__r1],A
    0CC1: 52 00    MOV   A,[X+0]
    0CC3: 53 08    MOV   [__r0],A
    0CC5: 51 07    MOV   A,[__r1]
    0CC7: 01 01    ADD   A,0x1
    0CC9: 54 01    MOV   [X+1],A
    0CCB: 51 08    MOV   A,[__r0]
    0CCD: 09 00    ADC   A,0x0
    0CCF: 54 00    MOV   [X+0],A
    0CD1: 52 08    MOV   A,[X+8]
    0CD3: 01 57    ADD   A,0x57
    0CD5: 3F 07    MVI   [__r1],A
    0CD7: 52 F7    MOV   A,[X-9]
    0CD9: 08       PUSH  A
    0CDA: 52 F8    MOV   A,[X-8]
    0CDC: 08       PUSH  A
    0CDD: 52 02    MOV   A,[X+2]
    0CDF: 08       PUSH  A
    0CE0: 52 03    MOV   A,[X+3]
    0CE2: 08       PUSH  A
    0CE3: 7C 0B A1 LCALL 0x0BA1
    0CE6: 18       POP   A
    0CE7: 54 03    MOV   [X+3],A
    0CE9: 18       POP   A
    0CEA: 54 02    MOV   [X+2],A
    0CEC: 38 FE    ADD   SP,0xFE
    0CEE: 3D 02 00 CMP   [X+2],0x0
    0CF1: BF 80    JNZ   0x0C72
    0CF3: 3D 03 00 CMP   [X+3],0x0
    0CF6: BF 7B    JNZ   0x0C72
    0CF8: 3D 06 00 CMP   [X+6],0x0
    0CFB: A0 19    JZ    0x0D15
    0CFD: 52 01    MOV   A,[X+1]
    0CFF: 53 07    MOV   [__r1],A
    0D01: 52 00    MOV   A,[X+0]
    0D03: 53 08    MOV   [__r0],A
    0D05: 51 07    MOV   A,[__r1]
    0D07: 01 01    ADD   A,0x1
    0D09: 54 01    MOV   [X+1],A
    0D0B: 51 08    MOV   A,[__r0]
    0D0D: 09 00    ADC   A,0x0
    0D0F: 54 00    MOV   [X+0],A
    0D11: 50 2D    MOV   A,0x2D
    0D13: 3F 07    MVI   [__r1],A
    0D15: 52 01    MOV   A,[X+1]
    0D17: 53 07    MOV   [__r1],A
    0D19: 52 00    MOV   A,[X+0]
    0D1B: 53 08    MOV   [__r0],A
    0D1D: 51 07    MOV   A,[__r1]
    0D1F: 01 FF    ADD   A,0xFF
    0D21: 54 01    MOV   [X+1],A
    0D23: 51 08    MOV   A,[__r0]
    0D25: 09 FF    ADC   A,0xFF
    0D27: 54 00    MOV   [X+0],A
    0D29: 50 00    MOV   A,0x0
    0D2B: 3F 07    MVI   [__r1],A
    0D2D: 52 FC    MOV   A,[X-4]
    0D2F: 54 05    MOV   [X+5],A
    0D31: 80 3D    JMP   0x0D6F
    0D33: 52 05    MOV   A,[X+5]
    0D35: 53 07    MOV   [__r1],A
    0D37: 3E 07    MVI   A,[__r1]
    0D39: 54 06    MOV   [X+6],A
    0D3B: 52 05    MOV   A,[X+5]
    0D3D: 53 07    MOV   [__r1],A
    0D3F: 52 04    MOV   A,[X+4]
    0D41: 53 08    MOV   [__r0],A
    0D43: 51 07    MOV   A,[__r1]
    0D45: 01 01    ADD   A,0x1
    0D47: 54 05    MOV   [X+5],A
    0D49: 51 08    MOV   A,[__r0]
    0D4B: 09 00    ADC   A,0x0
    0D4D: 54 04    MOV   [X+4],A
    0D4F: 52 01    MOV   A,[X+1]
    0D51: 53 05    MOV   [__r3],A
    0D53: 3E 05    MVI   A,[__r3]
    0D55: 3F 07    MVI   [__r1],A
    0D57: 52 01    MOV   A,[X+1]
    0D59: 53 07    MOV   [__r1],A
    0D5B: 52 00    MOV   A,[X+0]
    0D5D: 53 08    MOV   [__r0],A
    0D5F: 51 07    MOV   A,[__r1]
    0D61: 01 FF    ADD   A,0xFF
    0D63: 54 01    MOV   [X+1],A
    0D65: 51 08    MOV   A,[__r0]
    0D67: 09 FF    ADC   A,0xFF
    0D69: 54 00    MOV   [X+0],A
    0D6B: 52 06    MOV   A,[X+6]
    0D6D: 3F 07    MVI   [__r1],A
    0D6F: 52 01    MOV   A,[X+1]
    0D71: 53 08    MOV   [__r0],A
    0D73: 52 05    MOV   A,[X+5]
    0D75: 3A 08    CMP   A,[__r0]
    0D77: CF BB    JC    0x0D33
    0D79: 52 FC    MOV   A,[X-4]
    0D7B: 53 07    MOV   [__r1],A
    0D7D: 52 FB    MOV   A,[X-5]
    0D7F: 53 08    MOV   [__r0],A
    0D81: 38 F7    ADD   SP,0xF7
    0D83: 20       POP   X
    0D84: 7F       RET   
_utoa:
    0D85: 10       PUSH  X
    0D86: 4F       MOV   X,SP
    0D87: 38 07    ADD   SP,0x7
    0D89: 52 FC    MOV   A,[X-4]
    0D8B: 54 01    MOV   [X+1],A
    0D8D: 52 F7    MOV   A,[X-9]
    0D8F: 08       PUSH  A
    0D90: 52 F8    MOV   A,[X-8]
    0D92: 08       PUSH  A
    0D93: 52 F9    MOV   A,[X-7]
    0D95: 08       PUSH  A
    0D96: 52 FA    MOV   A,[X-6]
    0D98: 08       PUSH  A
    0D99: 7C 0B A1 LCALL 0x0BA1
    0D9C: 38 FE    ADD   SP,0xFE
    0D9E: 18       POP   A
    0D9F: 53 07    MOV   [__r1],A
    0DA1: 18       POP   A
    0DA2: 53 08    MOV   [__r0],A
    0DA4: 51 07    MOV   A,[__r1]
    0DA6: 54 06    MOV   [X+6],A
    0DA8: 51 08    MOV   A,[__r0]
    0DAA: 54 05    MOV   [X+5],A
    0DAC: 50 09    MOV   A,0x9
    0DAE: 13 06    SUB   A,[X+6]
    0DB0: 52 05    MOV   A,[X+5]
    0DB2: 31 80    XOR   A,0x80
    0DB4: 53 02    MOV   [__rX],A
    0DB6: 50 80    MOV   A,0x80
    0DB8: 1A 02    SBB   A,[__rX]
    0DBA: C0 1D    JC    0x0DD8
    0DBC: 52 01    MOV   A,[X+1]
    0DBE: 53 07    MOV   [__r1],A
    0DC0: 52 00    MOV   A,[X+0]
    0DC2: 53 08    MOV   [__r0],A
    0DC4: 51 07    MOV   A,[__r1]
    0DC6: 01 01    ADD   A,0x1
    0DC8: 54 01    MOV   [X+1],A
    0DCA: 51 08    MOV   A,[__r0]
    0DCC: 09 00    ADC   A,0x0
    0DCE: 54 00    MOV   [X+0],A
    0DD0: 52 06    MOV   A,[X+6]
    0DD2: 01 30    ADD   A,0x30
    0DD4: 3F 07    MVI   [__r1],A
    0DD6: 80 1B    JMP   0x0DF2
    0DD8: 52 01    MOV   A,[X+1]
    0DDA: 53 07    MOV   [__r1],A
    0DDC: 52 00    MOV   A,[X+0]
    0DDE: 53 08    MOV   [__r0],A
    0DE0: 51 07    MOV   A,[__r1]
    0DE2: 01 01    ADD   A,0x1
    0DE4: 54 01    MOV   [X+1],A
    0DE6: 51 08    MOV   A,[__r0]
    0DE8: 09 00    ADC   A,0x0
    0DEA: 54 00    MOV   [X+0],A
    0DEC: 52 06    MOV   A,[X+6]
    0DEE: 01 57    ADD   A,0x57
    0DF0: 3F 07    MVI   [__r1],A
    0DF2: 52 F7    MOV   A,[X-9]
    0DF4: 08       PUSH  A
    0DF5: 52 F8    MOV   A,[X-8]
    0DF7: 08       PUSH  A
    0DF8: 52 F9    MOV   A,[X-7]
    0DFA: 08       PUSH  A
    0DFB: 52 FA    MOV   A,[X-6]
    0DFD: 08       PUSH  A
    0DFE: 7C 0B A1 LCALL 0x0BA1
    0E01: 18       POP   A
    0E02: 54 FA    MOV   [X-6],A
    0E04: 18       POP   A
    0E05: 54 F9    MOV   [X-7],A
    0E07: 38 FE    ADD   SP,0xFE
    0E09: 3D F9 00 CMP   [X-7],0x0
    0E0C: BF 80    JNZ   0x0D8D
    0E0E: 3D FA 00 CMP   [X-6],0x0
    0E11: BF 7B    JNZ   0x0D8D
    0E13: 52 01    MOV   A,[X+1]
    0E15: 53 07    MOV   [__r1],A
    0E17: 52 00    MOV   A,[X+0]
    0E19: 53 08    MOV   [__r0],A
    0E1B: 51 07    MOV   A,[__r1]
    0E1D: 01 FF    ADD   A,0xFF
    0E1F: 54 01    MOV   [X+1],A
    0E21: 51 08    MOV   A,[__r0]
    0E23: 09 FF    ADC   A,0xFF
    0E25: 54 00    MOV   [X+0],A
    0E27: 50 00    MOV   A,0x0
    0E29: 3F 07    MVI   [__r1],A
    0E2B: 52 FC    MOV   A,[X-4]
    0E2D: 54 03    MOV   [X+3],A
    0E2F: 80 3D    JMP   0x0E6D
    0E31: 52 03    MOV   A,[X+3]
    0E33: 53 07    MOV   [__r1],A
    0E35: 3E 07    MVI   A,[__r1]
    0E37: 54 04    MOV   [X+4],A
    0E39: 52 03    MOV   A,[X+3]
    0E3B: 53 07    MOV   [__r1],A
    0E3D: 52 02    MOV   A,[X+2]
    0E3F: 53 08    MOV   [__r0],A
    0E41: 51 07    MOV   A,[__r1]
    0E43: 01 01    ADD   A,0x1
    0E45: 54 03    MOV   [X+3],A
    0E47: 51 08    MOV   A,[__r0]
    0E49: 09 00    ADC   A,0x0
    0E4B: 54 02    MOV   [X+2],A
    0E4D: 52 01    MOV   A,[X+1]
    0E4F: 53 05    MOV   [__r3],A
    0E51: 3E 05    MVI   A,[__r3]
    0E53: 3F 07    MVI   [__r1],A
    0E55: 52 01    MOV   A,[X+1]
    0E57: 53 07    MOV   [__r1],A
    0E59: 52 00    MOV   A,[X+0]
    0E5B: 53 08    MOV   [__r0],A
    0E5D: 51 07    MOV   A,[__r1]
    0E5F: 01 FF    ADD   A,0xFF
    0E61: 54 01    MOV   [X+1],A
    0E63: 51 08    MOV   A,[__r0]
    0E65: 09 FF    ADC   A,0xFF
    0E67: 54 00    MOV   [X+0],A
    0E69: 52 04    MOV   A,[X+4]
    0E6B: 3F 07    MVI   [__r1],A
    0E6D: 52 01    MOV   A,[X+1]
    0E6F: 53 08    MOV   [__r0],A
    0E71: 52 03    MOV   A,[X+3]
    0E73: 3A 08    CMP   A,[__r0]
    0E75: CF BB    JC    0x0E31
    0E77: 52 FC    MOV   A,[X-4]
    0E79: 53 07    MOV   [__r1],A
    0E7B: 52 FB    MOV   A,[X-5]
    0E7D: 53 08    MOV   [__r0],A
    0E7F: 38 F9    ADD   SP,0xF9
    0E81: 20       POP   X
    0E82: 7F       RET   
_isdigit:
    0E83: 10       PUSH  X
    0E84: 4F       MOV   X,SP
    0E85: 52 FC    MOV   A,[X-4]
    0E87: 01 22    ADD   A,0x22
    0E89: 53 07    MOV   [__r1],A
    0E8B: 52 FB    MOV   A,[X-5]
    0E8D: 09 02    ADC   A,0x2
    0E8F: 10       PUSH  X
    0E90: 58 07    MOV   X,[__r1]
    0E92: 28       ROMX  
    0E93: 20       POP   X
    0E94: 53 07    MOV   [__r1],A
    0E96: 55 08 00 MOV   [__r0],0x0
    0E99: 26 07 04 AND   [__r1],0x4
    0E9C: 26 08 00 AND   [__r0],0x0
    0E9F: 20       POP   X
    0EA0: 7F       RET   
_islower:
    0EA1: 10       PUSH  X
    0EA2: 4F       MOV   X,SP
    0EA3: 52 FC    MOV   A,[X-4]
    0EA5: 01 22    ADD   A,0x22
    0EA7: 53 07    MOV   [__r1],A
    0EA9: 52 FB    MOV   A,[X-5]
    0EAB: 09 02    ADC   A,0x2
    0EAD: 10       PUSH  X
    0EAE: 58 07    MOV   X,[__r1]
    0EB0: 28       ROMX  
    0EB1: 20       POP   X
    0EB2: 53 07    MOV   [__r1],A
    0EB4: 55 08 00 MOV   [__r0],0x0
    0EB7: 26 07 02 AND   [__r1],0x2
    0EBA: 26 08 00 AND   [__r0],0x0
    0EBD: 20       POP   X
    0EBE: 7F       RET   
_isspace:
    0EBF: 10       PUSH  X
    0EC0: 4F       MOV   X,SP
    0EC1: 52 FC    MOV   A,[X-4]
    0EC3: 01 22    ADD   A,0x22
    0EC5: 53 07    MOV   [__r1],A
    0EC7: 52 FB    MOV   A,[X-5]
    0EC9: 09 02    ADC   A,0x2
    0ECB: 10       PUSH  X
    0ECC: 58 07    MOV   X,[__r1]
    0ECE: 28       ROMX  
    0ECF: 20       POP   X
    0ED0: 53 07    MOV   [__r1],A
    0ED2: 55 08 00 MOV   [__r0],0x0
    0ED5: 26 07 10 AND   [__r1],0x10
    0ED8: 26 08 00 AND   [__r0],0x0
    0EDB: 20       POP   X
    0EDC: 7F       RET   
_toupper:
    0EDD: 10       PUSH  X
    0EDE: 4F       MOV   X,SP
    0EDF: 52 FB    MOV   A,[X-5]
    0EE1: 08       PUSH  A
    0EE2: 52 FC    MOV   A,[X-4]
    0EE4: 08       PUSH  A
    0EE5: 7C 0E A1 LCALL _islower
    0EE8: 38 FE    ADD   SP,0xFE
    0EEA: 3C 08 00 CMP   [__r0],0x0
    0EED: B0 06    JNZ   0x0EF4
    0EEF: 3C 07 00 CMP   [__r1],0x0
    0EF2: A0 15    JZ    0x0F08
    0EF4: 52 FC    MOV   A,[X-4]
    0EF6: 11 61    SUB   A,0x61
    0EF8: 53 07    MOV   [__r1],A
    0EFA: 52 FB    MOV   A,[X-5]
    0EFC: 19 00    SBB   A,0x0
    0EFE: 53 08    MOV   [__r0],A
    0F00: 06 07 41 ADD   [__r1],0x41
    0F03: 0E 08 00 ADC   [__r0],0x0
    0F06: 80 09    JMP   0x0F10
    0F08: 52 FC    MOV   A,[X-4]
    0F0A: 53 07    MOV   [__r1],A
    0F0C: 52 FB    MOV   A,[X-5]
    0F0E: 53 08    MOV   [__r0],A
    0F10: 20       POP   X
    0F11: 7F       RET   
__csdepi:
    0F12: 10       PUSH  X
    0F13: 4F       MOV   X,SP
    0F14: 5F 07 21 MOV   [__r1],[prozess+5]
    0F17: 5F 08 20 MOV   [__r0],[prozess+4]
    0F1A: 51 07    MOV   A,[__r1]
    0F1C: 01 01    ADD   A,0x1
    0F1E: 53 21    MOV   [prozess+5],A
    0F20: 51 08    MOV   A,[__r0]
    0F22: 09 00    ADC   A,0x0
    0F24: 53 20    MOV   [prozess+4],A
    0F26: 52 FC    MOV   A,[X-4]
    0F28: 3F 07    MVI   [__r1],A
    0F2A: 20       POP   X
    0F2B: 7F       RET   
_csprintf:
    0F2C: 10       PUSH  X
    0F2D: 4F       MOV   X,SP
    0F2E: 38 02    ADD   SP,0x2
    0F30: 52 FC    MOV   A,[X-4]
    0F32: 53 21    MOV   [prozess+5],A
    0F34: 5A 08    MOV   [__r0],X
    0F36: 16 08 07 SUB   [__r0],0x7
    0F39: 51 08    MOV   A,[__r0]
    0F3B: 54 01    MOV   [X+1],A
    0F3D: 52 00    MOV   A,[X+0]
    0F3F: 08       PUSH  A
    0F40: 52 01    MOV   A,[X+1]
    0F42: 08       PUSH  A
    0F43: 52 F9    MOV   A,[X-7]
    0F45: 08       PUSH  A
    0F46: 52 FA    MOV   A,[X-6]
    0F48: 08       PUSH  A
    0F49: 50 03    MOV   A,0x3
    0F4B: 08       PUSH  A
    0F4C: 50 98    MOV   A,0x98
    0F4E: 08       PUSH  A
    0F4F: 7C 0F 6B LCALL __cprint
    0F52: 38 FA    ADD   SP,0xFA
    0F54: 5F 07 21 MOV   [__r1],[prozess+5]
    0F57: 50 00    MOV   A,0x0
    0F59: 3F 07    MVI   [__r1],A
    0F5B: 51 21    MOV   A,[prozess+5]
    0F5D: 13 FC    SUB   A,[X-4]
    0F5F: 53 07    MOV   [__r1],A
    0F61: 51 20    MOV   A,[prozess+4]
    0F63: 1B FB    SBB   A,[X-5]
    0F65: 53 08    MOV   [__r0],A
    0F67: 38 FE    ADD   SP,0xFE
    0F69: 20       POP   X
    0F6A: 7F       RET   
__cprint:
    0F6B: 10       PUSH  X
    0F6C: 4F       MOV   X,SP
    0F6D: 38 11    ADD   SP,0x11
    0F6F: 56 05 00 MOV   [X+5],0x0
    0F72: 56 04 00 MOV   [X+4],0x0
    0F75: 83 4A    JMP   0x12C0
    0F77: 52 FA    MOV   A,[X-6]
    0F79: 53 07    MOV   [__r1],A
    0F7B: 52 F9    MOV   A,[X-7]
    0F7D: 10       PUSH  X
    0F7E: 58 07    MOV   X,[__r1]
    0F80: 28       ROMX  
    0F81: 20       POP   X
    0F82: 39 25    CMP   A,0x25
    0F84: A0 23    JZ    0x0FA8
    0F86: 52 FA    MOV   A,[X-6]
    0F88: 53 07    MOV   [__r1],A
    0F8A: 52 F9    MOV   A,[X-7]
    0F8C: 10       PUSH  X
    0F8D: 58 07    MOV   X,[__r1]
    0F8F: 28       ROMX  
    0F90: 20       POP   X
    0F91: 10       PUSH  X
    0F92: 08       PUSH  A
    0F93: 52 FC    MOV   A,[X-4]
    0F95: 53 07    MOV   [__r1],A
    0F97: 52 FB    MOV   A,[X-5]
    0F99: 58 07    MOV   X,[__r1]
    0F9B: 7C 0B FC LCALL __plcall
    0F9E: 38 FF    ADD   SP,0xFF
    0FA0: 20       POP   X
    0FA1: 77 05    INC   [X+5]
    0FA3: 0F 04 00 ADC   [X+4],0x0
    0FA6: 83 14    JMP   0x12BB
    0FA8: 56 0A 00 MOV   [X+10],0x0
    0FAB: 56 09 00 MOV   [X+9],0x0
    0FAE: 56 07 22 MOV   [X+7],0x22
    0FB1: 56 06 00 MOV   [X+6],0x0
    0FB4: 56 08 20 MOV   [X+8],0x20
    0FB7: 77 FA    INC   [X-6]
    0FB9: 0F F9 00 ADC   [X-7],0x0
    0FBC: 52 FA    MOV   A,[X-6]
    0FBE: 53 07    MOV   [__r1],A
    0FC0: 52 F9    MOV   A,[X-7]
    0FC2: 10       PUSH  X
    0FC3: 58 07    MOV   X,[__r1]
    0FC5: 28       ROMX  
    0FC6: 20       POP   X
    0FC7: 54 10    MOV   [X+16],A
    0FC9: 56 0F 00 MOV   [X+15],0x0
    0FCC: 52 10    MOV   A,[X+16]
    0FCE: 11 58    SUB   A,0x58
    0FD0: 53 01    MOV   [__rY],A
    0FD2: 52 0F    MOV   A,[X+15]
    0FD4: 31 80    XOR   A,0x80
    0FD6: 19 80    SBB   A,0x80
    0FD8: 2A 01    OR    A,[__rY]
    0FDA: A0 E0    JZ    0x10BB
    0FDC: D0 1F    JNC   0x0FFC
    0FDE: 52 10    MOV   A,[X+16]
    0FE0: 11 45    SUB   A,0x45
    0FE2: 53 01    MOV   [__rY],A
    0FE4: 52 0F    MOV   A,[X+15]
    0FE6: 31 80    XOR   A,0x80
    0FE8: 19 80    SBB   A,0x80
    0FEA: C0 83    JC    0x106E
    0FEC: 2A 01    OR    A,[__rY]
    0FEE: A2 C4    JZ    0x12B3
    0FF0: 3D 0F 00 CMP   [X+15],0x0
    0FF3: B0 06    JNZ   0x0FFA
    0FF5: 3D 10 53 CMP   [X+16],0x53
    0FF8: A1 EE    JZ    0x11E7
    0FFA: 80 73    JMP   0x106E
    0FFC: 3D 0F 00 CMP   [X+15],0x0
    0FFF: B0 06    JNZ   0x1006
    1001: 3D 10 63 CMP   [X+16],0x63
    1004: A1 B9    JZ    0x11BE
    1006: 3D 0F 00 CMP   [X+15],0x0
    1009: B0 06    JNZ   0x1010
    100B: 3D 10 64 CMP   [X+16],0x64
    100E: A0 81    JZ    0x1090
    1010: 3D 0F 00 CMP   [X+15],0x0
    1013: B0 06    JNZ   0x101A
    1015: 3D 10 65 CMP   [X+16],0x65
    1018: A2 9A    JZ    0x12B3
    101A: 3D 0F 00 CMP   [X+15],0x0
    101D: B0 06    JNZ   0x1024
    101F: 3D 10 66 CMP   [X+16],0x66
    1022: A2 90    JZ    0x12B3
    1024: 3D 0F 00 CMP   [X+15],0x0
    1027: B0 06    JNZ   0x102E
    1029: 3D 10 69 CMP   [X+16],0x69
    102C: A0 63    JZ    0x1090
    102E: 3D 0F 00 CMP   [X+15],0x0
    1031: B0 06    JNZ   0x1038
    1033: 3D 10 6F CMP   [X+16],0x6F
    1036: A0 84    JZ    0x10BB
    1038: 3D 0F 00 CMP   [X+15],0x0
    103B: B0 06    JNZ   0x1042
    103D: 3D 10 70 CMP   [X+16],0x70
    1040: A0 7A    JZ    0x10BB
    1042: 52 10    MOV   A,[X+16]
    1044: 11 63    SUB   A,0x63
    1046: 52 0F    MOV   A,[X+15]
    1048: 31 80    XOR   A,0x80
    104A: 19 80    SBB   A,0x80
    104C: C0 21    JC    0x106E
    104E: 3D 0F 00 CMP   [X+15],0x0
    1051: B0 06    JNZ   0x1058
    1053: 3D 10 73 CMP   [X+16],0x73
    1056: A1 F6    JZ    0x124D
    1058: 3D 0F 00 CMP   [X+15],0x0
    105B: B0 06    JNZ   0x1062
    105D: 3D 10 75 CMP   [X+16],0x75
    1060: A0 5A    JZ    0x10BB
    1062: 3D 0F 00 CMP   [X+15],0x0
    1065: B0 06    JNZ   0x106C
    1067: 3D 10 78 CMP   [X+16],0x78
    106A: A0 50    JZ    0x10BB
    106C: 80 01    JMP   0x106E
    106E: 52 FA    MOV   A,[X-6]
    1070: 53 07    MOV   [__r1],A
    1072: 52 F9    MOV   A,[X-7]
    1074: 10       PUSH  X
    1075: 58 07    MOV   X,[__r1]
    1077: 28       ROMX  
    1078: 20       POP   X
    1079: 10       PUSH  X
    107A: 08       PUSH  A
    107B: 52 FC    MOV   A,[X-4]
    107D: 53 07    MOV   [__r1],A
    107F: 52 FB    MOV   A,[X-5]
    1081: 58 07    MOV   X,[__r1]
    1083: 7C 0B FC LCALL __plcall
    1086: 38 FF    ADD   SP,0xFF
    1088: 20       POP   X
    1089: 77 05    INC   [X+5]
    108B: 0F 04 00 ADC   [X+4],0x0
    108E: 82 2C    JMP   0x12BB
    1090: 52 F8    MOV   A,[X-8]
    1092: 01 FE    ADD   A,0xFE
    1094: 54 F8    MOV   [X-8],A
    1096: 52 F8    MOV   A,[X-8]
    1098: 53 07    MOV   [__r1],A
    109A: 3E 07    MVI   A,[__r1]
    109C: 54 0B    MOV   [X+11],A
    109E: 3E 07    MVI   A,[__r1]
    10A0: 54 0C    MOV   [X+12],A
    10A2: 50 00    MOV   A,0x0
    10A4: 08       PUSH  A
    10A5: 50 0A    MOV   A,0xA
    10A7: 08       PUSH  A
    10A8: 52 0B    MOV   A,[X+11]
    10AA: 08       PUSH  A
    10AB: 52 0C    MOV   A,[X+12]
    10AD: 08       PUSH  A
    10AE: 52 06    MOV   A,[X+6]
    10B0: 08       PUSH  A
    10B1: 52 07    MOV   A,[X+7]
    10B3: 08       PUSH  A
    10B4: 7C 0C 08 LCALL _itoa
    10B7: 38 FA    ADD   SP,0xFA
    10B9: 80 FC    JMP   0x11B6
    10BB: 52 F8    MOV   A,[X-8]
    10BD: 01 FE    ADD   A,0xFE
    10BF: 54 F8    MOV   [X-8],A
    10C1: 52 F8    MOV   A,[X-8]
    10C3: 53 07    MOV   [__r1],A
    10C5: 3E 07    MVI   A,[__r1]
    10C7: 53 08    MOV   [__r0],A
    10C9: 3E 07    MVI   A,[__r1]
    10CB: 54 0C    MOV   [X+12],A
    10CD: 51 08    MOV   A,[__r0]
    10CF: 54 0B    MOV   [X+11],A
    10D1: 52 FA    MOV   A,[X-6]
    10D3: 53 07    MOV   [__r1],A
    10D5: 52 F9    MOV   A,[X-7]
    10D7: 10       PUSH  X
    10D8: 58 07    MOV   X,[__r1]
    10DA: 28       ROMX  
    10DB: 20       POP   X
    10DC: 39 75    CMP   A,0x75
    10DE: B0 1A    JNZ   0x10F9
    10E0: 50 00    MOV   A,0x0
    10E2: 08       PUSH  A
    10E3: 50 0A    MOV   A,0xA
    10E5: 08       PUSH  A
    10E6: 52 0B    MOV   A,[X+11]
    10E8: 08       PUSH  A
    10E9: 52 0C    MOV   A,[X+12]
    10EB: 08       PUSH  A
    10EC: 52 06    MOV   A,[X+6]
    10EE: 08       PUSH  A
    10EF: 52 07    MOV   A,[X+7]
    10F1: 08       PUSH  A
    10F2: 7C 0D 85 LCALL _utoa
    10F5: 38 FA    ADD   SP,0xFA
    10F7: 80 BE    JMP   0x11B6
    10F9: 52 FA    MOV   A,[X-6]
    10FB: 53 07    MOV   [__r1],A
    10FD: 52 F9    MOV   A,[X-7]
    10FF: 10       PUSH  X
    1100: 58 07    MOV   X,[__r1]
    1102: 28       ROMX  
    1103: 20       POP   X
    1104: 39 6F    CMP   A,0x6F
    1106: B0 1A    JNZ   0x1121
    1108: 50 00    MOV   A,0x0
    110A: 08       PUSH  A
    110B: 50 08    MOV   A,0x8
    110D: 08       PUSH  A
    110E: 52 0B    MOV   A,[X+11]
    1110: 08       PUSH  A
    1111: 52 0C    MOV   A,[X+12]
    1113: 08       PUSH  A
    1114: 52 06    MOV   A,[X+6]
    1116: 08       PUSH  A
    1117: 52 07    MOV   A,[X+7]
    1119: 08       PUSH  A
    111A: 7C 0D 85 LCALL _utoa
    111D: 38 FA    ADD   SP,0xFA
    111F: 80 96    JMP   0x11B6
    1121: 52 FA    MOV   A,[X-6]
    1123: 53 07    MOV   [__r1],A
    1125: 52 F9    MOV   A,[X-7]
    1127: 10       PUSH  X
    1128: 58 07    MOV   X,[__r1]
    112A: 28       ROMX  
    112B: 20       POP   X
    112C: 39 70    CMP   A,0x70
    112E: B0 31    JNZ   0x1160
    1130: 52 07    MOV   A,[X+7]
    1132: 53 07    MOV   [__r1],A
    1134: 52 06    MOV   A,[X+6]
    1136: 53 08    MOV   [__r0],A
    1138: 51 07    MOV   A,[__r1]
    113A: 01 01    ADD   A,0x1
    113C: 54 07    MOV   [X+7],A
    113E: 51 08    MOV   A,[__r0]
    1140: 09 00    ADC   A,0x0
    1142: 54 06    MOV   [X+6],A
    1144: 50 30    MOV   A,0x30
    1146: 3F 07    MVI   [__r1],A
    1148: 52 07    MOV   A,[X+7]
    114A: 53 07    MOV   [__r1],A
    114C: 52 06    MOV   A,[X+6]
    114E: 53 08    MOV   [__r0],A
    1150: 51 07    MOV   A,[__r1]
    1152: 01 01    ADD   A,0x1
    1154: 54 07    MOV   [X+7],A
    1156: 51 08    MOV   A,[__r0]
    1158: 09 00    ADC   A,0x0
    115A: 54 06    MOV   [X+6],A
    115C: 50 78    MOV   A,0x78
    115E: 3F 07    MVI   [__r1],A
    1160: 50 00    MOV   A,0x0
    1162: 08       PUSH  A
    1163: 50 10    MOV   A,0x10
    1165: 08       PUSH  A
    1166: 52 0B    MOV   A,[X+11]
    1168: 08       PUSH  A
    1169: 52 0C    MOV   A,[X+12]
    116B: 08       PUSH  A
    116C: 52 06    MOV   A,[X+6]
    116E: 08       PUSH  A
    116F: 52 07    MOV   A,[X+7]
    1171: 08       PUSH  A
    1172: 7C 0D 85 LCALL _utoa
    1175: 38 FA    ADD   SP,0xFA
    1177: 52 FA    MOV   A,[X-6]
    1179: 53 07    MOV   [__r1],A
    117B: 52 F9    MOV   A,[X-7]
    117D: 10       PUSH  X
    117E: 58 07    MOV   X,[__r1]
    1180: 28       ROMX  
    1181: 20       POP   X
    1182: 39 58    CMP   A,0x58
    1184: B0 31    JNZ   0x11B6
    1186: 56 01 22 MOV   [X+1],0x22
    1189: 56 00 00 MOV   [X+0],0x0
    118C: 80 21    JMP   0x11AE
    118E: 52 01    MOV   A,[X+1]
    1190: 53 07    MOV   [__r1],A
    1192: 3E 07    MVI   A,[__r1]
    1194: 53 07    MOV   [__r1],A
    1196: 50 00    MOV   A,0x0
    1198: 08       PUSH  A
    1199: 51 07    MOV   A,[__r1]
    119B: 08       PUSH  A
    119C: 7C 0E DD LCALL _toupper
    119F: 38 FE    ADD   SP,0xFE
    11A1: 52 01    MOV   A,[X+1]
    11A3: 53 05    MOV   [__r3],A
    11A5: 51 07    MOV   A,[__r1]
    11A7: 3F 05    MVI   [__r3],A
    11A9: 77 01    INC   [X+1]
    11AB: 0F 00 00 ADC   [X+0],0x0
    11AE: 52 01    MOV   A,[X+1]
    11B0: 53 07    MOV   [__r1],A
    11B2: 3E 07    MVI   A,[__r1]
    11B4: BF D9    JNZ   0x118E
    11B6: 56 01 22 MOV   [X+1],0x22
    11B9: 56 00 00 MOV   [X+0],0x0
    11BC: 80 AE    JMP   0x126B
    11BE: 52 F8    MOV   A,[X-8]
    11C0: 01 FE    ADD   A,0xFE
    11C2: 54 F8    MOV   [X-8],A
    11C4: 52 F8    MOV   A,[X-8]
    11C6: 53 07    MOV   [__r1],A
    11C8: 3E 07    MVI   A,[__r1]
    11CA: 3E 07    MVI   A,[__r1]
    11CC: 54 0D    MOV   [X+13],A
    11CE: 10       PUSH  X
    11CF: 52 0D    MOV   A,[X+13]
    11D1: 08       PUSH  A
    11D2: 52 FC    MOV   A,[X-4]
    11D4: 53 07    MOV   [__r1],A
    11D6: 52 FB    MOV   A,[X-5]
    11D8: 58 07    MOV   X,[__r1]
    11DA: 7C 0B FC LCALL __plcall
    11DD: 38 FF    ADD   SP,0xFF
    11DF: 20       POP   X
    11E0: 77 05    INC   [X+5]
    11E2: 0F 04 00 ADC   [X+4],0x0
    11E5: 80 D5    JMP   0x12BB
    11E7: 52 F8    MOV   A,[X-8]
    11E9: 01 FE    ADD   A,0xFE
    11EB: 54 F8    MOV   [X-8],A
    11ED: 52 F8    MOV   A,[X-8]
    11EF: 53 07    MOV   [__r1],A
    11F1: 3E 07    MVI   A,[__r1]
    11F3: 54 02    MOV   [X+2],A
    11F5: 3E 07    MVI   A,[__r1]
    11F7: 54 03    MOV   [X+3],A
    11F9: 3D 08 2D CMP   [X+8],0x2D
    11FC: B0 3F    JNZ   0x123C
    11FE: 10       PUSH  X
    11FF: 50 2D    MOV   A,0x2D
    1201: 08       PUSH  A
    1202: 52 FC    MOV   A,[X-4]
    1204: 53 07    MOV   [__r1],A
    1206: 52 FB    MOV   A,[X-5]
    1208: 58 07    MOV   X,[__r1]
    120A: 7C 0B FC LCALL __plcall
    120D: 38 FF    ADD   SP,0xFF
    120F: 20       POP   X
    1210: 77 05    INC   [X+5]
    1212: 0F 04 00 ADC   [X+4],0x0
    1215: 80 26    JMP   0x123C
    1217: 52 03    MOV   A,[X+3]
    1219: 53 07    MOV   [__r1],A
    121B: 52 02    MOV   A,[X+2]
    121D: 10       PUSH  X
    121E: 58 07    MOV   X,[__r1]
    1220: 28       ROMX  
    1221: 20       POP   X
    1222: 10       PUSH  X
    1223: 08       PUSH  A
    1224: 52 FC    MOV   A,[X-4]
    1226: 53 07    MOV   [__r1],A
    1228: 52 FB    MOV   A,[X-5]
    122A: 58 07    MOV   X,[__r1]
    122C: 7C 0B FC LCALL __plcall
    122F: 38 FF    ADD   SP,0xFF
    1231: 20       POP   X
    1232: 77 05    INC   [X+5]
    1234: 0F 04 00 ADC   [X+4],0x0
    1237: 77 03    INC   [X+3]
    1239: 0F 02 00 ADC   [X+2],0x0
    123C: 52 03    MOV   A,[X+3]
    123E: 53 07    MOV   [__r1],A
    1240: 52 02    MOV   A,[X+2]
    1242: 10       PUSH  X
    1243: 58 07    MOV   X,[__r1]
    1245: 28       ROMX  
    1246: 20       POP   X
    1247: 39 00    CMP   A,0x0
    1249: BF CD    JNZ   0x1217
    124B: 80 6F    JMP   0x12BB
    124D: 52 F8    MOV   A,[X-8]
    124F: 01 FE    ADD   A,0xFE
    1251: 54 F8    MOV   [X-8],A
    1253: 52 F8    MOV   A,[X-8]
    1255: 53 07    MOV   [__r1],A
    1257: 3E 07    MVI   A,[__r1]
    1259: 54 00    MOV   [X+0],A
    125B: 3E 07    MVI   A,[__r1]
    125D: 54 01    MOV   [X+1],A
    125F: 52 01    MOV   A,[X+1]
    1261: B0 09    JNZ   0x126B
    1263: 56 03 22 MOV   [X+3],0x22
    1266: 56 02 03 MOV   [X+2],0x3
    1269: 8F 8F    JMP   0x11F9
    126B: 3D 08 2D CMP   [X+8],0x2D
    126E: B0 3A    JNZ   0x12A9
    1270: 10       PUSH  X
    1271: 50 2D    MOV   A,0x2D
    1273: 08       PUSH  A
    1274: 52 FC    MOV   A,[X-4]
    1276: 53 07    MOV   [__r1],A
    1278: 52 FB    MOV   A,[X-5]
    127A: 58 07    MOV   X,[__r1]
    127C: 7C 0B FC LCALL __plcall
    127F: 38 FF    ADD   SP,0xFF
    1281: 20       POP   X
    1282: 77 05    INC   [X+5]
    1284: 0F 04 00 ADC   [X+4],0x0
    1287: 80 21    JMP   0x12A9
    1289: 52 01    MOV   A,[X+1]
    128B: 53 07    MOV   [__r1],A
    128D: 3E 07    MVI   A,[__r1]
    128F: 10       PUSH  X
    1290: 08       PUSH  A
    1291: 52 FC    MOV   A,[X-4]
    1293: 53 07    MOV   [__r1],A
    1295: 52 FB    MOV   A,[X-5]
    1297: 58 07    MOV   X,[__r1]
    1299: 7C 0B FC LCALL __plcall
    129C: 38 FF    ADD   SP,0xFF
    129E: 20       POP   X
    129F: 77 05    INC   [X+5]
    12A1: 0F 04 00 ADC   [X+4],0x0
    12A4: 77 01    INC   [X+1]
    12A6: 0F 00 00 ADC   [X+0],0x0
    12A9: 52 01    MOV   A,[X+1]
    12AB: 53 07    MOV   [__r1],A
    12AD: 3E 07    MVI   A,[__r1]
    12AF: BF D9    JNZ   0x1289
    12B1: 80 09    JMP   0x12BB
    12B3: 56 03 34 MOV   [X+3],0x34
    12B6: 56 02 03 MOV   [X+2],0x3
    12B9: 8F 3F    JMP   0x11F9
    12BB: 77 FA    INC   [X-6]
    12BD: 0F F9 00 ADC   [X-7],0x0
    12C0: 52 FA    MOV   A,[X-6]
    12C2: 53 07    MOV   [__r1],A
    12C4: 52 F9    MOV   A,[X-7]
    12C6: 10       PUSH  X
    12C7: 58 07    MOV   X,[__r1]
    12C9: 28       ROMX  
    12CA: 20       POP   X
    12CB: 39 00    CMP   A,0x0
    12CD: BC A9    JNZ   0x0F77
    12CF: 52 05    MOV   A,[X+5]
    12D1: 53 07    MOV   [__r1],A
    12D3: 52 04    MOV   A,[X+4]
    12D5: 53 08    MOV   [__r0],A
    12D7: 38 EF    ADD   SP,0xEF
    12D9: 20       POP   X
    12DA: 7F       RET   
    12DB: 10       PUSH  X
    12DC: 4F       MOV   X,SP
    12DD: 38 04    ADD   SP,0x4
    12DF: 80 06    JMP   0x12E6
    12E1: 77 FC    INC   [X-4]
    12E3: 0F FB 00 ADC   [X-5],0x0
    12E6: 52 FC    MOV   A,[X-4]
    12E8: 53 07    MOV   [__r1],A
    12EA: 52 FB    MOV   A,[X-5]
    12EC: 10       PUSH  X
    12ED: 58 07    MOV   X,[__r1]
    12EF: 28       ROMX  
    12F0: 20       POP   X
    12F1: 53 07    MOV   [__r1],A
    12F3: 50 00    MOV   A,0x0
    12F5: 08       PUSH  A
    12F6: 51 07    MOV   A,[__r1]
    12F8: 08       PUSH  A
    12F9: 7C 0E BF LCALL _isspace
    12FC: 38 FE    ADD   SP,0xFE
    12FE: 3C 08 00 CMP   [__r0],0x0
    1301: BF DF    JNZ   0x12E1
    1303: 3C 07 00 CMP   [__r1],0x0
    1306: BF DA    JNZ   0x12E1
    1308: 56 03 00 MOV   [X+3],0x0
    130B: 56 02 00 MOV   [X+2],0x0
    130E: 52 FC    MOV   A,[X-4]
    1310: 53 07    MOV   [__r1],A
    1312: 52 FB    MOV   A,[X-5]
    1314: 10       PUSH  X
    1315: 58 07    MOV   X,[__r1]
    1317: 28       ROMX  
    1318: 20       POP   X
    1319: 39 2D    CMP   A,0x2D
    131B: B0 0E    JNZ   0x132A
    131D: 56 03 01 MOV   [X+3],0x1
    1320: 56 02 00 MOV   [X+2],0x0
    1323: 77 FC    INC   [X-4]
    1325: 0F FB 00 ADC   [X-5],0x0
    1328: 80 15    JMP   0x133E
    132A: 52 FC    MOV   A,[X-4]
    132C: 53 07    MOV   [__r1],A
    132E: 52 FB    MOV   A,[X-5]
    1330: 10       PUSH  X
    1331: 58 07    MOV   X,[__r1]
    1333: 28       ROMX  
    1334: 20       POP   X
    1335: 39 2B    CMP   A,0x2B
    1337: B0 06    JNZ   0x133E
    1339: 77 FC    INC   [X-4]
    133B: 0F FB 00 ADC   [X-5],0x0
    133E: 56 01 00 MOV   [X+1],0x0
    1341: 56 00 00 MOV   [X+0],0x0
    1344: 80 73    JMP   0x13B8
    1346: 52 FC    MOV   A,[X-4]
    1348: 53 07    MOV   [__r1],A
    134A: 52 FB    MOV   A,[X-5]
    134C: 53 08    MOV   [__r0],A
    134E: 51 07    MOV   A,[__r1]
    1350: 01 01    ADD   A,0x1
    1352: 54 FC    MOV   [X-4],A
    1354: 51 08    MOV   A,[__r0]
    1356: 09 00    ADC   A,0x0
    1358: 54 FB    MOV   [X-5],A
    135A: 52 01    MOV   A,[X+1]
    135C: 53 05    MOV   [__r3],A
    135E: 52 00    MOV   A,[X+0]
    1360: 53 06    MOV   [__r2],A
    1362: 55 03 0A MOV   [__r5],0xA
    1365: 55 04 00 MOV   [__r4],0x0
    1368: 55 02 00 MOV   [__rX],0x0
    136B: 55 01 00 MOV   [__rY],0x0
    136E: 3C 04 00 CMP   [__r4],0x0
    1371: B0 06    JNZ   0x1378
    1373: 3C 03 00 CMP   [__r5],0x0
    1376: A0 17    JZ    0x138E
    1378: 70 FB    AND   F,0xFB
    137A: 6E 04    RRC   [__r4]
    137C: 6E 03    RRC   [__r5]
    137E: D0 09    JNC   0x1388
    1380: 51 05    MOV   A,[__r3]
    1382: 04 02    ADD   [__rX],A
    1384: 51 06    MOV   A,[__r2]
    1386: 0C 01    ADC   [__rY],A
    1388: 65 05    ASL   [__r3]
    138A: 6B 06    RLC   [__r2]
    138C: 8F E1    JMP   0x136E
    138E: 5F 05 02 MOV   [__r3],[__rX]
    1391: 5F 06 01 MOV   [__r2],[__rY]
    1394: 51 08    MOV   A,[__r0]
    1396: 10       PUSH  X
    1397: 58 07    MOV   X,[__r1]
    1399: 28       ROMX  
    139A: 20       POP   X
    139B: 53 07    MOV   [__r1],A
    139D: 55 08 00 MOV   [__r0],0x0
    13A0: 51 05    MOV   A,[__r3]
    13A2: 02 07    ADD   A,[__r1]
    13A4: 53 07    MOV   [__r1],A
    13A6: 51 06    MOV   A,[__r2]
    13A8: 0A 08    ADC   A,[__r0]
    13AA: 53 08    MOV   [__r0],A
    13AC: 51 07    MOV   A,[__r1]
    13AE: 11 30    SUB   A,0x30
    13B0: 54 01    MOV   [X+1],A
    13B2: 51 08    MOV   A,[__r0]
    13B4: 19 00    SBB   A,0x0
    13B6: 54 00    MOV   [X+0],A
    13B8: 52 FC    MOV   A,[X-4]
    13BA: 53 07    MOV   [__r1],A
    13BC: 52 FB    MOV   A,[X-5]
    13BE: 10       PUSH  X
    13BF: 58 07    MOV   X,[__r1]
    13C1: 28       ROMX  
    13C2: 20       POP   X
    13C3: 53 07    MOV   [__r1],A
    13C5: 50 00    MOV   A,0x0
    13C7: 08       PUSH  A
    13C8: 51 07    MOV   A,[__r1]
    13CA: 08       PUSH  A
    13CB: 7C 0E 83 LCALL _isdigit
    13CE: 38 FE    ADD   SP,0xFE
    13D0: 3C 08 00 CMP   [__r0],0x0
    13D3: BF 72    JNZ   0x1346
    13D5: 3C 07 00 CMP   [__r1],0x0
    13D8: BF 6D    JNZ   0x1346
    13DA: 3D 02 00 CMP   [X+2],0x0
    13DD: B0 06    JNZ   0x13E4
    13DF: 3D 03 00 CMP   [X+3],0x0
    13E2: A0 11    JZ    0x13F4
    13E4: 52 01    MOV   A,[X+1]
    13E6: 73       CPL   A
    13E7: 11 FF    SUB   A,0xFF
    13E9: 53 07    MOV   [__r1],A
    13EB: 52 00    MOV   A,[X+0]
    13ED: 73       CPL   A
    13EE: 19 FF    SBB   A,0xFF
    13F0: 53 08    MOV   [__r0],A
    13F2: 80 09    JMP   0x13FC
    13F4: 52 01    MOV   A,[X+1]
    13F6: 53 07    MOV   [__r1],A
    13F8: 52 00    MOV   A,[X+0]
    13FA: 53 08    MOV   [__r0],A
    13FC: 38 FC    ADD   SP,0xFC
    13FE: 20       POP   X
    13FF: 7F       RET   
