                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Git\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; kochPeriodendauer -> X+4
 0000           ;         kochKS -> X+3
 0000           ;         kochKP -> X+2
 0000           ; hichBeschleunigungssumme -> X+1
 0000           ; hichAusgangswert -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <stdio.h>
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; // #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char, char );
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 59
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560432            mov [X+4],50
 0007                   .dbline 72
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablen
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       /********************************************************
 0007           ;       *                       Initialisierung des Controllers                         *
 0007           ;       ********************************************************/
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 75
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 78
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5204              mov A,[X+4]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 79
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 82
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 83
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 84
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 86
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 87
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 88
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 92
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 93
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 94
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 98
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 99
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 102
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 103
 004F           ;       IN2_Start;
 004F                   .dbline 104
 004F           ;       SELBSTTEST_Start;
 004F 804A              xjmp L4
 0051           L3:
 0051                   .dbline 114
 0051           ;       
 0051           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0051           ;       #ifndef TEST
 0051           ;               
 0051           ;               /********************************************************
 0051           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0051           ;               ********************************************************/
 0051           ;               
 0051           ;               while(1) 
 0051           ;                       {
 0051                   .dbline 116
 0051           ;                       // Daten Einlesen
 0051           ;                       Dateneinlesen();
 0051 90B2              xcall _Dateneinlesen
 0053                   .dbline 120
 0053           ;                                                
 0053           ;                       // Parameter Berechnen
 0053           ;                       
 0053           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0053 5100              mov A,[_prozess]
 0055 0501              add [X+1],A
 0057                   .dbline 122
 0057           ;                       
 0057           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0057 5203              mov A,[X+3]
 0059 08                push A
 005A 5001              mov A,1
 005C 08                push A
 005D 7C0000            xcall __divmodu_8X8_8
 0060 18                pop A
 0061 5300              mov [__r0],A
 0063 38FF              add SP,-1
 0065 5201              mov A,[X+1]
 0067 60E8              mov REG[0xe8],A
 0069 5100              mov A,[__r0]
 006B 60E9              mov REG[0xe9],A
 006D 40                nop
 006E 5DEB              mov A,REG[0xeb]
 0070 5300              mov [__r0],A
 0072 5102              mov A,[_prozess+2]
 0074 1200              sub A,[_prozess]
 0076 5300              mov [__r2],A
 0078 5202              mov A,[X+2]
 007A 60E8              mov REG[0xe8],A
 007C 5100              mov A,[__r2]
 007E 60E9              mov REG[0xe9],A
 0080 40                nop
 0081 5DEB              mov A,REG[0xeb]
 0083 1200              sub A,[__r0]
 0085 5400              mov [X+0],A
 0087                   .dbline 125
 0087           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 0087           ;                       //TODO: Korekturfaktor Einfügen 
 0087           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 0087 5200              mov A,[X+0]
 0089 5303              mov [_prozess+3],A
 008B                   .dbline 127
 008B           ;                       
 008B           ;                       Ausgangansteuern(hichAusgangswert);
 008B 5200              mov A,[X+0]
 008D 08                push A
 008E 90A8              xcall _Ausgangansteuern
 0090                   .dbline 128
 0090           ;                       LCDansteuern(prozess.pdchEntfernung, 0);
 0090 5000              mov A,0
 0092 08                push A
 0093 5101              mov A,[_prozess+1]
 0095 08                push A
 0096 9009              xcall _LCDansteuern
 0098 38FD              add SP,-3
 009A                   .dbline 129
 009A           ;                       };
 009A           L4:
 009A                   .dbline 113
 009A 8FB6              xjmp L3
 009C           X0:
 009C                   .dbline -2
 009C           L2:
 009C 38FB              add SP,-5
 009E 20                pop X
 009F                   .dbline 0 ; func end
 009F 8FFF              jmp .
 00A1                   .dbsym l kochPeriodendauer 4 c
 00A1                   .dbsym l kochKS 3 c
 00A1                   .dbsym l kochKP 2 c
 00A1                   .dbsym l hichBeschleunigungssumme 1 c
 00A1                   .dbsym l hichAusgangswert 0 c
 00A1                   .dbend
 00A1                   .dbfunc e LCDansteuern _LCDansteuern fV
 00A1           ; rgchZweitezeile -> X+16
 00A1           ; rgchErstezeile -> X+0
 00A1           ;     hichfehler -> X-5
 00A1           ;       hichdata -> X-4
 00A1           _LCDansteuern::
 00A1                   .dbline -1
 00A1 10                push X
 00A2 4F                mov X,SP
 00A3 3820              add SP,32
 00A5                   .dbline 176
 00A5           ;                       
 00A5           ;       /********************************************************
 00A5           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 00A5           ;       * und sind für das Fertige Programm nicht relevant.            *
 00A5           ;       * Sie werden anstelle der Regulären while Schleife             *
 00A5           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 00A5           ;       * erfüllt ist.                                                                                 *
 00A5           ;       ********************************************************/
 00A5           ; 
 00A5           ;       #else
 00A5           ;               
 00A5           ;               // Selbsttest des Beshleunigungssensoers anschalten
 00A5           ;               SELBSTTEST_On;
 00A5           ;                       
 00A5           ;               // whileschleife zu testzwecken
 00A5           ;               // Konstante zur verweildauer in der schleife
 00A5           ;               while (1)
 00A5           ;                       {
 00A5           ;                               // Daten Einlesen
 00A5           ;                               void Dateneinlesen(void);
 00A5           ;                               // Daten Nacheinander auf LCD Ausgeeben
 00A5           ;                               prozess.pdchPulsweite = 50;
 00A5           ;                               //prozess.pdchBechleunigung = 1;
 00A5           ;                               //prozess.pdchEntfernung =2;
 00A5           ;                               //prozess.pdchSollwert =3;
 00A5           ;                               Ausgangansteuern(100);
 00A5           ;                               test(prozess.pdchBechleunigung);
 00A5           ;                               test(prozess.pdchEntfernung);
 00A5           ;                               test(prozess.pdchSollwert);
 00A5           ;                               Ausgangansteuern(-100);
 00A5           ;                               test(prozess.pdchBechleunigung);
 00A5           ;                               test(prozess.pdchEntfernung);
 00A5           ;                               test(prozess.pdchSollwert);
 00A5           ;                               
 00A5           ;                               
 00A5           ;                       };
 00A5           ;                       
 00A5           ;       // Präprozessor: Ende der Verzweifung
 00A5           ;       #endif 
 00A5           ; }
 00A5           ;       
 00A5           ; /********************************************************
 00A5           ; *                     Funktionsdeklarationen                                          *
 00A5           ; ********************************************************/
 00A5           ;       
 00A5           ; void LCDansteuern(char hichdata, char hichfehler)
 00A5           ;       {
 00A5                   .dbline 181
 00A5           ;       char rgchErstezeile[16];
 00A5           ;       char rgchZweitezeile[16];
 00A5           ;       
 00A5           ;       // Text in Variablen Schreiben
 00A5           ;       csprintf(rgchErstezeile,"Abstand: %c",hichdata);
 00A5 52FC              mov A,[X-4]
 00A7 5300              mov [__r1],A
 00A9 5000              mov A,0
 00AB 08                push A
 00AC 5100              mov A,[__r1]
 00AE 08                push A
 00AF 500F              mov A,>L10
 00B1 08                push A
 00B2 500F              mov A,<L10
 00B4 08                push A
 00B5 5000              mov A,0
 00B7 08                push A
 00B8 10                push X
 00B9 7C0000            xcall _csprintf
 00BC 38FA              add SP,-6
 00BE                   .dbline 185
 00BE           ;       
 00BE           ;       // ist ein Fehler aufgetreten
 00BE           ;       // dann ist hichFehler != 0
 00BE           ;       if (hichfehler != 0)
 00BE 3DFB00            cmp [X-5],0
 00C1 A017              jz L11
 00C3                   .dbline 187
 00C3           ;               {
 00C3           ;               csprintf(rgchZweitezeile,"Achtung Fehler");
 00C3                   .dbline 187
 00C3 5000              mov A,>L13
 00C5 08                push A
 00C6 5000              mov A,<L13
 00C8 08                push A
 00C9 5A00              mov [__r1],X
 00CB 060010            add [__r1],16
 00CE 5100              mov A,[__r0]
 00D0 08                push A
 00D1 5100              mov A,[__r1]
 00D3 08                push A
 00D4 7C0000            xcall _csprintf
 00D7 38FC              add SP,-4
 00D9                   .dbline 188
 00D9           ;               };
 00D9           L11:
 00D9                   .dbline 188
 00D9                   .dbline 191
 00D9           ;               
 00D9           ;       // LCD Ansteuern 
 00D9           ;       LCD_1_Position(1,0);
 00D9 10                push X
 00DA 5700              mov X,0
 00DC 5001              mov A,1
 00DE 7C0000            xcall _LCD_1_Position
 00E1 20                pop X
 00E2                   .dbline 192
 00E2           ;       LCD_1_PrString(rgchErstezeile);
 00E2 10                push X
 00E3 5100              mov A,[__r0]
 00E5 7C0000            xcall _LCD_1_PrString
 00E8                   .dbline 193
 00E8           ;       LCD_1_Position(2,0);
 00E8 5700              mov X,0
 00EA 5002              mov A,2
 00EC 7C0000            xcall _LCD_1_Position
 00EF 20                pop X
 00F0                   .dbline 194
 00F0           ;       LCD_1_PrString(rgchZweitezeile);        
 00F0 5A00              mov [__r1],X
 00F2 060010            add [__r1],16
 00F5 10                push X
 00F6 5100              mov A,[__r0]
 00F8 08                push A
 00F9 5100              mov A,[__r1]
 00FB 5C                mov X,A
 00FC 18                pop A
 00FD 7C0000            xcall _LCD_1_PrString
 0100 20                pop X
 0101                   .dbline -2
 0101           L9:
 0101 38E0              add SP,-32
 0103 20                pop X
 0104                   .dbline 0 ; func end
 0104 7F                ret
 0105                   .dbsym l rgchZweitezeile 16 A[16:16]c
 0105                   .dbsym l rgchErstezeile 0 A[16:16]c
 0105                   .dbsym l hichfehler -5 c
 0105                   .dbsym l hichdata -4 c
 0105                   .dbend
 0105                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 0105           _Dateneinlesen::
 0105                   .dbline -1
 0105                   .dbline 198
 0105           ;       }
 0105           ;       
 0105           ; void Dateneinlesen(void)
 0105           ;       {       
 0105                   .dbline 200
 0105           ;       // Wenn Sollwertdaten bereit sind
 0105           ;       if(ADCINC_fIsDataAvailable() != 0)
 0105 10                push X
 0106 7C0000            xcall _ADCINC_fIsDataAvailable
 0109 20                pop X
 010A 3900              cmp A,0
 010C A008              jz L19
 010E                   .dbline 204
 010E           ;                       
 010E           ;               // Einlesen des Sollwertes
 010E           ;               // data ready flag zurüvksetzen        
 010E           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 010E 10                push X
 010F 7C0000            xcall _ADCINC_cClearFlagGetData
 0112 20                pop X
 0113 5302              mov [_prozess+2],A
 0115           L18:
 0115                   .dbline 207
 0115           ;                          
 0115           ;       // Auf Entfernung und Position Warten
 0115           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 0115           L19:
 0115                   .dbline 207
 0115 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 0117 10                push X
 0118 5800              mov X,[__r1]
 011A 08                push A
 011B 28                romx
 011C 5300              mov [__r0],A
 011E 18                pop A
 011F 75                inc X
 0120 0900              adc A,0
 0122 28                romx
 0123 20                pop X
 0124 3C0000            cmp [__r0],0
 0127 AFED              jz L18
 0129                   .dbline 209
 0129           ;               // Einlesen der Beschleunigung
 0129           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 0129 10                push X
 012A 7C0000            xcall _DUALADC8_cGetData1
 012D 20                pop X
 012E 5300              mov [_prozess],A
 0130                   .dbline 213
 0130           ;       
 0130           ;               // Einlesen der Entfernung
 0130           ;         // data ready flag zurüvksetzen         
 0130           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 0130 10                push X
 0131 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 0134 20                pop X
 0135 5301              mov [_prozess+1],A
 0137                   .dbline -2
 0137           L14:
 0137                   .dbline 0 ; func end
 0137 7F                ret
 0138                   .dbend
 0138                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 0138           ; hichAusgangswert -> X-4
 0138           _Ausgangansteuern::
 0138                   .dbline -1
 0138 10                push X
 0139 4F                mov X,SP
 013A                   .dbline 217
 013A           ;       }
 013A           ; 
 013A           ; void Ausgangansteuern(char hichAusgangswert)
 013A           ;       {
 013A                   .dbline 219
 013A           ;               // linksdrehend 
 013A           ;               if (hichAusgangswert > 0){                              
 013A 5000              mov A,0
 013C 3BFC              cmp A,[X-4]
 013E D00A              jnc L23
 0140           X1:
 0140                   .dbline 220
 0140           ;                       IN1_On;
 0140                   .dbline 220
 0140                   .dbline 221
 0140           ;                       IN2_Off;
 0140                   .dbline 222
 0140           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 0140 10                push X
 0141 5103              mov A,[_prozess+3]
 0143 7C0000            xcall _PWM8_1_WritePulseWidth
 0146 20                pop X
 0147                   .dbline 223
 0147           ;               }
 0147 8019              xjmp L24
 0149           L23:
 0149                   .dbline 225
 0149           ;               // rechtsdrehend
 0149           ;               else if (hichAusgangswert < 0){                         
 0149 3DFC00            cmp [X-4],0
 014C D00D              jnc L26
 014E           X2:
 014E                   .dbline 226
 014E           ;                       IN1_On;
 014E                   .dbline 226
 014E                   .dbline 227
 014E           ;                       IN2_OFF;
 014E                   .dbline 228
 014E           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 014E 5103              mov A,[_prozess+3]
 0150 73                cpl A
 0151 11FF              sub A,-1
 0153 10                push X
 0154 7C0000            xcall _PWM8_1_WritePulseWidth
 0157 20                pop X
 0158                   .dbline 229
 0158           ;               }
 0158 8008              xjmp L27
 015A           L26:
 015A                   .dbline 231
 015A           ;               // Bremsen durch Kurzschluss
 015A           ;               else{                           
 015A                   .dbline 232
 015A           ;                       IN1_On;
 015A                   .dbline 233
 015A           ;                       IN2_On;
 015A                   .dbline 234
 015A           ;                       PWM8_1_WritePulseWidth(0);
 015A 10                push X
 015B 5000              mov A,0
 015D 7C0000            xcall _PWM8_1_WritePulseWidth
 0160 20                pop X
 0161                   .dbline 235
 0161           ;               }
 0161           L27:
 0161           L24:
 0161                   .dbline -2
 0161           L22:
 0161 20                pop X
 0162                   .dbline 0 ; func end
 0162 7F                ret
 0163                   .dbsym l hichAusgangswert -4 c
 0163                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Git\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L13:
 0000 41636874756E67204665686C657200    .byte 'A,'c,'h,'t,'u,'n,'g,32,'F,'e,'h,'l,'e,'r,0
 000F           L10:
 000F 41627374616E643A20256300  .byte 'A,'b,'s,'t,'a,'n,'d,58,32,37,'c,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
