                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\BEACHE~2\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+3
 0000           ; hichAusgangswert -> X+2
 0000           ;        kochKRZ -> X+1
 0000           ;         kochKR -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 47
 0004           ;    
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.7                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char, char);
 0004           ; void Initalisierung(void);
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 62
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten                                   
 0004           ;       char kochKR;
 0004           ;       char kochKRZ;
 0004           ;               
 0004           ;       // Variablen
 0004           ;       char hichAusgangswert;                                                  
 0004           ;       char hichBeschleunigungssumme;  
 0004           ;               
 0004           ;       // Initialisierung des Controllers
 0004           ;       Initalisierung();
 0004 9100              xcall _Initalisierung
 0006 8039              xjmp L4
 0008           L3:
 0008                   .dbline 106
 0008           ;       
 0008           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0008           ;       #ifndef TEST
 0008           ;               
 0008           ;               /********************************************************
 0008           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0008           ;               ********************************************************/
 0008           ; 
 0008           ;               while(1) 
 0008           ;                       {
 0008           ;                       // Daten Einlesen
 0008           ;                       
 0008           ;                       Dateneinlesen();
 0008           ;                                                
 0008           ;                       // Parameter Berechnen
 0008           ;                       
 0008           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0008           ;                       
 0008           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKR
 0008           ;                                                               - kochKRZ * hichBeschleunigungssumme;
 0008           ;                       
 0008           ;                       // Daten Ausgeben:
 0008           ;                               
 0008           ;                       Ausgangansteuern(hichAusgangswert);
 0008           ;                       
 0008           ;                       LCDansteuern(prozess.pdchEntfernung);
 0008           ; 
 0008           ;                               
 0008           ;                       };
 0008           ;                       
 0008           ;       /********************************************************
 0008           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0008           ;       * und sind für das Fertige Programm nicht relevant.            *
 0008           ;       * Sie werden anstelle der Regulären while Schleife             *
 0008           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0008           ;       * erfüllt ist.                                                                                 *
 0008           ;       ********************************************************/
 0008           ; 
 0008           ;       #else
 0008           ;                                               
 0008           ;               // whileschleife zu testzwecken
 0008           ;               // Konstante zur verweildauer in der schleife
 0008           ;               while (1)
 0008           ;                       {
 0008                   .dbline 107
 0008           ;                               Dateneinlesen();
 0008 9078              xcall _Dateneinlesen
 000A                   .dbline 116
 000A           ;                               //Ausgangansteuern(250, 2);
 000A           ;                               // LCDansteuern(1);
 000A           ;                               //if (PRT0DR & 0x01)
 000A           ;                               //{LCDansteuern(1);}
 000A           ;                               //else {LCDansteuern(PRT0DR & 0x01);}
 000A           ;                                       //LCDansteuern(PRT0DR & 0x01);
 000A           ;                               
 000A           ;                               // Erkennen von eingangssignalen über A/D-Wandler
 000A           ;                               if (prozess.pdchEntfernung <= 110)
 000A 506E              mov A,110
 000C 3A01              cmp A,[_prozess+1]
 000E C012              jc L6
 0010           X1:
 0010                   .dbline 118
 0010           ;                               {
 0010           ;                                       LCDansteuern(1);
 0010                   .dbline 118
 0010 5001              mov A,1
 0012 08                push A
 0013 9032              xcall _LCDansteuern
 0015                   .dbline 119
 0015           ;                                       Ausgangansteuern(250,1);}
 0015 5001              mov A,1
 0017 08                push A
 0018 50FA              mov A,-6
 001A 08                push A
 001B 9098              xcall _Ausgangansteuern
 001D 38FD              add SP,-3
 001F                   .dbline 119
 001F 8020              xjmp L7
 0021           L6:
 0021                   .dbline 120
 0021           ;                               else if (prozess.pdchBechleunigung <= 110)
 0021 506E              mov A,110
 0023 3A00              cmp A,[_prozess]
 0025 C012              jc L9
 0027           X2:
 0027                   .dbline 121
 0027           ;                               {       LCDansteuern(2);
 0027                   .dbline 121
 0027 5002              mov A,2
 0029 08                push A
 002A 901B              xcall _LCDansteuern
 002C                   .dbline 122
 002C           ;                                       Ausgangansteuern(250,2);}
 002C 5002              mov A,2
 002E 08                push A
 002F 50FA              mov A,-6
 0031 08                push A
 0032 9081              xcall _Ausgangansteuern
 0034 38FD              add SP,-3
 0036                   .dbline 122
 0036 8009              xjmp L10
 0038           L9:
 0038                   .dbline 123
 0038           ;                               else {
 0038                   .dbline 124
 0038           ;                               Ausgangansteuern(0,0);  
 0038 5000              mov A,0
 003A 08                push A
 003B 08                push A
 003C 9077              xcall _Ausgangansteuern
 003E 38FE              add SP,-2
 0040                   .dbline 125
 0040           ;                               }
 0040           L10:
 0040           L7:
 0040                   .dbline 126
 0040           ;                       };
 0040           L4:
 0040                   .dbline 105
 0040 8FC7              xjmp L3
 0042           X0:
 0042                   .dbline -2
 0042           L2:
 0042 38FC              add SP,-4
 0044 20                pop X
 0045                   .dbline 0 ; func end
 0045 8FFF              jmp .
 0047                   .dbsym l hichBeschleunigungssumme 3 c
 0047                   .dbsym l hichAusgangswert 2 c
 0047                   .dbsym l kochKRZ 1 c
 0047                   .dbsym l kochKR 0 c
 0047                   .dbend
 0047                   .dbfunc e LCDansteuern _LCDansteuern fV
 0047           ;           rgch -> X+0
 0047           ;       hichdata -> X-4
 0047           _LCDansteuern::
 0047                   .dbline -1
 0047 10                push X
 0048 4F                mov X,SP
 0049 3805              add SP,5
 004B                   .dbline 137
 004B           ;                       
 004B           ;       // Präprozessor: Ende der Verzweifung
 004B           ;       #endif 
 004B           ; }
 004B           ;       
 004B           ; /********************************************************
 004B           ; *                     Funktionsdeklarationen                                          *
 004B           ; ********************************************************/
 004B           ;       
 004B           ; void LCDansteuern(char hichdata)
 004B           ;       {               
 004B                   .dbline 140
 004B           ;                       char rgch[5];
 004B           ;                       // Text auf LCD ausgeben
 004B           ;                       LCD_1_Position(0,5);    
 004B 10                push X
 004C 5705              mov X,5
 004E 5000              mov A,0
 0050 7C0000            xcall _LCD_1_Position
 0053                   .dbline 141
 0053           ;                       LCD_1_PrCString("Wert:");
 0053 5000              mov A,>L12
 0055 08                push A
 0056 5000              mov A,<L12
 0058 5C                mov X,A
 0059 18                pop A
 005A 7C0000            xcall _LCD_1_PrCString
 005D 20                pop X
 005E                   .dbline 144
 005E           ;                       
 005E           ;                       // Zahl Auf LCD ausgeben
 005E           ;                       itoa(rgch,hichdata,10);
 005E 5000              mov A,0
 0060 08                push A
 0061 500A              mov A,10
 0063 08                push A
 0064 52FC              mov A,[X-4]
 0066 5300              mov [__r1],A
 0068 5000              mov A,0
 006A 08                push A
 006B 5100              mov A,[__r1]
 006D 08                push A
 006E 5000              mov A,0
 0070 08                push A
 0071 10                push X
 0072 7C0000            xcall _itoa
 0075 38FA              add SP,-6
 0077                   .dbline 145
 0077           ;                       LCD_1_PrString(rgch);           
 0077 10                push X
 0078 5100              mov A,[__r0]
 007A 7C0000            xcall _LCD_1_PrString
 007D 20                pop X
 007E                   .dbline -2
 007E           L11:
 007E 38FB              add SP,-5
 0080 20                pop X
 0081                   .dbline 0 ; func end
 0081 7F                ret
 0082                   .dbsym l rgch 0 A[5:5]c
 0082                   .dbsym l hichdata -4 c
 0082                   .dbend
 0082                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 0082           _Dateneinlesen::
 0082                   .dbline -1
 0082                   .dbline 150
 0082           ; 
 0082           ;       }
 0082           ;       
 0082           ; void Dateneinlesen(void)
 0082           ;       {       
 0082                   .dbline 152
 0082           ;       // Wenn Sollwertdaten bereit sind
 0082           ;       if(ADCINC_fIsDataAvailable() != 0)
 0082 10                push X
 0083 7C0000            xcall _ADCINC_fIsDataAvailable
 0086 20                pop X
 0087 3900              cmp A,0
 0089 A008              jz L18
 008B                   .dbline 156
 008B           ;                       
 008B           ;               // Einlesen des Sollwertes
 008B           ;               // data ready flag zurüvksetzen        
 008B           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 008B 10                push X
 008C 7C0000            xcall _ADCINC_cClearFlagGetData
 008F 20                pop X
 0090 5302              mov [_prozess+2],A
 0092           L17:
 0092                   .dbline 159
 0092           ;                          
 0092           ;       // Auf Entfernung und Position Warten
 0092           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 0092           L18:
 0092                   .dbline 159
 0092 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 0094 10                push X
 0095 5800              mov X,[__r1]
 0097 08                push A
 0098 28                romx
 0099 5300              mov [__r0],A
 009B 18                pop A
 009C 75                inc X
 009D 0900              adc A,0
 009F 28                romx
 00A0 20                pop X
 00A1 3C0000            cmp [__r0],0
 00A4 AFED              jz L17
 00A6                   .dbline 161
 00A6           ;               // Einlesen der Beschleunigung
 00A6           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00A6 10                push X
 00A7 7C0000            xcall _DUALADC8_cGetData1
 00AA 20                pop X
 00AB 5300              mov [_prozess],A
 00AD                   .dbline 165
 00AD           ;       
 00AD           ;               // Einlesen der Entfernung
 00AD           ;         // data ready flag zurüvksetzen         
 00AD           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00AD 10                push X
 00AE 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00B1 20                pop X
 00B2 5301              mov [_prozess+1],A
 00B4                   .dbline -2
 00B4           L13:
 00B4                   .dbline 0 ; func end
 00B4 7F                ret
 00B5                   .dbend
 00B5                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00B5           ;            iin -> X+0
 00B5           ;   hichRichtung -> X-5
 00B5           ; hichAusgangswert -> X-4
 00B5           _Ausgangansteuern::
 00B5                   .dbline -1
 00B5 10                push X
 00B6 4F                mov X,SP
 00B7 3804              add SP,4
 00B9                   .dbline 169
 00B9           ;       }
 00B9           ; 
 00B9           ;       void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 00B9           ;       {
 00B9                   .dbline 174
 00B9           ;               // Variablendeklaration
 00B9           ;               int iin;
 00B9           ;               
 00B9           ;               // Drehrichtung Auswählen
 00B9           ;               switch(hichRichtung) {
 00B9 52FB              mov A,[X-5]
 00BB 5403              mov [X+3],A
 00BD 560200            mov [X+2],0
 00C0 3D0200            cmp [X+2],0
 00C3 B006              jnz X3
 00C5 3D0301            cmp [X+3],1
 00C8 A00D              jz L25
 00CA           X3:
 00CA 3D0200            cmp [X+2],0
 00CD B006              jnz X4
 00CF 3D0302            cmp [X+3],2
 00D2 A011              jz L26
 00D4           X4:
 00D4 801D              xjmp L22
 00D6           L25:
 00D6                   .dbline 179
 00D6           ;                       
 00D6           ;                       // Linkslauf
 00D6           ;                       case 1: 
 00D6           ;                               // IN1 und IN2 Ansteuern
 00D6           ;                               IN1_Switch(0);
 00D6 10                push X
 00D7 5000              mov A,0
 00D9 7C0000            xcall _IN1_Switch
 00DC                   .dbline 180
 00DC           ;                               IN2_Switch(1);
 00DC 5001              mov A,1
 00DE 7C0000            xcall _IN2_Switch
 00E1 20                pop X
 00E2                   .dbline 181
 00E2           ;                               break;
 00E2 8018              xjmp L23
 00E4           L26:
 00E4                   .dbline 187
 00E4           ;                       
 00E4           ;                       // Rechtslauf
 00E4           ;                       case 2:
 00E4           ;                               
 00E4           ;                               // IN1 und IN2 Ansteuern
 00E4           ;                               IN1_Switch(1);
 00E4 10                push X
 00E5 5001              mov A,1
 00E7 7C0000            xcall _IN1_Switch
 00EA                   .dbline 188
 00EA           ;                               IN2_Switch(0);
 00EA 5000              mov A,0
 00EC 7C0000            xcall _IN2_Switch
 00EF 20                pop X
 00F0                   .dbline 189
 00F0           ;                               break;
 00F0 800A              xjmp L23
 00F2           L22:
 00F2                   .dbline 194
 00F2           ;                               
 00F2           ;                       // Ungültiger Wert
 00F2           ;                       default:
 00F2           ;                               // Pulsweite auf 0 setzen
 00F2           ;                               PWM8_1_WritePulseWidth(0);
 00F2 10                push X
 00F3 5000              mov A,0
 00F5 7C0000            xcall _PWM8_1_WritePulseWidth
 00F8 20                pop X
 00F9                   .dbline 196
 00F9           ;                               // Funktion verlassen
 00F9           ;                               return ;
 00F9 8008              xjmp L21
 00FB           L23:
 00FB                   .dbline 201
 00FB           ;                               
 00FB           ;                       }
 00FB           ;               
 00FB           ;               // Pulsweite auf hichAusgangswert setzen                
 00FB           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 00FB 10                push X
 00FC 52FC              mov A,[X-4]
 00FE 7C0000            xcall _PWM8_1_WritePulseWidth
 0101 20                pop X
 0102                   .dbline -2
 0102           L21:
 0102 38FC              add SP,-4
 0104 20                pop X
 0105                   .dbline 0 ; func end
 0105 7F                ret
 0106                   .dbsym l iin 0 I
 0106                   .dbsym l hichRichtung -5 c
 0106                   .dbsym l hichAusgangswert -4 c
 0106                   .dbend
 0106                   .dbfunc e Initalisierung _Initalisierung fV
 0106           _Initalisierung::
 0106                   .dbline -1
 0106                   .dbline 205
 0106           ;       }
 0106           ; 
 0106           ; void Initalisierung(void)
 0106           ;       {
 0106                   .dbline 207
 0106           ;       //globale Interrupts Freigeben
 0106           ;       M8C_EnableGInt;                                                 
 0106 7101                      or  F, 01h
 0108           
 0108                   .dbline 210
 0108           ;       
 0108           ;       // Initialisieren des LCD-Displays
 0108           ;       LCD_1_Start();                                                  
 0108 10                push X
 0109 7C0000            xcall _LCD_1_Start
 010C                   .dbline 214
 010C           ;       
 010C           ;       // Initialisieren des PWM-Moduls
 010C           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 010C           ;     PWM8_1_Start();
 010C 7C0000            xcall _PWM8_1_Start
 010F                   .dbline 216
 010F           ;       
 010F           ;       PGA_1_Start(PGA_1_HIGHPOWER);
 010F 5003              mov A,3
 0111 7C0000            xcall _PGA_1_Start
 0114                   .dbline 217
 0114           ;       PGA_2_Start(PGA_2_HIGHPOWER);
 0114 5003              mov A,3
 0116 7C0000            xcall _PGA_2_Start
 0119                   .dbline 218
 0119           ;       PGA_3_Start(PGA_3_HIGHPOWER);   
 0119 5003              mov A,3
 011B 7C0000            xcall _PGA_3_Start
 011E                   .dbline 222
 011E           ;       
 011E           ;       // Initialisieren des Dualen AD-Wandlers
 011E           ;       // für Entfernung und Beschleunigung
 011E           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                                             
 011E 5003              mov A,3
 0120 7C0000            xcall _DUALADC8_Start
 0123                   .dbline 223
 0123           ;       DUALADC8_GetSamples(); 
 0123 7C0000            xcall _DUALADC8_GetSamples
 0126                   .dbline 227
 0126           ;       
 0126           ;       // Initialisieren des AD-Wandlers
 0126           ;       // für den Sollwert
 0126           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0126 5003              mov A,3
 0128 7C0000            xcall _ADCINC_Start
 012B                   .dbline 228
 012B           ;       ADCINC_GetSamples(0);                                   
 012B 5000              mov A,0
 012D 7C0000            xcall _ADCINC_GetSamples
 0130                   .dbline 231
 0130           ;       
 0130           ;       //Initialisieren der Digitalen Ausgänge
 0130           ;       IN1_Start();    
 0130 7C0000            xcall _IN1_Start
 0133                   .dbline 232
 0133           ;       IN2_Start();
 0133 7C0000            xcall _IN2_Start
 0136 20                pop X
 0137                   .dbline -2
 0137           L27:
 0137                   .dbline 0 ; func end
 0137 7F                ret
 0138                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\BEACHE~2\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L12:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
