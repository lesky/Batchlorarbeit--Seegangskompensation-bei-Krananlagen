                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\BEACHE~2\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+3
 0000           ; hichAusgangswert -> X+2
 0000           ;        kochKRZ -> X+1
 0000           ;         kochKR -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 47
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * SDA                 -> 1.0
 0004           ; * SCL                         -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.3                                                                  *
 0004           ; * IN2                 -> 1.5                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.7                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char, char);
 0004           ; void Initalisierung(void);
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 62
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten                                   
 0004           ;       char kochKR;
 0004           ;       char kochKRZ;
 0004           ;               
 0004           ;       // Variablen
 0004           ;       char hichAusgangswert;                                                  
 0004           ;       char hichBeschleunigungssumme;  
 0004           ;               
 0004           ;       // Initialisierung des Controllers
 0004           ;       Initalisierung();
 0004 90C6              xcall _Initalisierung
 0006 800A              xjmp L4
 0008           L3:
 0008                   .dbline 105
 0008           ;       
 0008           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0008           ;       #ifndef TEST
 0008           ;               
 0008           ;               /********************************************************
 0008           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0008           ;               ********************************************************/
 0008           ; 
 0008           ;               while(1) 
 0008           ;                       {
 0008           ;                       // Daten Einlesen
 0008           ;                       
 0008           ;                       Dateneinlesen();                                         
 0008           ;                       // Parameter Berechnen
 0008           ;                       
 0008           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0008           ;                       
 0008           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKR
 0008           ;                                                               - kochKRZ * hichBeschleunigungssumme;
 0008           ;                       
 0008           ;                       // Daten Ausgeben:
 0008           ;                               
 0008           ;                       Ausgangansteuern(hichAusgangswert);
 0008           ;                       
 0008           ;                       LCDansteuern(prozess.pdchEntfernung);
 0008           ; 
 0008           ;                               
 0008           ;                       };
 0008           ;                       
 0008           ;       /********************************************************
 0008           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0008           ;       * und sind für das Fertige Programm nicht relevant.            *
 0008           ;       * Sie werden anstelle der Regulären while Schleife             *
 0008           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0008           ;       * erfüllt ist.                                                                                 *
 0008           ;       ********************************************************/
 0008           ; 
 0008           ;       #else
 0008           ;                                               
 0008           ;               // whileschleife zu testzwecken
 0008           ;               // Konstante zur verweildauer in der schleife
 0008           ;               while (1)
 0008           ;                       {
 0008                   .dbline 106
 0008           ;                               Dateneinlesen();
 0008 9049              xcall _Dateneinlesen
 000A                   .dbline 126
 000A           ;                               //Ausgangansteuern(250, 2);
 000A           ;                               // LCDansteuern(1);
 000A           ;                               //if (PRT0DR & 0x01)
 000A           ;                               //{LCDansteuern(1);}
 000A           ;                               //else {LCDansteuern(PRT0DR & 0x01);}
 000A           ;                                       //LCDansteuern(PRT0DR & 0x01);
 000A           ;                               /*
 000A           ;                               // Erkennen von eingangssignalen über A/D-Wandler
 000A           ;                               if (prozess.pdchEntfernung <= 110)
 000A           ;                               {
 000A           ;                                       LCDansteuern(1);
 000A           ;                                       Ausgangansteuern(250,1);}
 000A           ;                               else if (prozess.pdchBechleunigung <= 110)
 000A           ;                               {       LCDansteuern(2);
 000A           ;                                       Ausgangansteuern(250,2);}
 000A           ;                               else {
 000A           ;                               Ausgangansteuern(0,0);  
 000A           ;                               }
 000A           ;                               */
 000A           ;                               LCDansteuern(prozess.pdchSollwert);
 000A 5102              mov A,[_prozess+2]
 000C 08                push A
 000D 9009              xcall _LCDansteuern
 000F 38FF              add SP,-1
 0011                   .dbline 127
 0011           ;                       };
 0011           L4:
 0011                   .dbline 104
 0011 8FF6              xjmp L3
 0013           X0:
 0013                   .dbline -2
 0013           L2:
 0013 38FC              add SP,-4
 0015 20                pop X
 0016                   .dbline 0 ; func end
 0016 8FFF              jmp .
 0018                   .dbsym l hichBeschleunigungssumme 3 c
 0018                   .dbsym l hichAusgangswert 2 c
 0018                   .dbsym l kochKRZ 1 c
 0018                   .dbsym l kochKR 0 c
 0018                   .dbend
 0018                   .dbfunc e LCDansteuern _LCDansteuern fV
 0018           ;           rgch -> X+0
 0018           ;       hichdata -> X-4
 0018           _LCDansteuern::
 0018                   .dbline -1
 0018 10                push X
 0019 4F                mov X,SP
 001A 3805              add SP,5
 001C                   .dbline 138
 001C           ;                       
 001C           ;       // Präprozessor: Ende der Verzweifung
 001C           ;       #endif 
 001C           ; }
 001C           ;       
 001C           ; /********************************************************
 001C           ; *                     Funktionsdeklarationen                                          *
 001C           ; ********************************************************/
 001C           ;       
 001C           ; void LCDansteuern(char hichdata)
 001C           ;       {               
 001C                   .dbline 141
 001C           ;                       char rgch[5];
 001C           ;                       // Text auf LCD ausgeben
 001C           ;                       LCD_1_Position(0,5);    
 001C 10                push X
 001D 5705              mov X,5
 001F 5000              mov A,0
 0021 7C0000            xcall _LCD_1_Position
 0024                   .dbline 142
 0024           ;                       LCD_1_PrCString("Wert:");
 0024 5000              mov A,>L8
 0026 08                push A
 0027 5000              mov A,<L8
 0029 5C                mov X,A
 002A 18                pop A
 002B 7C0000            xcall _LCD_1_PrCString
 002E 20                pop X
 002F                   .dbline 145
 002F           ;                       
 002F           ;                       // Zahl Auf LCD ausgeben
 002F           ;                       itoa(rgch,hichdata,10);
 002F 5000              mov A,0
 0031 08                push A
 0032 500A              mov A,10
 0034 08                push A
 0035 52FC              mov A,[X-4]
 0037 5300              mov [__r1],A
 0039 5000              mov A,0
 003B 08                push A
 003C 5100              mov A,[__r1]
 003E 08                push A
 003F 5000              mov A,0
 0041 08                push A
 0042 10                push X
 0043 7C0000            xcall _itoa
 0046 38FA              add SP,-6
 0048                   .dbline 146
 0048           ;                       LCD_1_PrString(rgch);           
 0048 10                push X
 0049 5100              mov A,[__r0]
 004B 7C0000            xcall _LCD_1_PrString
 004E 20                pop X
 004F                   .dbline -2
 004F           L7:
 004F 38FB              add SP,-5
 0051 20                pop X
 0052                   .dbline 0 ; func end
 0052 7F                ret
 0053                   .dbsym l rgch 0 A[5:5]c
 0053                   .dbsym l hichdata -4 c
 0053                   .dbend
 0053                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 0053           _Dateneinlesen::
 0053                   .dbline -1
 0053                   .dbline 151
 0053           ; 
 0053           ;       }
 0053           ;       
 0053           ; void Dateneinlesen(void)
 0053           ;       {       
 0053                   .dbline 154
 0053           ;               // I2C Adresse: 1001 000 -> 0x48
 0053           ;               // Einleseforgang beginnen
 0053           ;               I2Cm_fSendRepeatStart(0x48,I2Cm_READ);
 0053 10                push X
 0054 5701              mov X,1
 0056 5048              mov A,72
 0058 7C0000            xcall _I2Cm_fSendRepeatStart
 005B                   .dbline 156
 005B           ;               // Daten Einlesen und ACK an slafe senden
 005B           ;               prozess.pdchBechleunigung = I2Cm_bRead(I2Cm_ACKslave);
 005B 5001              mov A,1
 005D 7C0000            xcall _I2Cm_bRead
 0060 20                pop X
 0061 5300              mov [_prozess],A
 0063                   .dbline 157
 0063           ;               prozess.pdchEntfernung  = I2Cm_bRead(I2Cm_ACKslave);
 0063 10                push X
 0064 5001              mov A,1
 0066 7C0000            xcall _I2Cm_bRead
 0069 20                pop X
 006A 5301              mov [_prozess+1],A
 006C                   .dbline 159
 006C           ;               // lezte Daten ohne ACK einlesen
 006C           ;               prozess.pdchSollwert = I2Cm_bRead(I2Cm_NAKslave);
 006C 10                push X
 006D 5000              mov A,0
 006F 7C0000            xcall _I2Cm_bRead
 0072 20                pop X
 0073 5302              mov [_prozess+2],A
 0075                   .dbline 161
 0075           ;                     
 0075           ;        I2Cm_SendStop();
 0075 10                push X
 0076 7C0000            xcall _I2Cm_SendStop
 0079 20                pop X
 007A                   .dbline -2
 007A           L9:
 007A                   .dbline 0 ; func end
 007A 7F                ret
 007B                   .dbend
 007B                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 007B           ;   hichRichtung -> X-5
 007B           ; hichAusgangswert -> X-4
 007B           _Ausgangansteuern::
 007B                   .dbline -1
 007B 10                push X
 007C 4F                mov X,SP
 007D 3802              add SP,2
 007F                   .dbline 166
 007F           ; 
 007F           ;       }
 007F           ; 
 007F           ;       void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 007F           ;       {
 007F                   .dbline 168
 007F           ;               // Drehrichtung Auswählen
 007F           ;               switch(hichRichtung) {
 007F 52FB              mov A,[X-5]
 0081 5401              mov [X+1],A
 0083 560000            mov [X+0],0
 0086 3D0000            cmp [X+0],0
 0089 B006              jnz X1
 008B 3D0101            cmp [X+1],1
 008E A00D              jz L16
 0090           X1:
 0090 3D0000            cmp [X+0],0
 0093 B006              jnz X2
 0095 3D0102            cmp [X+1],2
 0098 A011              jz L17
 009A           X2:
 009A 801D              xjmp L13
 009C           L16:
 009C                   .dbline 173
 009C           ;                       
 009C           ;                       // Linkslauf
 009C           ;                       case 1: 
 009C           ;                               // IN1 und IN2 Ansteuern
 009C           ;                               IN1_Switch(0);
 009C 10                push X
 009D 5000              mov A,0
 009F 7C0000            xcall _IN1_Switch
 00A2                   .dbline 174
 00A2           ;                               IN2_Switch(1);
 00A2 5001              mov A,1
 00A4 7C0000            xcall _IN2_Switch
 00A7 20                pop X
 00A8                   .dbline 175
 00A8           ;                               break;
 00A8 8018              xjmp L14
 00AA           L17:
 00AA                   .dbline 181
 00AA           ;                       
 00AA           ;                       // Rechtslauf
 00AA           ;                       case 2:
 00AA           ;                               
 00AA           ;                               // IN1 und IN2 Ansteuern
 00AA           ;                               IN1_Switch(1);
 00AA 10                push X
 00AB 5001              mov A,1
 00AD 7C0000            xcall _IN1_Switch
 00B0                   .dbline 182
 00B0           ;                               IN2_Switch(0);
 00B0 5000              mov A,0
 00B2 7C0000            xcall _IN2_Switch
 00B5 20                pop X
 00B6                   .dbline 183
 00B6           ;                               break;
 00B6 800A              xjmp L14
 00B8           L13:
 00B8                   .dbline 188
 00B8           ;                               
 00B8           ;                       // Ungültiger Wert
 00B8           ;                       default:
 00B8           ;                               // Pulsweite auf 0 setzen
 00B8           ;                               PWM8_1_WritePulseWidth(0);
 00B8 10                push X
 00B9 5000              mov A,0
 00BB 7C0000            xcall _PWM8_1_WritePulseWidth
 00BE 20                pop X
 00BF                   .dbline 190
 00BF           ;                               // Funktion verlassen
 00BF           ;                               return ;
 00BF 8008              xjmp L12
 00C1           L14:
 00C1                   .dbline 195
 00C1           ;                               
 00C1           ;                       }
 00C1           ;               
 00C1           ;               // Pulsweite auf hichAusgangswert setzen                
 00C1           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 00C1 10                push X
 00C2 52FC              mov A,[X-4]
 00C4 7C0000            xcall _PWM8_1_WritePulseWidth
 00C7 20                pop X
 00C8                   .dbline -2
 00C8           L12:
 00C8 38FE              add SP,-2
 00CA 20                pop X
 00CB                   .dbline 0 ; func end
 00CB 7F                ret
 00CC                   .dbsym l hichRichtung -5 c
 00CC                   .dbsym l hichAusgangswert -4 c
 00CC                   .dbend
 00CC                   .dbfunc e Initalisierung _Initalisierung fV
 00CC           _Initalisierung::
 00CC                   .dbline -1
 00CC                   .dbline 199
 00CC           ;       }
 00CC           ; 
 00CC           ; void Initalisierung(void)
 00CC           ;       {
 00CC                   .dbline 201
 00CC           ;       //globale Interrupts Freigeben
 00CC           ;       M8C_EnableGInt;
 00CC 7101                      or  F, 01h
 00CE           
 00CE                   .dbline 204
 00CE           ;               
 00CE           ;       // I2C Starten
 00CE           ;       I2Cm_Start();
 00CE 10                push X
 00CF 7C0000            xcall _I2Cm_Start
 00D2                   .dbline 206
 00D2           ;       // A/D Wandler konfigurieren
 00D2           ;       I2Cm_fSendStart(0x48,I2Cm_WRITE);       
 00D2 5700              mov X,0
 00D4 5048              mov A,72
 00D6 7C0000            xcall _I2Cm_fSendStart
 00D9                   .dbline 207
 00D9           ;     I2Cm_fWrite(0x00);
 00D9 5000              mov A,0
 00DB 7C0000            xcall _I2Cm_fWrite
 00DE                   .dbline 208
 00DE           ;       I2Cm_SendStop();
 00DE 7C0000            xcall _I2Cm_SendStop
 00E1                   .dbline 210
 00E1           ;       // Initialisieren des LCD-Displays
 00E1           ;       LCD_1_Start();                                                  
 00E1 7C0000            xcall _LCD_1_Start
 00E4                   .dbline 214
 00E4           ;       
 00E4           ;       // Initialisieren des PWM-Moduls
 00E4           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 00E4           ;     PWM8_1_Start();
 00E4 7C0000            xcall _PWM8_1_Start
 00E7                   .dbline 219
 00E7           ;                               
 00E7           ;       
 00E7           ;       //Initialisieren der Digitalen Ausgänge
 00E7           ;               
 00E7           ;       IN1_Start();    
 00E7 7C0000            xcall _IN1_Start
 00EA                   .dbline 220
 00EA           ;       IN2_Start();
 00EA 7C0000            xcall _IN2_Start
 00ED 20                pop X
 00EE                   .dbline -2
 00EE           L18:
 00EE                   .dbline 0 ; func end
 00EE 7F                ret
 00EF                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\BEACHE~2\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L8:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
