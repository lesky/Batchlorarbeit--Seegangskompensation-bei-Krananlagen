                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           L2:
 0000 5465737400        .byte 'T,'e,'s,'t,0
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\neu\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; kochPeriodendauer -> X+10
 0000           ;   pbchSollwert -> X+9
 0000           ; hichAusgangswert -> X+8
 0000           ;  pbchPulsweite -> X+7
 0000           ; pdchEntfernung -> X+6
 0000           ; pdchBechleunigung -> X+5
 0000           ;        rgchLCD -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 380B              add SP,11
 0004                   .dbline 14
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; // Programm: Seegangskompensation bei Krahnanlagen
 0004           ; // Version: 0.0.0.1
 0004           ; // Controler: CY8C27446-24PXI
 0004           ; // Variablenbenennung nach Apps Hungaryan
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 16
 0004           ;       // Difinition der Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    // Periodendauer
 0004 560A32            mov [X+10],50
 0007                   .dbline 19
 0007           ;       // Variablendeklration
 0007           ;       
 0007           ;       char rgchLCD[] = "Test";                                                // Define RAM string
 0007 550000            mov [__r1],<L2
 000A 550000            mov [__r0],>L2
 000D 5A00              mov [__r3],X
 000F 10                push X
 0010 550000            mov [__rX],0
 0013 5100              mov A,[__r0]
 0015 5800              mov X,[__r1]
 0017           X1:
 0017 08                push A
 0018 28                romx
 0019 3F00              mvi [__r3],A
 001B 18                pop A
 001C 75                inc X
 001D 0900              adc A,0
 001F 7600              inc [__rX]
 0021 3C0005            cmp [__rX],5
 0024 BFF2              jnz X1
 0026 20                pop X
 0027                   .dbline 26
 0027           ;       char pdchBechleunigung, pdchEntfernung;                 // Variablen zum Einlesen der Daten
 0027           ;       char pbchSollwert;                                                              
 0027           ;       char pbchPulsweite;
 0027           ;       char hichAusgangswert;                                                  
 0027           ;       // Initialisierung des Controlers
 0027           ;       
 0027           ;       M8C_EnableGInt;                                         // Enable global interrupts     
 0027 7101                      or  F, 01h
 0029           
 0029                   .dbline 28
 0029           ;       
 0029           ;       LCD_1_Start();                                                  // Initialisieren des LCD-Displays
 0029 10                push X
 002A 7C0000            xcall _LCD_1_Start
 002D 20                pop X
 002E                   .dbline 30
 002E           ;       
 002E           ;       PWM8_1_WritePeriod(kochPeriodendauer);          // Initialisieren der PWM-Module                    
 002E 10                push X
 002F 520A              mov A,[X+10]
 0031 7C0000            xcall _PWM8_1_WritePeriod
 0034                   .dbline 31
 0034           ;     PWM8_1_Start();
 0034 7C0000            xcall _PWM8_1_Start
 0037                   .dbline 33
 0037           ; 
 0037           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     // Initialisieren des Dualen AD-Wandlers
 0037 5003              mov A,3
 0039 7C0000            xcall _DUALADC8_Start
 003C                   .dbline 34
 003C           ;       DUALADC8_SetCalcTime(100);                              // f端r Entfernung und Beschleunigung
 003C 5700              mov X,0
 003E 5064              mov A,100
 0040 7C0000            xcall _DUALADC8_SetCalcTime
 0043                   .dbline 35
 0043           ;       DUALADC8_GetSamples(); 
 0043 7C0000            xcall _DUALADC8_GetSamples
 0046                   .dbline 37
 0046           ;       
 0046           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         // Initialisieren des AD-Wandlers
 0046 5003              mov A,3
 0048 7C0000            xcall _ADCINC_Start
 004B                   .dbline 38
 004B           ;       ADCINC_GetSamples(0);                                   // f端r den Sollwert
 004B 5000              mov A,0
 004D 7C0000            xcall _ADCINC_GetSamples
 0050 20                pop X
 0051                   .dbline 40
 0051           ;       
 0051           ;       DIGITALOUT_Start;                                               //Initialisieren der Digitalen Ausgangs
 0051 804F              xjmp L4
 0053           L3:
 0053                   .dbline 43
 0053           ;       
 0053           ;       // Endlosschleife
 0053           ;       while(1) {
 0053                   .dbline 46
 0053           ;       
 0053           ;               // Daten Einlesen
 0053           ;               if(ADCINC_fIsDataAvailable() != 0)                      // Wenn Sollwertdaten bereit sind
 0053 10                push X
 0054 7C0000            xcall _ADCINC_fIsDataAvailable
 0057 20                pop X
 0058 3900              cmp A,0
 005A A008              jz L9
 005C                   .dbline 47
 005C           ;               pbchSollwert = ADCINC_cClearFlagGetData();              // Einlesen des Sollwertes
 005C 10                push X
 005D 7C0000            xcall _ADCINC_cClearFlagGetData
 0060 20                pop X
 0061 5409              mov [X+9],A
 0063           L8:
 0063                   .dbline 50
 0063           ;                                                                       // data ready flag zur端vksetzen
 0063           ;                          
 0063           ;       while(DUALADC8_fIsDataAvailable == 0);                  // Auf Entfernung und Position Warten
 0063           L9:
 0063                   .dbline 50
 0063 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 0065 10                push X
 0066 5800              mov X,[__r1]
 0068 08                push A
 0069 28                romx
 006A 5300              mov [__r0],A
 006C 18                pop A
 006D 75                inc X
 006E 0900              adc A,0
 0070 28                romx
 0071 20                pop X
 0072 3C0000            cmp [__r0],0
 0075 AFED              jz L8
 0077                   .dbline 51
 0077           ;               pdchBechleunigung = DUALADC8_cGetData1();       // Einlesen der Beschleunigung
 0077 10                push X
 0078 7C0000            xcall _DUALADC8_cGetData1
 007B 20                pop X
 007C 5405              mov [X+5],A
 007E                   .dbline 52
 007E           ;       pdchEntfernung = DUALADC8_cGetData2ClearFlag(); // Einlesen der Entfernung
 007E 10                push X
 007F 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 0082 20                pop X
 0083 5406              mov [X+6],A
 0085                   .dbline 58
 0085           ;                                                                       // data ready flag zur端vksetzen                                    
 0085           ;               // Parameter Berechnen
 0085           ;               
 0085           ;               // Ausgang Setzen
 0085           ;               
 0085           ;               PWM8_1_WritePulseWidth(pbchPulsweite);
 0085 10                push X
 0086 5207              mov A,[X+7]
 0088 7C0000            xcall _PWM8_1_WritePulseWidth
 008B 20                pop X
 008C                   .dbline 60
 008C           ;               // positive Drehrichtung
 008C           ;               if (hichAusgangswert >= 0){                             
 008C 3D0800            cmp [X+8],0
 008F C001              jc L11
 0091           X2:
 0091                   .dbline 61
 0091           ;               DIGITALOUT_On;
 0091                   .dbline 61
 0091                   .dbline 63
 0091           ;                       
 0091           ;               }
 0091           L11:
 0091                   .dbline 65
 0091           ;               // negative Drehrichtung
 0091           ;               else {                          
 0091                   .dbline 66
 0091           ;               DIGITALOUT_Off; 
 0091                   .dbline 67
 0091           ;               }
 0091           L12:
 0091                   .dbline 71
 0091           ;               
 0091           ;               
 0091           ;               // LCD Ansteuern 
 0091           ;               LCD_1_Position(0,5);            
 0091 10                push X
 0092 5705              mov X,5
 0094 5000              mov A,0
 0096 7C0000            xcall _LCD_1_Position
 0099 20                pop X
 009A                   .dbline 72
 009A           ;               LCD_1_PrString(rgchLCD);
 009A 10                push X
 009B 5100              mov A,[__r0]
 009D 7C0000            xcall _LCD_1_PrString
 00A0 20                pop X
 00A1                   .dbline 74
 00A1           ;       
 00A1           ;       };
 00A1           L4:
 00A1                   .dbline 43
 00A1 8FB1              xjmp L3
 00A3           X0:
 00A3                   .dbline -2
 00A3           L1:
 00A3 38F5              add SP,-11
 00A5 20                pop X
 00A6                   .dbline 0 ; func end
 00A6 8FFF              jmp .
 00A8                   .dbsym l kochPeriodendauer 10 c
 00A8                   .dbsym l pbchSollwert 9 c
 00A8                   .dbsym l hichAusgangswert 8 c
 00A8                   .dbsym l pbchPulsweite 7 c
 00A8                   .dbsym l pdchEntfernung 6 c
 00A8                   .dbsym l pdchBechleunigung 5 c
 00A8                   .dbsym l rgchLCD 0 A[5:5]c
 00A8                   .dbend
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
