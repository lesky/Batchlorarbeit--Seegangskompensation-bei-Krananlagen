                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+3
 0000           ; hichAusgangswert -> X+2
 0000           ;         kochKS -> X+1
 0000           ;         kochKP -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.7                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char, char);
 0004           ; 
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 71
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten                                   
 0004           ;       char kochKP;
 0004           ;       char kochKS;
 0004           ;               
 0004           ;       // Variablen
 0004           ;       char hichAusgangswert;                                                  
 0004           ;       char hichBeschleunigungssumme;  
 0004           ;               
 0004           ;       /********************************************************
 0004           ;       *                       Initialisierung des Controllers                         *
 0004           ;       ********************************************************/
 0004           ;       
 0004           ;       //globale Interrupts Freigeben
 0004           ;       M8C_EnableGInt;                                                 
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 74
 0006           ;       
 0006           ;       // Initialisieren des LCD-Displays
 0006           ;       LCD_1_Start();                                                  
 0006 10                push X
 0007 7C0000            xcall _LCD_1_Start
 000A                   .dbline 78
 000A           ;       
 000A           ;       // Initialisieren des PWM-Moduls
 000A           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 000A           ;     PWM8_1_Start();
 000A 7C0000            xcall _PWM8_1_Start
 000D                   .dbline 80
 000D           ;       
 000D           ;       PGA_1_Start(PGA_1_HIGHPOWER);
 000D 5003              mov A,3
 000F 7C0000            xcall _PGA_1_Start
 0012                   .dbline 81
 0012           ;       PGA_2_Start(PGA_2_HIGHPOWER);
 0012 5003              mov A,3
 0014 7C0000            xcall _PGA_2_Start
 0017                   .dbline 82
 0017           ;       PGA_3_Start(PGA_3_HIGHPOWER);   
 0017 5003              mov A,3
 0019 7C0000            xcall _PGA_3_Start
 001C                   .dbline 86
 001C           ;       
 001C           ;       // Initialisieren des Dualen AD-Wandlers
 001C           ;       // für Entfernung und Beschleunigung
 001C           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                                             
 001C 5003              mov A,3
 001E 7C0000            xcall _DUALADC8_Start
 0021                   .dbline 87
 0021           ;       DUALADC8_GetSamples(); 
 0021 7C0000            xcall _DUALADC8_GetSamples
 0024                   .dbline 91
 0024           ;       
 0024           ;       // Initialisieren des AD-Wandlers
 0024           ;       // für den Sollwert
 0024           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0024 5003              mov A,3
 0026 7C0000            xcall _ADCINC_Start
 0029                   .dbline 92
 0029           ;       ADCINC_GetSamples(0);                                   
 0029 5000              mov A,0
 002B 7C0000            xcall _ADCINC_GetSamples
 002E                   .dbline 95
 002E           ;       
 002E           ;       //Initialisieren der Digitalen Ausgänge
 002E           ;       IN1_Start();    
 002E 7C0000            xcall _IN1_Start
 0031                   .dbline 96
 0031           ;       IN2_Start();
 0031 7C0000            xcall _IN2_Start
 0034                   .dbline 97
 0034           ;       SELBSTTEST_Start();
 0034 7C0000            xcall _SELBSTTEST_Start
 0037                   .dbline 139
 0037           ;       
 0037           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0037           ;       #ifndef TEST
 0037           ;               
 0037           ;               /********************************************************
 0037           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0037           ;               ********************************************************/
 0037           ; 
 0037           ;               while(1) 
 0037           ;                       {
 0037           ;                       // Daten Einlesen
 0037           ;                       
 0037           ;                       Dateneinlesen();
 0037           ;                                                
 0037           ;                       // Parameter Berechnen
 0037           ;                       
 0037           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0037           ;                       
 0037           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0037           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 0037           ;                       
 0037           ;                       // Daten Ausgeben:
 0037           ;                               
 0037           ;                       Ausgangansteuern(hichAusgangswert);
 0037           ;                       
 0037           ;                       LCDansteuern(prozess.pdchEntfernung);
 0037           ; 
 0037           ;                               
 0037           ;                       };
 0037           ;                       
 0037           ;       /********************************************************
 0037           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0037           ;       * und sind für das Fertige Programm nicht relevant.            *
 0037           ;       * Sie werden anstelle der Regulären while Schleife             *
 0037           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0037           ;       * erfüllt ist.                                                                                 *
 0037           ;       ********************************************************/
 0037           ; 
 0037           ;       #else
 0037           ;                       
 0037           ;               // Selbsttest des Beshleunigungssensoers anschalten
 0037           ;               SELBSTTEST_Switch(1);
 0037 5001              mov A,1
 0039 7C0000            xcall _SELBSTTEST_Switch
 003C 20                pop X
 003D 8014              xjmp L4
 003F           L3:
 003F                   .dbline 144
 003F           ;                       
 003F           ;               // whileschleife zu testzwecken
 003F           ;               // Konstante zur verweildauer in der schleife
 003F           ;               while (1)
 003F           ;                       {
 003F                   .dbline 145
 003F           ;                               Dateneinlesen();
 003F 9053              xcall _Dateneinlesen
 0041                   .dbline 146
 0041           ;                               Ausgangansteuern(0, 2);
 0041 5002              mov A,2
 0043 08                push A
 0044 5000              mov A,0
 0046 08                push A
 0047 907E              xcall _Ausgangansteuern
 0049                   .dbline 156
 0049           ;                               
 0049           ;                               // Testfunktionen Aufrufen:
 0049           ;                               // test(prozess.pdchBechleunigung);
 0049           ;                               // test(prozess.pdchEntfernung);
 0049           ;                               // test(prozess.pdchSollwert);
 0049           ;                               // LCDansteuern(1);
 0049           ;                               //if (PRT0DR & 0x01)
 0049           ;                               //{LCDansteuern(1);}
 0049           ;                               //else {LCDansteuern(PRT0DR & 0x01);}
 0049           ;                                       LCDansteuern(PRT0DR & 0x01);
 0049 5D00              mov A,REG[0]
 004B 2101              and A,1
 004D 08                push A
 004E 9009              xcall _LCDansteuern
 0050 38FD              add SP,-3
 0052                   .dbline 157
 0052           ; {
 0052                   .dbline 159
 0052           ;  // Pin is set. Add code to process
 0052           ; }
 0052                   .dbline 160
 0052           ;                       };
 0052           L4:
 0052                   .dbline 143
 0052 8FEC              xjmp L3
 0054           X0:
 0054                   .dbline -2
 0054           L2:
 0054 38FC              add SP,-4
 0056 20                pop X
 0057                   .dbline 0 ; func end
 0057 8FFF              jmp .
 0059                   .dbsym l hichBeschleunigungssumme 3 c
 0059                   .dbsym l hichAusgangswert 2 c
 0059                   .dbsym l kochKS 1 c
 0059                   .dbsym l kochKP 0 c
 0059                   .dbend
 0059                   .dbfunc e LCDansteuern _LCDansteuern fV
 0059           ;           rgch -> X+0
 0059           ;       hichdata -> X-4
 0059           _LCDansteuern::
 0059                   .dbline -1
 0059 10                push X
 005A 4F                mov X,SP
 005B 3805              add SP,5
 005D                   .dbline 171
 005D           ;                       
 005D           ;       // Präprozessor: Ende der Verzweifung
 005D           ;       #endif 
 005D           ; }
 005D           ;       
 005D           ; /********************************************************
 005D           ; *                     Funktionsdeklarationen                                          *
 005D           ; ********************************************************/
 005D           ;       
 005D           ; void LCDansteuern(char hichdata)
 005D           ;       {               
 005D                   .dbline 174
 005D           ;                       char rgch[5];
 005D           ;                       // Text auf LCD ausgeben
 005D           ;                       LCD_1_Position(0,5);    
 005D 10                push X
 005E 5705              mov X,5
 0060 5000              mov A,0
 0062 7C0000            xcall _LCD_1_Position
 0065                   .dbline 175
 0065           ;                       LCD_1_PrCString("Wert:");
 0065 5000              mov A,>L7
 0067 08                push A
 0068 5000              mov A,<L7
 006A 5C                mov X,A
 006B 18                pop A
 006C 7C0000            xcall _LCD_1_PrCString
 006F 20                pop X
 0070                   .dbline 178
 0070           ;                       
 0070           ;                       // Zahl Auf LCD ausgeben
 0070           ;                       itoa(rgch,hichdata,10);
 0070 5000              mov A,0
 0072 08                push A
 0073 500A              mov A,10
 0075 08                push A
 0076 52FC              mov A,[X-4]
 0078 5300              mov [__r1],A
 007A 5000              mov A,0
 007C 08                push A
 007D 5100              mov A,[__r1]
 007F 08                push A
 0080 5000              mov A,0
 0082 08                push A
 0083 10                push X
 0084 7C0000            xcall _itoa
 0087 38FA              add SP,-6
 0089                   .dbline 179
 0089           ;                       LCD_1_PrString(rgch);           
 0089 10                push X
 008A 5100              mov A,[__r0]
 008C 7C0000            xcall _LCD_1_PrString
 008F 20                pop X
 0090                   .dbline -2
 0090           L6:
 0090 38FB              add SP,-5
 0092 20                pop X
 0093                   .dbline 0 ; func end
 0093 7F                ret
 0094                   .dbsym l rgch 0 A[5:5]c
 0094                   .dbsym l hichdata -4 c
 0094                   .dbend
 0094                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 0094           _Dateneinlesen::
 0094                   .dbline -1
 0094                   .dbline 184
 0094           ; 
 0094           ;       }
 0094           ;       
 0094           ; void Dateneinlesen(void)
 0094           ;       {       
 0094                   .dbline 186
 0094           ;       // Wenn Sollwertdaten bereit sind
 0094           ;       if(ADCINC_fIsDataAvailable() != 0)
 0094 10                push X
 0095 7C0000            xcall _ADCINC_fIsDataAvailable
 0098 20                pop X
 0099 3900              cmp A,0
 009B A008              jz L13
 009D                   .dbline 190
 009D           ;                       
 009D           ;               // Einlesen des Sollwertes
 009D           ;               // data ready flag zurüvksetzen        
 009D           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 009D 10                push X
 009E 7C0000            xcall _ADCINC_cClearFlagGetData
 00A1 20                pop X
 00A2 5302              mov [_prozess+2],A
 00A4           L12:
 00A4                   .dbline 193
 00A4           ;                          
 00A4           ;       // Auf Entfernung und Position Warten
 00A4           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00A4           L13:
 00A4                   .dbline 193
 00A4 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00A6 10                push X
 00A7 5800              mov X,[__r1]
 00A9 08                push A
 00AA 28                romx
 00AB 5300              mov [__r0],A
 00AD 18                pop A
 00AE 75                inc X
 00AF 0900              adc A,0
 00B1 28                romx
 00B2 20                pop X
 00B3 3C0000            cmp [__r0],0
 00B6 AFED              jz L12
 00B8                   .dbline 195
 00B8           ;               // Einlesen der Beschleunigung
 00B8           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00B8 10                push X
 00B9 7C0000            xcall _DUALADC8_cGetData1
 00BC 20                pop X
 00BD 5300              mov [_prozess],A
 00BF                   .dbline 199
 00BF           ;       
 00BF           ;               // Einlesen der Entfernung
 00BF           ;         // data ready flag zurüvksetzen         
 00BF           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00BF 10                push X
 00C0 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00C3 20                pop X
 00C4 5301              mov [_prozess+1],A
 00C6                   .dbline -2
 00C6           L8:
 00C6                   .dbline 0 ; func end
 00C6 7F                ret
 00C7                   .dbend
 00C7                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00C7           ;            iin -> X+0
 00C7           ;   hichRichtung -> X-5
 00C7           ; hichAusgangswert -> X-4
 00C7           _Ausgangansteuern::
 00C7                   .dbline -1
 00C7 10                push X
 00C8 4F                mov X,SP
 00C9 3804              add SP,4
 00CB                   .dbline 203
 00CB           ;       }
 00CB           ; 
 00CB           ;       void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 00CB           ;       {
 00CB                   .dbline 208
 00CB           ;               // Variablendeklaration
 00CB           ;               int iin;
 00CB           ;               
 00CB           ;               // Drehrichtung Auswählen
 00CB           ;               switch(hichRichtung) {
 00CB 52FB              mov A,[X-5]
 00CD 5403              mov [X+3],A
 00CF 560200            mov [X+2],0
 00D2 3D0200            cmp [X+2],0
 00D5 B006              jnz X1
 00D7 3D0301            cmp [X+3],1
 00DA A00D              jz L20
 00DC           X1:
 00DC 3D0200            cmp [X+2],0
 00DF B006              jnz X2
 00E1 3D0302            cmp [X+3],2
 00E4 A011              jz L21
 00E6           X2:
 00E6 801D              xjmp L17
 00E8           L20:
 00E8                   .dbline 213
 00E8           ;                       
 00E8           ;                       // Linkslauf
 00E8           ;                       case 1: 
 00E8           ;                               // IN1 und IN2 Ansteuern
 00E8           ;                               IN1_Switch(0);
 00E8 10                push X
 00E9 5000              mov A,0
 00EB 7C0000            xcall _IN1_Switch
 00EE                   .dbline 214
 00EE           ;                               IN2_Switch(1);
 00EE 5001              mov A,1
 00F0 7C0000            xcall _IN2_Switch
 00F3 20                pop X
 00F4                   .dbline 215
 00F4           ;                               break;
 00F4 8018              xjmp L18
 00F6           L21:
 00F6                   .dbline 221
 00F6           ;                       
 00F6           ;                       // Rechtslauf
 00F6           ;                       case 2:
 00F6           ;                               
 00F6           ;                               // IN1 und IN2 Ansteuern
 00F6           ;                               IN1_Switch(1);
 00F6 10                push X
 00F7 5001              mov A,1
 00F9 7C0000            xcall _IN1_Switch
 00FC                   .dbline 222
 00FC           ;                               IN2_Switch(0);
 00FC 5000              mov A,0
 00FE 7C0000            xcall _IN2_Switch
 0101 20                pop X
 0102                   .dbline 223
 0102           ;                               break;
 0102 800A              xjmp L18
 0104           L17:
 0104                   .dbline 228
 0104           ;                               
 0104           ;                       // Ungültiger Wert
 0104           ;                       default:
 0104           ;                               // Pulsweite auf 0 setzen
 0104           ;                               PWM8_1_WritePulseWidth(0);
 0104 10                push X
 0105 5000              mov A,0
 0107 7C0000            xcall _PWM8_1_WritePulseWidth
 010A 20                pop X
 010B                   .dbline 230
 010B           ;                               // Funktion verlassen
 010B           ;                               return ;
 010B 8008              xjmp L16
 010D           L18:
 010D                   .dbline 235
 010D           ;                               
 010D           ;                       }
 010D           ;               
 010D           ;               // Pulsweite auf hichAusgangswert setzen                
 010D           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 010D 10                push X
 010E 52FC              mov A,[X-4]
 0110 7C0000            xcall _PWM8_1_WritePulseWidth
 0113 20                pop X
 0114                   .dbline -2
 0114           L16:
 0114 38FC              add SP,-4
 0116 20                pop X
 0117                   .dbline 0 ; func end
 0117 7F                ret
 0118                   .dbsym l iin 0 I
 0118                   .dbsym l hichRichtung -5 c
 0118                   .dbsym l hichAusgangswert -4 c
 0118                   .dbend
 0118                   .dbfunc e test _test fV
 0118           ;            iin -> X+0
 0118           ;       hichdata -> X-4
 0118           _test::
 0118                   .dbline -1
 0118 10                push X
 0119 4F                mov X,SP
 011A 3802              add SP,2
 011C                   .dbline 242
 011C           ;       }
 011C           ;               
 011C           ; // Präprozessor: kompiliere Funktion nur wenn Test
 011C           ; #ifdef TEST
 011C           ;       // Ausgabe der Testdaten auf LCD-Display
 011C           ;       void test(char hichdata)
 011C           ;               {
 011C                   .dbline 245
 011C           ;               // gibt 99999 mal LCD Aus
 011C           ;               int iin;
 011C           ;               for (iin = 0; iin <= 500; iin ++)
 011C 560100            mov [X+1],0
 011F 560000            mov [X+0],0
 0122           L23:
 0122                   .dbline 246
 0122           ;                       {
 0122                   .dbline 247
 0122           ;                       LCDansteuern(hichdata); 
 0122 52FC              mov A,[X-4]
 0124 08                push A
 0125 9F32              xcall _LCDansteuern
 0127 38FF              add SP,-1
 0129                   .dbline 248
 0129           ;                       }
 0129           L24:
 0129                   .dbline 245
 0129 7701              inc [X+1]
 012B 0F0000            adc [X+0],0
 012E                   .dbline 245
 012E 50F4              mov A,-12
 0130 1301              sub A,[X+1]
 0132 5200              mov A,[X+0]
 0134 3180              xor A,-128
 0136 5300              mov [__rX],A
 0138 5081              mov A,(1 ^ 0x80)
 013A 1A00              sbb A,[__rX]
 013C DFE5              jnc L23
 013E           X3:
 013E                   .dbline -2
 013E           L22:
 013E 38FE              add SP,-2
 0140 20                pop X
 0141                   .dbline 0 ; func end
 0141 7F                ret
 0142                   .dbsym l iin 0 I
 0142                   .dbsym l hichdata -4 c
 0142                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L7:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
