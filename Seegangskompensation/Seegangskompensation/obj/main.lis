                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+3
 0000           ; hichAusgangswert -> X+2
 0000           ;         kochKS -> X+1
 0000           ;         kochKP -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.7                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char, char);
 0004           ; 
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 71
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten                                   
 0004           ;       char kochKP;
 0004           ;       char kochKS;
 0004           ;               
 0004           ;       // Variablen
 0004           ;       char hichAusgangswert;                                                  
 0004           ;       char hichBeschleunigungssumme;  
 0004           ;               
 0004           ;       /********************************************************
 0004           ;       *                       Initialisierung des Controllers                         *
 0004           ;       ********************************************************/
 0004           ;       
 0004           ;       //globale Interrupts Freigeben
 0004           ;       M8C_EnableGInt;                                                 
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 74
 0006           ;       
 0006           ;       // Initialisieren des LCD-Displays
 0006           ;       LCD_1_Start();                                                  
 0006 10                push X
 0007 7C0000            xcall _LCD_1_Start
 000A                   .dbline 78
 000A           ;       
 000A           ;       // Initialisieren des PWM-Moduls
 000A           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 000A           ;     PWM8_1_Start();
 000A 7C0000            xcall _PWM8_1_Start
 000D                   .dbline 80
 000D           ;       
 000D           ;       PGA_1_Start(PGA_1_HIGHPOWER);
 000D 5003              mov A,3
 000F 7C0000            xcall _PGA_1_Start
 0012                   .dbline 81
 0012           ;       PGA_2_Start(PGA_2_HIGHPOWER);
 0012 5003              mov A,3
 0014 7C0000            xcall _PGA_2_Start
 0017                   .dbline 82
 0017           ;       PGA_3_Start(PGA_3_HIGHPOWER);   
 0017 5003              mov A,3
 0019 7C0000            xcall _PGA_3_Start
 001C                   .dbline 86
 001C           ;       
 001C           ;       // Initialisieren des Dualen AD-Wandlers
 001C           ;       // für Entfernung und Beschleunigung
 001C           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                                             
 001C 5003              mov A,3
 001E 7C0000            xcall _DUALADC8_Start
 0021                   .dbline 87
 0021           ;       DUALADC8_GetSamples(); 
 0021 7C0000            xcall _DUALADC8_GetSamples
 0024                   .dbline 91
 0024           ;       
 0024           ;       // Initialisieren des AD-Wandlers
 0024           ;       // für den Sollwert
 0024           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0024 5003              mov A,3
 0026 7C0000            xcall _ADCINC_Start
 0029                   .dbline 92
 0029           ;       ADCINC_GetSamples(0);                                   
 0029 5000              mov A,0
 002B 7C0000            xcall _ADCINC_GetSamples
 002E                   .dbline 95
 002E           ;       
 002E           ;       //Initialisieren der Digitalen Ausgänge
 002E           ;       IN1_Start();    
 002E 7C0000            xcall _IN1_Start
 0031                   .dbline 96
 0031           ;       IN2_Start();
 0031 7C0000            xcall _IN2_Start
 0034                   .dbline 97
 0034           ;       SELBSTTEST_Start();
 0034 7C0000            xcall _SELBSTTEST_Start
 0037                   .dbline 139
 0037           ;       
 0037           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0037           ;       #ifndef TEST
 0037           ;               
 0037           ;               /********************************************************
 0037           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0037           ;               ********************************************************/
 0037           ; 
 0037           ;               while(1) 
 0037           ;                       {
 0037           ;                       // Daten Einlesen
 0037           ;                       
 0037           ;                       Dateneinlesen();
 0037           ;                                                
 0037           ;                       // Parameter Berechnen
 0037           ;                       
 0037           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0037           ;                       
 0037           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0037           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 0037           ;                       
 0037           ;                       // Daten Ausgeben:
 0037           ;                               
 0037           ;                       Ausgangansteuern(hichAusgangswert);
 0037           ;                       
 0037           ;                       LCDansteuern(prozess.pdchEntfernung);
 0037           ; 
 0037           ;                               
 0037           ;                       };
 0037           ;                       
 0037           ;       /********************************************************
 0037           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0037           ;       * und sind für das Fertige Programm nicht relevant.            *
 0037           ;       * Sie werden anstelle der Regulären while Schleife             *
 0037           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0037           ;       * erfüllt ist.                                                                                 *
 0037           ;       ********************************************************/
 0037           ; 
 0037           ;       #else
 0037           ;                       
 0037           ;               // Selbsttest des Beshleunigungssensoers anschalten
 0037           ;               SELBSTTEST_Switch(1);
 0037 5001              mov A,1
 0039 7C0000            xcall _SELBSTTEST_Switch
 003C 20                pop X
 003D 802B              xjmp L4
 003F           L3:
 003F                   .dbline 144
 003F           ;                       
 003F           ;               // whileschleife zu testzwecken
 003F           ;               // Konstante zur verweildauer in der schleife
 003F           ;               while (1)
 003F           ;                       {
 003F                   .dbline 145
 003F           ;                               Dateneinlesen();
 003F 906A              xcall _Dateneinlesen
 0041                   .dbline 146
 0041           ;                               Ausgangansteuern(0, 2);
 0041 5002              mov A,2
 0043 08                push A
 0044 5000              mov A,0
 0046 08                push A
 0047 9095              xcall _Ausgangansteuern
 0049                   .dbline 152
 0049           ;                               
 0049           ;                               // Testfunktionen Aufrufen:
 0049           ;                               // test(prozess.pdchBechleunigung);
 0049           ;                               // test(prozess.pdchEntfernung);
 0049           ;                               // test(prozess.pdchSollwert);
 0049           ;                               LCDansteuern(1);
 0049 5001              mov A,1
 004B 08                push A
 004C 9022              xcall _LCDansteuern
 004E 38FD              add SP,-3
 0050                   .dbline 153
 0050           ;                               if (PRT0DR & 0x01)
 0050 5D00              mov A,REG[0]
 0052 5300              mov [__r0],A
 0054 470001            tst [__r0],1
 0057 A00A              jz L6
 0059                   .dbline 154
 0059           ;                               {LCDansteuern(1);}
 0059                   .dbline 154
 0059 5001              mov A,1
 005B 08                push A
 005C 9012              xcall _LCDansteuern
 005E 38FF              add SP,-1
 0060                   .dbline 154
 0060 8008              xjmp L7
 0062           L6:
 0062                   .dbline 155
 0062           ;                               else {LCDansteuern(0);}
 0062                   .dbline 155
 0062 5000              mov A,0
 0064 08                push A
 0065 9009              xcall _LCDansteuern
 0067 38FF              add SP,-1
 0069                   .dbline 155
 0069           L7:
 0069                   .dbline 157
 0069           ;                                       
 0069           ; {
 0069                   .dbline 159
 0069           ;  // Pin is set. Add code to process
 0069           ; }
 0069                   .dbline 160
 0069           ;                       };
 0069           L4:
 0069                   .dbline 143
 0069 8FD5              xjmp L3
 006B           X0:
 006B                   .dbline -2
 006B           L2:
 006B 38FC              add SP,-4
 006D 20                pop X
 006E                   .dbline 0 ; func end
 006E 8FFF              jmp .
 0070                   .dbsym l hichBeschleunigungssumme 3 c
 0070                   .dbsym l hichAusgangswert 2 c
 0070                   .dbsym l kochKS 1 c
 0070                   .dbsym l kochKP 0 c
 0070                   .dbend
 0070                   .dbfunc e LCDansteuern _LCDansteuern fV
 0070           ;           rgch -> X+0
 0070           ;       hichdata -> X-4
 0070           _LCDansteuern::
 0070                   .dbline -1
 0070 10                push X
 0071 4F                mov X,SP
 0072 3805              add SP,5
 0074                   .dbline 171
 0074           ;                       
 0074           ;       // Präprozessor: Ende der Verzweifung
 0074           ;       #endif 
 0074           ; }
 0074           ;       
 0074           ; /********************************************************
 0074           ; *                     Funktionsdeklarationen                                          *
 0074           ; ********************************************************/
 0074           ;       
 0074           ; void LCDansteuern(char hichdata)
 0074           ;       {               
 0074                   .dbline 174
 0074           ;                       char rgch[5];
 0074           ;                       // Text auf LCD ausgeben
 0074           ;                       LCD_1_Position(0,5);    
 0074 10                push X
 0075 5705              mov X,5
 0077 5000              mov A,0
 0079 7C0000            xcall _LCD_1_Position
 007C                   .dbline 175
 007C           ;                       LCD_1_PrCString("Wert:");
 007C 5000              mov A,>L9
 007E 08                push A
 007F 5000              mov A,<L9
 0081 5C                mov X,A
 0082 18                pop A
 0083 7C0000            xcall _LCD_1_PrCString
 0086 20                pop X
 0087                   .dbline 178
 0087           ;                       
 0087           ;                       // Zahl Auf LCD ausgeben
 0087           ;                       itoa(rgch,hichdata,10);
 0087 5000              mov A,0
 0089 08                push A
 008A 500A              mov A,10
 008C 08                push A
 008D 52FC              mov A,[X-4]
 008F 5300              mov [__r1],A
 0091 5000              mov A,0
 0093 08                push A
 0094 5100              mov A,[__r1]
 0096 08                push A
 0097 5000              mov A,0
 0099 08                push A
 009A 10                push X
 009B 7C0000            xcall _itoa
 009E 38FA              add SP,-6
 00A0                   .dbline 179
 00A0           ;                       LCD_1_PrString(rgch);           
 00A0 10                push X
 00A1 5100              mov A,[__r0]
 00A3 7C0000            xcall _LCD_1_PrString
 00A6 20                pop X
 00A7                   .dbline -2
 00A7           L8:
 00A7 38FB              add SP,-5
 00A9 20                pop X
 00AA                   .dbline 0 ; func end
 00AA 7F                ret
 00AB                   .dbsym l rgch 0 A[5:5]c
 00AB                   .dbsym l hichdata -4 c
 00AB                   .dbend
 00AB                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00AB           _Dateneinlesen::
 00AB                   .dbline -1
 00AB                   .dbline 184
 00AB           ; 
 00AB           ;       }
 00AB           ;       
 00AB           ; void Dateneinlesen(void)
 00AB           ;       {       
 00AB                   .dbline 186
 00AB           ;       // Wenn Sollwertdaten bereit sind
 00AB           ;       if(ADCINC_fIsDataAvailable() != 0)
 00AB 10                push X
 00AC 7C0000            xcall _ADCINC_fIsDataAvailable
 00AF 20                pop X
 00B0 3900              cmp A,0
 00B2 A008              jz L15
 00B4                   .dbline 190
 00B4           ;                       
 00B4           ;               // Einlesen des Sollwertes
 00B4           ;               // data ready flag zurüvksetzen        
 00B4           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00B4 10                push X
 00B5 7C0000            xcall _ADCINC_cClearFlagGetData
 00B8 20                pop X
 00B9 5302              mov [_prozess+2],A
 00BB           L14:
 00BB                   .dbline 193
 00BB           ;                          
 00BB           ;       // Auf Entfernung und Position Warten
 00BB           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00BB           L15:
 00BB                   .dbline 193
 00BB 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00BD 10                push X
 00BE 5800              mov X,[__r1]
 00C0 08                push A
 00C1 28                romx
 00C2 5300              mov [__r0],A
 00C4 18                pop A
 00C5 75                inc X
 00C6 0900              adc A,0
 00C8 28                romx
 00C9 20                pop X
 00CA 3C0000            cmp [__r0],0
 00CD AFED              jz L14
 00CF                   .dbline 195
 00CF           ;               // Einlesen der Beschleunigung
 00CF           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00CF 10                push X
 00D0 7C0000            xcall _DUALADC8_cGetData1
 00D3 20                pop X
 00D4 5300              mov [_prozess],A
 00D6                   .dbline 199
 00D6           ;       
 00D6           ;               // Einlesen der Entfernung
 00D6           ;         // data ready flag zurüvksetzen         
 00D6           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00D6 10                push X
 00D7 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00DA 20                pop X
 00DB 5301              mov [_prozess+1],A
 00DD                   .dbline -2
 00DD           L10:
 00DD                   .dbline 0 ; func end
 00DD 7F                ret
 00DE                   .dbend
 00DE                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00DE           ;            iin -> X+0
 00DE           ;   hichRichtung -> X-5
 00DE           ; hichAusgangswert -> X-4
 00DE           _Ausgangansteuern::
 00DE                   .dbline -1
 00DE 10                push X
 00DF 4F                mov X,SP
 00E0 3804              add SP,4
 00E2                   .dbline 203
 00E2           ;       }
 00E2           ; 
 00E2           ;       void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 00E2           ;       {
 00E2                   .dbline 208
 00E2           ;               // Variablendeklaration
 00E2           ;               int iin;
 00E2           ;               
 00E2           ;               // Drehrichtung Auswählen
 00E2           ;               switch(hichRichtung) {
 00E2 52FB              mov A,[X-5]
 00E4 5403              mov [X+3],A
 00E6 560200            mov [X+2],0
 00E9 3D0200            cmp [X+2],0
 00EC B006              jnz X1
 00EE 3D0301            cmp [X+3],1
 00F1 A00D              jz L22
 00F3           X1:
 00F3 3D0200            cmp [X+2],0
 00F6 B006              jnz X2
 00F8 3D0302            cmp [X+3],2
 00FB A011              jz L23
 00FD           X2:
 00FD 801D              xjmp L19
 00FF           L22:
 00FF                   .dbline 213
 00FF           ;                       
 00FF           ;                       // Linkslauf
 00FF           ;                       case 1: 
 00FF           ;                               // IN1 und IN2 Ansteuern
 00FF           ;                               IN1_Switch(0);
 00FF 10                push X
 0100 5000              mov A,0
 0102 7C0000            xcall _IN1_Switch
 0105                   .dbline 214
 0105           ;                               IN2_Switch(1);
 0105 5001              mov A,1
 0107 7C0000            xcall _IN2_Switch
 010A 20                pop X
 010B                   .dbline 215
 010B           ;                               break;
 010B 8018              xjmp L20
 010D           L23:
 010D                   .dbline 221
 010D           ;                       
 010D           ;                       // Rechtslauf
 010D           ;                       case 2:
 010D           ;                               
 010D           ;                               // IN1 und IN2 Ansteuern
 010D           ;                               IN1_Switch(1);
 010D 10                push X
 010E 5001              mov A,1
 0110 7C0000            xcall _IN1_Switch
 0113                   .dbline 222
 0113           ;                               IN2_Switch(0);
 0113 5000              mov A,0
 0115 7C0000            xcall _IN2_Switch
 0118 20                pop X
 0119                   .dbline 223
 0119           ;                               break;
 0119 800A              xjmp L20
 011B           L19:
 011B                   .dbline 228
 011B           ;                               
 011B           ;                       // Ungültiger Wert
 011B           ;                       default:
 011B           ;                               // Pulsweite auf 0 setzen
 011B           ;                               PWM8_1_WritePulseWidth(0);
 011B 10                push X
 011C 5000              mov A,0
 011E 7C0000            xcall _PWM8_1_WritePulseWidth
 0121 20                pop X
 0122                   .dbline 230
 0122           ;                               // Funktion verlassen
 0122           ;                               return ;
 0122 8008              xjmp L18
 0124           L20:
 0124                   .dbline 235
 0124           ;                               
 0124           ;                       }
 0124           ;               
 0124           ;               // Pulsweite auf hichAusgangswert setzen                
 0124           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 0124 10                push X
 0125 52FC              mov A,[X-4]
 0127 7C0000            xcall _PWM8_1_WritePulseWidth
 012A 20                pop X
 012B                   .dbline -2
 012B           L18:
 012B 38FC              add SP,-4
 012D 20                pop X
 012E                   .dbline 0 ; func end
 012E 7F                ret
 012F                   .dbsym l iin 0 I
 012F                   .dbsym l hichRichtung -5 c
 012F                   .dbsym l hichAusgangswert -4 c
 012F                   .dbend
 012F                   .dbfunc e test _test fV
 012F           ;            iin -> X+0
 012F           ;       hichdata -> X-4
 012F           _test::
 012F                   .dbline -1
 012F 10                push X
 0130 4F                mov X,SP
 0131 3802              add SP,2
 0133                   .dbline 242
 0133           ;       }
 0133           ;               
 0133           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0133           ; #ifdef TEST
 0133           ;       // Ausgabe der Testdaten auf LCD-Display
 0133           ;       void test(char hichdata)
 0133           ;               {
 0133                   .dbline 245
 0133           ;               // gibt 99999 mal LCD Aus
 0133           ;               int iin;
 0133           ;               for (iin = 0; iin <= 500; iin ++)
 0133 560100            mov [X+1],0
 0136 560000            mov [X+0],0
 0139           L25:
 0139                   .dbline 246
 0139           ;                       {
 0139                   .dbline 247
 0139           ;                       LCDansteuern(hichdata); 
 0139 52FC              mov A,[X-4]
 013B 08                push A
 013C 9F32              xcall _LCDansteuern
 013E 38FF              add SP,-1
 0140                   .dbline 248
 0140           ;                       }
 0140           L26:
 0140                   .dbline 245
 0140 7701              inc [X+1]
 0142 0F0000            adc [X+0],0
 0145                   .dbline 245
 0145 50F4              mov A,-12
 0147 1301              sub A,[X+1]
 0149 5200              mov A,[X+0]
 014B 3180              xor A,-128
 014D 5300              mov [__rX],A
 014F 5081              mov A,(1 ^ 0x80)
 0151 1A00              sbb A,[__rX]
 0153 DFE5              jnc L25
 0155           X3:
 0155                   .dbline -2
 0155           L24:
 0155 38FE              add SP,-2
 0157 20                pop X
 0158                   .dbline 0 ; func end
 0158 7F                ret
 0159                   .dbsym l iin 0 I
 0159                   .dbsym l hichdata -4 c
 0159                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L9:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
