                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+4
 0000           ; hichAusgangswert -> X+3
 0000           ;         kochKS -> X+2
 0000           ;         kochKP -> X+1
 0000           ; kochPeriodendauer -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <stdio.h>
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char, char );
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 59
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560032            mov [X+0],50
 0007                   .dbline 72
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablen
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       /********************************************************
 0007           ;       *                       Initialisierung des Controllers                         *
 0007           ;       ********************************************************/
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 75
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 78
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5200              mov A,[X+0]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 79
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 82
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 83
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 84
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 86
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 87
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 88
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 92
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 93
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 94
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 98
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 99
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 102
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 103
 004F           ;       IN2_Start;
 004F                   .dbline 104
 004F           ;       SELBSTTEST_Start;
 004F                   .dbline 142
 004F           ;       
 004F           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 004F           ;       #ifndef TEST
 004F           ;               
 004F           ;               /********************************************************
 004F           ;               *                       Endlosschleife für Dauerbetrieb                                *
 004F           ;               ********************************************************/
 004F           ;               
 004F           ;               while(1) 
 004F           ;                       {
 004F           ;                       // Daten Einlesen
 004F           ;                       Dateneinlesen();
 004F           ;                                                
 004F           ;                       // Parameter Berechnen
 004F           ;                       
 004F           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 004F           ;                       
 004F           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 004F           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 004F           ;                       //TODO: Korekturfaktor Einfügen 
 004F           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 004F           ;                       
 004F           ;                       Ausgangansteuern(hichAusgangswert);
 004F           ;                       LCDansteuern(prozess.pdchEntfernung, 0);
 004F           ;                       };
 004F           ;                       
 004F           ;       /********************************************************
 004F           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 004F           ;       * und sind für das Fertige Programm nicht relevant.            *
 004F           ;       * Sie werden anstelle der Regulären while Schleife             *
 004F           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 004F           ;       * erfüllt ist.                                                                                 *
 004F           ;       ********************************************************/
 004F           ; 
 004F           ;       #else
 004F           ;               
 004F           ;               // Selbsttest des Beshleunigungssensoers anschalten
 004F           ;               SELBSTTEST_On;
 004F 8034              xjmp L4
 0051           L3:
 0051                   .dbline 147
 0051           ;                       
 0051           ;               // whileschleife zu testzwecken
 0051           ;               // Konstante zur verweildauer in der schleife
 0051           ;               while (1)
 0051           ;                       {
 0051                   .dbline 151
 0051           ;                               // Daten Einlesen
 0051           ;                               void Dateneinlesen(void);
 0051           ;                               // Daten Nacheinander auf LCD Ausgeeben
 0051           ;                               prozess.pdchPulsweite = 50;
 0051 550332            mov [_prozess+3],50
 0054                   .dbline 155
 0054           ;                               //prozess.pdchBechleunigung = 1;
 0054           ;                               //prozess.pdchEntfernung =2;
 0054           ;                               //prozess.pdchSollwert =3;
 0054           ;                               Ausgangansteuern(100);
 0054 5064              mov A,100
 0056 08                push A
 0057 90C9              xcall _Ausgangansteuern
 0059                   .dbline 156
 0059           ;                               test(prozess.pdchBechleunigung);
 0059 5100              mov A,[_prozess]
 005B 08                push A
 005C 90EF              xcall _test
 005E 38FE              add SP,-2
 0060                   .dbline 157
 0060           ;                               test(prozess.pdchEntfernung);
 0060 5101              mov A,[_prozess+1]
 0062 08                push A
 0063 90E8              xcall _test
 0065                   .dbline 158
 0065           ;                               test(prozess.pdchSollwert);
 0065 5102              mov A,[_prozess+2]
 0067 08                push A
 0068 90E3              xcall _test
 006A 38FE              add SP,-2
 006C                   .dbline 159
 006C           ;                               Ausgangansteuern(-100);
 006C 509C              mov A,-100
 006E 08                push A
 006F 90B1              xcall _Ausgangansteuern
 0071                   .dbline 160
 0071           ;                               test(prozess.pdchBechleunigung);
 0071 5100              mov A,[_prozess]
 0073 08                push A
 0074 90D7              xcall _test
 0076 38FE              add SP,-2
 0078                   .dbline 161
 0078           ;                               test(prozess.pdchEntfernung);
 0078 5101              mov A,[_prozess+1]
 007A 08                push A
 007B 90D0              xcall _test
 007D                   .dbline 162
 007D           ;                               test(prozess.pdchSollwert);
 007D 5102              mov A,[_prozess+2]
 007F 08                push A
 0080 90CB              xcall _test
 0082 38FE              add SP,-2
 0084                   .dbline 165
 0084           ;                               
 0084           ;                               
 0084           ;                       };
 0084           L4:
 0084                   .dbline 146
 0084 8FCC              xjmp L3
 0086           X0:
 0086                   .dbline -2
 0086           L2:
 0086 38FB              add SP,-5
 0088 20                pop X
 0089                   .dbline 0 ; func end
 0089 8FFF              jmp .
 008B                   .dbsym l hichBeschleunigungssumme 4 c
 008B                   .dbsym l hichAusgangswert 3 c
 008B                   .dbsym l kochKS 2 c
 008B                   .dbsym l kochKP 1 c
 008B                   .dbsym l kochPeriodendauer 0 c
 008B                   .dbend
 008B                   .dbfunc e LCDansteuern _LCDansteuern fV
 008B           ; rgchZweitezeile -> X+16
 008B           ; rgchErstezeile -> X+0
 008B           ;     hichfehler -> X-5
 008B           ;       hichdata -> X-4
 008B           _LCDansteuern::
 008B                   .dbline -1
 008B 10                push X
 008C 4F                mov X,SP
 008D 3820              add SP,32
 008F                   .dbline 176
 008F           ;                       
 008F           ;       // Präprozessor: Ende der Verzweifung
 008F           ;       #endif 
 008F           ; }
 008F           ;       
 008F           ; /********************************************************
 008F           ; *                     Funktionsdeklarationen                                          *
 008F           ; ********************************************************/
 008F           ;       
 008F           ; void LCDansteuern(char hichdata, char hichfehler)
 008F           ;       {
 008F                   .dbline 181
 008F           ;       char rgchErstezeile[16];
 008F           ;       char rgchZweitezeile[16];
 008F           ;       
 008F           ;       // Text in Variablen Schreiben
 008F           ;       csprintf(rgchErstezeile,"Abstand: %c",hichdata);
 008F 52FC              mov A,[X-4]
 0091 5300              mov [__r1],A
 0093 5000              mov A,0
 0095 08                push A
 0096 5100              mov A,[__r1]
 0098 08                push A
 0099 500F              mov A,>L12
 009B 08                push A
 009C 500F              mov A,<L12
 009E 08                push A
 009F 5000              mov A,0
 00A1 08                push A
 00A2 10                push X
 00A3 7C0000            xcall _csprintf
 00A6 38FA              add SP,-6
 00A8                   .dbline 185
 00A8           ;       
 00A8           ;       // ist ein Fehler aufgetreten
 00A8           ;       // dann ist hichFehler != 0
 00A8           ;       if (hichfehler != 0)
 00A8 3DFB00            cmp [X-5],0
 00AB A017              jz L13
 00AD                   .dbline 187
 00AD           ;               {
 00AD           ;               csprintf(rgchZweitezeile,"Achtung Fehler");
 00AD                   .dbline 187
 00AD 5000              mov A,>L15
 00AF 08                push A
 00B0 5000              mov A,<L15
 00B2 08                push A
 00B3 5A00              mov [__r1],X
 00B5 060010            add [__r1],16
 00B8 5100              mov A,[__r0]
 00BA 08                push A
 00BB 5100              mov A,[__r1]
 00BD 08                push A
 00BE 7C0000            xcall _csprintf
 00C1 38FC              add SP,-4
 00C3                   .dbline 188
 00C3           ;               };
 00C3           L13:
 00C3                   .dbline 188
 00C3                   .dbline 191
 00C3           ;               
 00C3           ;       // LCD Ansteuern 
 00C3           ;       LCD_1_Position(1,0);
 00C3 10                push X
 00C4 5700              mov X,0
 00C6 5001              mov A,1
 00C8 7C0000            xcall _LCD_1_Position
 00CB 20                pop X
 00CC                   .dbline 192
 00CC           ;       LCD_1_PrString(rgchErstezeile);
 00CC 10                push X
 00CD 5100              mov A,[__r0]
 00CF 7C0000            xcall _LCD_1_PrString
 00D2                   .dbline 193
 00D2           ;       LCD_1_Position(2,0);
 00D2 5700              mov X,0
 00D4 5002              mov A,2
 00D6 7C0000            xcall _LCD_1_Position
 00D9 20                pop X
 00DA                   .dbline 194
 00DA           ;       LCD_1_PrString(rgchZweitezeile);        
 00DA 5A00              mov [__r1],X
 00DC 060010            add [__r1],16
 00DF 10                push X
 00E0 5100              mov A,[__r0]
 00E2 08                push A
 00E3 5100              mov A,[__r1]
 00E5 5C                mov X,A
 00E6 18                pop A
 00E7 7C0000            xcall _LCD_1_PrString
 00EA 20                pop X
 00EB                   .dbline -2
 00EB           L11:
 00EB 38E0              add SP,-32
 00ED 20                pop X
 00EE                   .dbline 0 ; func end
 00EE 7F                ret
 00EF                   .dbsym l rgchZweitezeile 16 A[16:16]c
 00EF                   .dbsym l rgchErstezeile 0 A[16:16]c
 00EF                   .dbsym l hichfehler -5 c
 00EF                   .dbsym l hichdata -4 c
 00EF                   .dbend
 00EF                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00EF           _Dateneinlesen::
 00EF                   .dbline -1
 00EF                   .dbline 198
 00EF           ;       }
 00EF           ;       
 00EF           ; void Dateneinlesen(void)
 00EF           ;       {       
 00EF                   .dbline 200
 00EF           ;       // Wenn Sollwertdaten bereit sind
 00EF           ;       if(ADCINC_fIsDataAvailable() != 0)
 00EF 10                push X
 00F0 7C0000            xcall _ADCINC_fIsDataAvailable
 00F3 20                pop X
 00F4 3900              cmp A,0
 00F6 A008              jz L21
 00F8                   .dbline 204
 00F8           ;                       
 00F8           ;               // Einlesen des Sollwertes
 00F8           ;               // data ready flag zurüvksetzen        
 00F8           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00F8 10                push X
 00F9 7C0000            xcall _ADCINC_cClearFlagGetData
 00FC 20                pop X
 00FD 5302              mov [_prozess+2],A
 00FF           L20:
 00FF                   .dbline 207
 00FF           ;                          
 00FF           ;       // Auf Entfernung und Position Warten
 00FF           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00FF           L21:
 00FF                   .dbline 207
 00FF 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 0101 10                push X
 0102 5800              mov X,[__r1]
 0104 08                push A
 0105 28                romx
 0106 5300              mov [__r0],A
 0108 18                pop A
 0109 75                inc X
 010A 0900              adc A,0
 010C 28                romx
 010D 20                pop X
 010E 3C0000            cmp [__r0],0
 0111 AFED              jz L20
 0113                   .dbline 209
 0113           ;               // Einlesen der Beschleunigung
 0113           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 0113 10                push X
 0114 7C0000            xcall _DUALADC8_cGetData1
 0117 20                pop X
 0118 5300              mov [_prozess],A
 011A                   .dbline 213
 011A           ;       
 011A           ;               // Einlesen der Entfernung
 011A           ;         // data ready flag zurüvksetzen         
 011A           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 011A 10                push X
 011B 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 011E 20                pop X
 011F 5301              mov [_prozess+1],A
 0121                   .dbline -2
 0121           L16:
 0121                   .dbline 0 ; func end
 0121 7F                ret
 0122                   .dbend
 0122                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 0122           ; hichAusgangswert -> X-4
 0122           _Ausgangansteuern::
 0122                   .dbline -1
 0122 10                push X
 0123 4F                mov X,SP
 0124                   .dbline 217
 0124           ;       }
 0124           ; 
 0124           ; void Ausgangansteuern(char hichAusgangswert)
 0124           ;       {
 0124                   .dbline 219
 0124           ;               // linksdrehend 
 0124           ;               if (hichAusgangswert > 0){                              
 0124 5000              mov A,0
 0126 3BFC              cmp A,[X-4]
 0128 D00A              jnc L25
 012A           X1:
 012A                   .dbline 220
 012A           ;                       IN1_On;
 012A                   .dbline 220
 012A                   .dbline 221
 012A           ;                       IN2_Off;
 012A                   .dbline 222
 012A           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 012A 10                push X
 012B 5103              mov A,[_prozess+3]
 012D 7C0000            xcall _PWM8_1_WritePulseWidth
 0130 20                pop X
 0131                   .dbline 223
 0131           ;               }
 0131 8019              xjmp L26
 0133           L25:
 0133                   .dbline 225
 0133           ;               // rechtsdrehend
 0133           ;               else if (hichAusgangswert < 0){                         
 0133 3DFC00            cmp [X-4],0
 0136 D00D              jnc L28
 0138           X2:
 0138                   .dbline 226
 0138           ;                       IN1_On;
 0138                   .dbline 226
 0138                   .dbline 227
 0138           ;                       IN2_Off;
 0138                   .dbline 228
 0138           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 0138 5103              mov A,[_prozess+3]
 013A 73                cpl A
 013B 11FF              sub A,-1
 013D 10                push X
 013E 7C0000            xcall _PWM8_1_WritePulseWidth
 0141 20                pop X
 0142                   .dbline 229
 0142           ;               }
 0142 8008              xjmp L29
 0144           L28:
 0144                   .dbline 231
 0144           ;               // Bremsen durch Kurzschluss
 0144           ;               else{                           
 0144                   .dbline 232
 0144           ;                       IN1_On;
 0144                   .dbline 233
 0144           ;                       IN2_On;
 0144                   .dbline 234
 0144           ;                       PWM8_1_WritePulseWidth(0);
 0144 10                push X
 0145 5000              mov A,0
 0147 7C0000            xcall _PWM8_1_WritePulseWidth
 014A 20                pop X
 014B                   .dbline 235
 014B           ;               }
 014B           L29:
 014B           L26:
 014B                   .dbline -2
 014B           L24:
 014B 20                pop X
 014C                   .dbline 0 ; func end
 014C 7F                ret
 014D                   .dbsym l hichAusgangswert -4 c
 014D                   .dbend
 014D                   .dbfunc e test _test fV
 014D           ;            iin -> X+0
 014D           ;       hichdata -> X-4
 014D           _test::
 014D                   .dbline -1
 014D 10                push X
 014E 4F                mov X,SP
 014F 3802              add SP,2
 0151                   .dbline 242
 0151           ;       }
 0151           ;       
 0151           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0151           ; #ifdef TEST
 0151           ;       // Ausgabe der Testdaten auf LCD-Display
 0151           ;       void test(char hichdata)
 0151           ;               {
 0151                   .dbline 245
 0151           ;               // gibt 99999 mal LCD Aus
 0151           ;               int iin;
 0151           ;               for (iin = 0; iin <= 999; iin ++)
 0151 560100            mov [X+1],0
 0154 560000            mov [X+0],0
 0157           L32:
 0157                   .dbline 246
 0157           ;                       {
 0157                   .dbline 247
 0157           ;                       LCDansteuern(hichdata, 0);      
 0157 5000              mov A,0
 0159 08                push A
 015A 52FC              mov A,[X-4]
 015C 08                push A
 015D 9F2C              xcall _LCDansteuern
 015F 38FE              add SP,-2
 0161                   .dbline 248
 0161           ;                       }
 0161           L33:
 0161                   .dbline 245
 0161 7701              inc [X+1]
 0163 0F0000            adc [X+0],0
 0166                   .dbline 245
 0166 50E7              mov A,-25
 0168 1301              sub A,[X+1]
 016A 5200              mov A,[X+0]
 016C 3180              xor A,-128
 016E 5300              mov [__rX],A
 0170 5083              mov A,(3 ^ 0x80)
 0172 1A00              sbb A,[__rX]
 0174 DFE2              jnc L32
 0176           X3:
 0176                   .dbline -2
 0176           L31:
 0176 38FE              add SP,-2
 0178 20                pop X
 0179                   .dbline 0 ; func end
 0179 7F                ret
 017A                   .dbsym l iin 0 I
 017A                   .dbsym l hichdata -4 c
 017A                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L15:
 0000 41636874756E67204665686C657200    .byte 'A,'c,'h,'t,'u,'n,'g,32,'F,'e,'h,'l,'e,'r,0
 000F           L12:
 000F 41627374616E643A20256300  .byte 'A,'b,'s,'t,'a,'n,'d,58,32,37,'c,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
