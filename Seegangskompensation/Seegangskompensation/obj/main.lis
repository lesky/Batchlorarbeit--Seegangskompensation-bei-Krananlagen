                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+4
 0000           ; hichAusgangswert -> X+3
 0000           ;         kochKS -> X+2
 0000           ;         kochKP -> X+1
 0000           ; kochPeriodendauer -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <stdio.h>
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char, char );
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 59
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560032            mov [X+0],50
 0007                   .dbline 72
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablen
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       /********************************************************
 0007           ;       *                       Initialisierung des Controllers                         *
 0007           ;       ********************************************************/
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 75
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 78
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5200              mov A,[X+0]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 79
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 82
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 83
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 84
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 86
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 87
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 88
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 92
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 93
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 94
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 98
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 99
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 102
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 103
 004F           ;       IN2_Start;
 004F                   .dbline 104
 004F           ;       SELBSTTEST_Start;
 004F                   .dbline 142
 004F           ;       
 004F           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 004F           ;       #ifndef TEST
 004F           ;               
 004F           ;               /********************************************************
 004F           ;               *                       Endlosschleife für Dauerbetrieb                                *
 004F           ;               ********************************************************/
 004F           ;               
 004F           ;               while(1) 
 004F           ;                       {
 004F           ;                       // Daten Einlesen
 004F           ;                       Dateneinlesen();
 004F           ;                                                
 004F           ;                       // Parameter Berechnen
 004F           ;                       
 004F           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 004F           ;                       
 004F           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 004F           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 004F           ;                       //TODO: Korekturfaktor Einfügen 
 004F           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 004F           ;                       
 004F           ;                       Ausgangansteuern(hichAusgangswert);
 004F           ;                       LCDansteuern(prozess.pdchEntfernung, 0);
 004F           ;                       };
 004F           ;                       
 004F           ;       /********************************************************
 004F           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 004F           ;       * und sind für das Fertige Programm nicht relevant.            *
 004F           ;       * Sie werden anstelle der Regulären while Schleife             *
 004F           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 004F           ;       * erfüllt ist.                                                                                 *
 004F           ;       ********************************************************/
 004F           ; 
 004F           ;       #else
 004F           ;               
 004F           ;               // Selbsttest des Beshleunigungssensoers anschalten
 004F           ;               SELBSTTEST_On;
 004F 8014              xjmp L4
 0051           L3:
 0051                   .dbline 147
 0051           ;                       
 0051           ;               // whileschleife zu testzwecken
 0051           ;               // Konstante zur verweildauer in der schleife
 0051           ;               while (1)
 0051           ;                       {
 0051                   .dbline 151
 0051           ;                               // Daten Einlesen
 0051           ;                               void Dateneinlesen(void);
 0051           ;                               // Daten Nacheinander auf LCD Ausgeeben
 0051           ;                               test(prozess.pdchBechleunigung);
 0051 5100              mov A,[_prozess]
 0053 08                push A
 0054 90D7              xcall _test
 0056 38FF              add SP,-1
 0058                   .dbline 152
 0058           ;                               test(prozess.pdchEntfernung);
 0058 5101              mov A,[_prozess+1]
 005A 08                push A
 005B 90D0              xcall _test
 005D                   .dbline 153
 005D           ;                               test(prozess.pdchSollwert);                     
 005D 5102              mov A,[_prozess+2]
 005F 08                push A
 0060 90CB              xcall _test
 0062 38FE              add SP,-2
 0064                   .dbline 154
 0064           ;                       };
 0064           L4:
 0064                   .dbline 146
 0064 8FEC              xjmp L3
 0066           X0:
 0066                   .dbline -2
 0066           L2:
 0066 38FB              add SP,-5
 0068 20                pop X
 0069                   .dbline 0 ; func end
 0069 8FFF              jmp .
 006B                   .dbsym l hichBeschleunigungssumme 4 c
 006B                   .dbsym l hichAusgangswert 3 c
 006B                   .dbsym l kochKS 2 c
 006B                   .dbsym l kochKP 1 c
 006B                   .dbsym l kochPeriodendauer 0 c
 006B                   .dbend
 006B                   .dbfunc e LCDansteuern _LCDansteuern fV
 006B           ; rgchZweitezeile -> X+16
 006B           ; rgchErstezeile -> X+0
 006B           ;     hichfehler -> X-5
 006B           ;       hichdata -> X-4
 006B           _LCDansteuern::
 006B                   .dbline -1
 006B 10                push X
 006C 4F                mov X,SP
 006D 3820              add SP,32
 006F                   .dbline 165
 006F           ;                       
 006F           ;       // Präprozessor: Ende der Verzweifung
 006F           ;       #endif 
 006F           ; }
 006F           ;       
 006F           ; /********************************************************
 006F           ; *                     Funktionsdeklarationen                                          *
 006F           ; ********************************************************/
 006F           ;       
 006F           ; void LCDansteuern(char hichdata, char hichfehler)
 006F           ;       {
 006F                   .dbline 170
 006F           ;       char rgchErstezeile[16];
 006F           ;       char rgchZweitezeile[16];
 006F           ;       
 006F           ;       // Text in Variablen Schreiben
 006F           ;       csprintf(rgchErstezeile,"Abstand: %c",hichdata);
 006F 52FC              mov A,[X-4]
 0071 5300              mov [__r1],A
 0073 5000              mov A,0
 0075 08                push A
 0076 5100              mov A,[__r1]
 0078 08                push A
 0079 500F              mov A,>L9
 007B 08                push A
 007C 500F              mov A,<L9
 007E 08                push A
 007F 5000              mov A,0
 0081 08                push A
 0082 10                push X
 0083 7C0000            xcall _csprintf
 0086 38FA              add SP,-6
 0088                   .dbline 174
 0088           ;       
 0088           ;       // ist ein Fehler aufgetreten
 0088           ;       // dann ist hichFehler != 0
 0088           ;       if (hichfehler != 0)
 0088 3DFB00            cmp [X-5],0
 008B A017              jz L10
 008D                   .dbline 176
 008D           ;               {
 008D           ;               csprintf(rgchZweitezeile,"Achtung Fehler");
 008D                   .dbline 176
 008D 5000              mov A,>L12
 008F 08                push A
 0090 5000              mov A,<L12
 0092 08                push A
 0093 5A00              mov [__r1],X
 0095 060010            add [__r1],16
 0098 5100              mov A,[__r0]
 009A 08                push A
 009B 5100              mov A,[__r1]
 009D 08                push A
 009E 7C0000            xcall _csprintf
 00A1 38FC              add SP,-4
 00A3                   .dbline 177
 00A3           ;               };
 00A3           L10:
 00A3                   .dbline 177
 00A3                   .dbline 180
 00A3           ;               
 00A3           ;       // LCD Ansteuern 
 00A3           ;       LCD_1_Position(1,0);
 00A3 10                push X
 00A4 5700              mov X,0
 00A6 5001              mov A,1
 00A8 7C0000            xcall _LCD_1_Position
 00AB 20                pop X
 00AC                   .dbline 181
 00AC           ;       LCD_1_PrString(rgchErstezeile);
 00AC 10                push X
 00AD 5100              mov A,[__r0]
 00AF 7C0000            xcall _LCD_1_PrString
 00B2                   .dbline 182
 00B2           ;       LCD_1_Position(2,0);
 00B2 5700              mov X,0
 00B4 5002              mov A,2
 00B6 7C0000            xcall _LCD_1_Position
 00B9 20                pop X
 00BA                   .dbline 183
 00BA           ;       LCD_1_PrString(rgchZweitezeile);        
 00BA 5A00              mov [__r1],X
 00BC 060010            add [__r1],16
 00BF 10                push X
 00C0 5100              mov A,[__r0]
 00C2 08                push A
 00C3 5100              mov A,[__r1]
 00C5 5C                mov X,A
 00C6 18                pop A
 00C7 7C0000            xcall _LCD_1_PrString
 00CA 20                pop X
 00CB                   .dbline -2
 00CB           L8:
 00CB 38E0              add SP,-32
 00CD 20                pop X
 00CE                   .dbline 0 ; func end
 00CE 7F                ret
 00CF                   .dbsym l rgchZweitezeile 16 A[16:16]c
 00CF                   .dbsym l rgchErstezeile 0 A[16:16]c
 00CF                   .dbsym l hichfehler -5 c
 00CF                   .dbsym l hichdata -4 c
 00CF                   .dbend
 00CF                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00CF           _Dateneinlesen::
 00CF                   .dbline -1
 00CF                   .dbline 187
 00CF           ;       }
 00CF           ;       
 00CF           ; void Dateneinlesen(void)
 00CF           ;       {       
 00CF                   .dbline 189
 00CF           ;       // Wenn Sollwertdaten bereit sind
 00CF           ;       if(ADCINC_fIsDataAvailable() != 0)
 00CF 10                push X
 00D0 7C0000            xcall _ADCINC_fIsDataAvailable
 00D3 20                pop X
 00D4 3900              cmp A,0
 00D6 A008              jz L18
 00D8                   .dbline 193
 00D8           ;                       
 00D8           ;               // Einlesen des Sollwertes
 00D8           ;               // data ready flag zurüvksetzen        
 00D8           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00D8 10                push X
 00D9 7C0000            xcall _ADCINC_cClearFlagGetData
 00DC 20                pop X
 00DD 5302              mov [_prozess+2],A
 00DF           L17:
 00DF                   .dbline 196
 00DF           ;                          
 00DF           ;       // Auf Entfernung und Position Warten
 00DF           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00DF           L18:
 00DF                   .dbline 196
 00DF 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00E1 10                push X
 00E2 5800              mov X,[__r1]
 00E4 08                push A
 00E5 28                romx
 00E6 5300              mov [__r0],A
 00E8 18                pop A
 00E9 75                inc X
 00EA 0900              adc A,0
 00EC 28                romx
 00ED 20                pop X
 00EE 3C0000            cmp [__r0],0
 00F1 AFED              jz L17
 00F3                   .dbline 198
 00F3           ;               // Einlesen der Beschleunigung
 00F3           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00F3 10                push X
 00F4 7C0000            xcall _DUALADC8_cGetData1
 00F7 20                pop X
 00F8 5300              mov [_prozess],A
 00FA                   .dbline 202
 00FA           ;       
 00FA           ;               // Einlesen der Entfernung
 00FA           ;         // data ready flag zurüvksetzen         
 00FA           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00FA 10                push X
 00FB 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00FE 20                pop X
 00FF 5301              mov [_prozess+1],A
 0101                   .dbline -2
 0101           L13:
 0101                   .dbline 0 ; func end
 0101 7F                ret
 0102                   .dbend
 0102                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 0102           ; hichAusgangswert -> X-4
 0102           _Ausgangansteuern::
 0102                   .dbline -1
 0102 10                push X
 0103 4F                mov X,SP
 0104                   .dbline 206
 0104           ;       }
 0104           ; 
 0104           ; void Ausgangansteuern(char hichAusgangswert)
 0104           ;       {
 0104                   .dbline 208
 0104           ;               // linksdrehend 
 0104           ;               if (hichAusgangswert > 0){                              
 0104 5000              mov A,0
 0106 3BFC              cmp A,[X-4]
 0108 D00A              jnc L22
 010A           X1:
 010A                   .dbline 209
 010A           ;                       IN1_On;
 010A                   .dbline 209
 010A                   .dbline 210
 010A           ;                       IN2_Off;
 010A                   .dbline 211
 010A           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 010A 10                push X
 010B 5103              mov A,[_prozess+3]
 010D 7C0000            xcall _PWM8_1_WritePulseWidth
 0110 20                pop X
 0111                   .dbline 212
 0111           ;               }
 0111 8019              xjmp L23
 0113           L22:
 0113                   .dbline 214
 0113           ;               // rechtsdrehend
 0113           ;               else if (hichAusgangswert < 0){                         
 0113 3DFC00            cmp [X-4],0
 0116 D00D              jnc L25
 0118           X2:
 0118                   .dbline 215
 0118           ;                       IN1_On;
 0118                   .dbline 215
 0118                   .dbline 216
 0118           ;                       IN2_Off;
 0118                   .dbline 217
 0118           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 0118 5103              mov A,[_prozess+3]
 011A 73                cpl A
 011B 11FF              sub A,-1
 011D 10                push X
 011E 7C0000            xcall _PWM8_1_WritePulseWidth
 0121 20                pop X
 0122                   .dbline 218
 0122           ;               }
 0122 8008              xjmp L26
 0124           L25:
 0124                   .dbline 220
 0124           ;               // Bremsen durch Kurzschluss
 0124           ;               else{                           
 0124                   .dbline 221
 0124           ;                       IN1_On;
 0124                   .dbline 222
 0124           ;                       IN2_On;
 0124                   .dbline 223
 0124           ;                       PWM8_1_WritePulseWidth(0);
 0124 10                push X
 0125 5000              mov A,0
 0127 7C0000            xcall _PWM8_1_WritePulseWidth
 012A 20                pop X
 012B                   .dbline 224
 012B           ;               }
 012B           L26:
 012B           L23:
 012B                   .dbline -2
 012B           L21:
 012B 20                pop X
 012C                   .dbline 0 ; func end
 012C 7F                ret
 012D                   .dbsym l hichAusgangswert -4 c
 012D                   .dbend
 012D                   .dbfunc e test _test fV
 012D           ;            iin -> X+0
 012D           ;       hichdata -> X-4
 012D           _test::
 012D                   .dbline -1
 012D 10                push X
 012E 4F                mov X,SP
 012F 3802              add SP,2
 0131                   .dbline 231
 0131           ;       }
 0131           ;       
 0131           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0131           ; #ifdef TEST
 0131           ;       // Ausgabe der Testdaten auf LCD-Display
 0131           ;       void test(char hichdata)
 0131           ;               {
 0131                   .dbline 234
 0131           ;               // gibt 99999 mal LCD Aus
 0131           ;               int iin;
 0131           ;               for (iin = 0; iin <= 99999; iin ++)
 0131 560100            mov [X+1],0
 0134 560000            mov [X+0],0
 0137 8010              xjmp L32
 0139           L29:
 0139                   .dbline 235
 0139           ;                       {
 0139                   .dbline 236
 0139           ;                       LCDansteuern(hichdata, 0);      
 0139 5000              mov A,0
 013B 08                push A
 013C 52FC              mov A,[X-4]
 013E 08                push A
 013F 9F2A              xcall _LCDansteuern
 0141 38FE              add SP,-2
 0143                   .dbline 237
 0143           ;                       }
 0143           L30:
 0143                   .dbline 234
 0143 7701              inc [X+1]
 0145 0F0000            adc [X+0],0
 0148           L32:
 0148                   .dbline 234
 0148 5201              mov A,[X+1]
 014A 5300              mov [__r3],A
 014C 5200              mov A,[X+0]
 014E 5300              mov [__r2],A
 0150 470080            tst [__r2],-128
 0153 A009              jz X3
 0155 5500FF            mov [__r1],-1
 0158 5500FF            mov [__r0],-1
 015B 8007              jmp X4
 015D           X3:
 015D 550000            mov [__r1],0
 0160 550000            mov [__r0],0
 0163           X4:
 0163 509F              mov A,-97
 0165 1200              sub A,[__r3]
 0167 5086              mov A,-122
 0169 1A00              sbb A,[__r2]
 016B 5001              mov A,1
 016D 1A00              sbb A,[__r1]
 016F 5100              mov A,[__r0]
 0171 3180              xor A,-128
 0173 5300              mov [__rX],A
 0175 5080              mov A,(0 ^ 0x80)
 0177 1A00              sbb A,[__rX]
 0179 DFBF              jnc L29
 017B           X5:
 017B                   .dbline -2
 017B           L28:
 017B 38FE              add SP,-2
 017D 20                pop X
 017E                   .dbline 0 ; func end
 017E 7F                ret
 017F                   .dbsym l iin 0 I
 017F                   .dbsym l hichdata -4 c
 017F                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L12:
 0000 41636874756E67204665686C657200    .byte 'A,'c,'h,'t,'u,'n,'g,32,'F,'e,'h,'l,'e,'r,0
 000F           L9:
 000F 41627374616E643A20256300  .byte 'A,'b,'s,'t,'a,'n,'d,58,32,37,'c,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
