                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; kochPeriodendauer -> X+4
 0000           ;         kochKS -> X+3
 0000           ;         kochKP -> X+2
 0000           ; hichBeschleunigungssumme -> X+1
 0000           ; hichAusgangswert -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 40
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; *I/O-Konfiguration:                                                                           *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  ->1.1                                                                   *
 0004           ; * IN1                 ->1.2                                                                   *
 0004           ; * IN2                 ->1.3                                                                   *
 0004           ; * PWM 1                       -> Pin 1.4                                                              *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; // #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(void);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {  
 0004           ;       char rgchLCD[15];       //TODO: Arraygröße anpassen                                                   
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; // Reguläre mani Funktion
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 42
 0004           ;       // Difinition der Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560432            mov [X+4],50
 0007                   .dbline 53
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablendeklration
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       // Initialisierung des Controlers
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 56
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 59
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5204              mov A,[X+4]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 60
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 63
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 64
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 65
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 67
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 68
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 69
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 73
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 74
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 75
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 79
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 80
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 83
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 84
 004F           ;       IN2_Start;
 004F                   .dbline 85
 004F           ;       SELBSTTEST_Start;
 004F 8044              xjmp L4
 0051           L3:
 0051                   .dbline 88
 0051           ;       
 0051           ;       // Endlosschleife
 0051           ;       while(1) {
 0051                   .dbline 91
 0051           ;       
 0051           ;               // Daten Einlesen
 0051           ;               Dateneinlesen();
 0051 905C              xcall _Dateneinlesen
 0053                   .dbline 95
 0053           ;                                        
 0053           ;               // Parameter Berechnen
 0053           ;               
 0053           ;               hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0053 510F              mov A,[_prozess+15]
 0055 0501              add [X+1],A
 0057                   .dbline 97
 0057           ;               
 0057           ;               hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0057 5203              mov A,[X+3]
 0059 08                push A
 005A 5001              mov A,1
 005C 08                push A
 005D 7C0000            xcall __divmodu_8X8_8
 0060 18                pop A
 0061 5300              mov [__r0],A
 0063 38FF              add SP,-1
 0065 5201              mov A,[X+1]
 0067 60E8              mov REG[0xe8],A
 0069 5100              mov A,[__r0]
 006B 60E9              mov REG[0xe9],A
 006D 40                nop
 006E 5DEB              mov A,REG[0xeb]
 0070 5300              mov [__r0],A
 0072 5111              mov A,[_prozess+17]
 0074 120F              sub A,[_prozess+15]
 0076 5300              mov [__r2],A
 0078 5202              mov A,[X+2]
 007A 60E8              mov REG[0xe8],A
 007C 5100              mov A,[__r2]
 007E 60E9              mov REG[0xe9],A
 0080 40                nop
 0081 5DEB              mov A,REG[0xeb]
 0083 1200              sub A,[__r0]
 0085 5400              mov [X+0],A
 0087                   .dbline 100
 0087           ;                                                       - 1 / kochKS * hichBeschleunigungssumme;
 0087           ;               //TODO: Korekturfaktor Einfügen 
 0087           ;               prozess.pdchPulsweite = hichAusgangswert; 
 0087 5200              mov A,[X+0]
 0089 5312              mov [_prozess+18],A
 008B                   .dbline 102
 008B           ;               
 008B           ;               Ausgangansteuern(hichAusgangswert);
 008B 5200              mov A,[X+0]
 008D 08                push A
 008E 9052              xcall _Ausgangansteuern
 0090 38FF              add SP,-1
 0092                   .dbline 103
 0092           ;               LCDansteuern();
 0092 9007              xcall _LCDansteuern
 0094                   .dbline 105
 0094           ;               
 0094           ;       };
 0094           L4:
 0094                   .dbline 88
 0094 8FBC              xjmp L3
 0096           X0:
 0096                   .dbline -2
 0096           L2:
 0096 38FB              add SP,-5
 0098 20                pop X
 0099                   .dbline 0 ; func end
 0099 8FFF              jmp .
 009B                   .dbsym l kochPeriodendauer 4 c
 009B                   .dbsym l kochKS 3 c
 009B                   .dbsym l kochKP 2 c
 009B                   .dbsym l hichBeschleunigungssumme 1 c
 009B                   .dbsym l hichAusgangswert 0 c
 009B                   .dbend
 009B                   .dbfunc e LCDansteuern _LCDansteuern fV
 009B           _LCDansteuern::
 009B                   .dbline -1
 009B                   .dbline 111
 009B           ; }
 009B           ; 
 009B           ; // Funktionen:
 009B           ;       
 009B           ; void LCDansteuern(void)
 009B           ;       {
 009B                   .dbline 113
 009B           ;       // LCD Ansteuern 
 009B           ;       LCD_1_Position(0,5);            
 009B 10                push X
 009C 5705              mov X,5
 009E 5000              mov A,0
 00A0 7C0000            xcall _LCD_1_Position
 00A3                   .dbline 114
 00A3           ;       LCD_1_PrString(prozess.rgchLCD);
 00A3 5000              mov A,>_prozess
 00A5 08                push A
 00A6 5000              mov A,<_prozess
 00A8 5C                mov X,A
 00A9 18                pop A
 00AA 7C0000            xcall _LCD_1_PrString
 00AD 20                pop X
 00AE                   .dbline -2
 00AE           L10:
 00AE                   .dbline 0 ; func end
 00AE 7F                ret
 00AF                   .dbend
 00AF                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00AF           _Dateneinlesen::
 00AF                   .dbline -1
 00AF                   .dbline 118
 00AF           ;       }
 00AF           ;       
 00AF           ; void Dateneinlesen(void)
 00AF           ;       {       
 00AF                   .dbline 120
 00AF           ;       // Wenn Sollwertdaten bereit sind
 00AF           ;       if(ADCINC_fIsDataAvailable() != 0)
 00AF 10                push X
 00B0 7C0000            xcall _ADCINC_fIsDataAvailable
 00B3 20                pop X
 00B4 3900              cmp A,0
 00B6 A008              jz L16
 00B8                   .dbline 124
 00B8           ;                       
 00B8           ;               // Einlesen des Sollwertes
 00B8           ;               // data ready flag zurüvksetzen        
 00B8           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00B8 10                push X
 00B9 7C0000            xcall _ADCINC_cClearFlagGetData
 00BC 20                pop X
 00BD 5311              mov [_prozess+17],A
 00BF           L15:
 00BF                   .dbline 127
 00BF           ;                          
 00BF           ;       // Auf Entfernung und Position Warten
 00BF           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00BF           L16:
 00BF                   .dbline 127
 00BF 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00C1 10                push X
 00C2 5800              mov X,[__r1]
 00C4 08                push A
 00C5 28                romx
 00C6 5300              mov [__r0],A
 00C8 18                pop A
 00C9 75                inc X
 00CA 0900              adc A,0
 00CC 28                romx
 00CD 20                pop X
 00CE 3C0000            cmp [__r0],0
 00D1 AFED              jz L15
 00D3                   .dbline 129
 00D3           ;               // Einlesen der Beschleunigung
 00D3           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00D3 10                push X
 00D4 7C0000            xcall _DUALADC8_cGetData1
 00D7 20                pop X
 00D8 530F              mov [_prozess+15],A
 00DA                   .dbline 133
 00DA           ;       
 00DA           ;               // Einlesen der Entfernung
 00DA           ;         // data ready flag zurüvksetzen         
 00DA           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00DA 10                push X
 00DB 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00DE 20                pop X
 00DF 5310              mov [_prozess+16],A
 00E1                   .dbline -2
 00E1           L11:
 00E1                   .dbline 0 ; func end
 00E1 7F                ret
 00E2                   .dbend
 00E2                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00E2           ; hichAusgangswert -> X-4
 00E2           _Ausgangansteuern::
 00E2                   .dbline -1
 00E2 10                push X
 00E3 4F                mov X,SP
 00E4                   .dbline 137
 00E4           ;       }
 00E4           ; 
 00E4           ; void Ausgangansteuern(char hichAusgangswert)
 00E4           ;       {
 00E4                   .dbline 139
 00E4           ;               // linksdrehend 
 00E4           ;               if (hichAusgangswert > 0){                              
 00E4 5000              mov A,0
 00E6 3BFC              cmp A,[X-4]
 00E8 D00A              jnc L21
 00EA           X1:
 00EA                   .dbline 140
 00EA           ;                       IN1_On;
 00EA                   .dbline 140
 00EA                   .dbline 141
 00EA           ;                       IN2_Off;
 00EA                   .dbline 142
 00EA           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 00EA 10                push X
 00EB 5112              mov A,[_prozess+18]
 00ED 7C0000            xcall _PWM8_1_WritePulseWidth
 00F0 20                pop X
 00F1                   .dbline 143
 00F1           ;               }
 00F1 8019              xjmp L22
 00F3           L21:
 00F3                   .dbline 145
 00F3           ;               // rechtsdrehend
 00F3           ;               else if (hichAusgangswert < 0){                         
 00F3 3DFC00            cmp [X-4],0
 00F6 D00D              jnc L24
 00F8           X2:
 00F8                   .dbline 146
 00F8           ;                       IN1_On;
 00F8                   .dbline 146
 00F8                   .dbline 147
 00F8           ;                       IN2_Off;
 00F8                   .dbline 148
 00F8           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 00F8 5112              mov A,[_prozess+18]
 00FA 73                cpl A
 00FB 11FF              sub A,-1
 00FD 10                push X
 00FE 7C0000            xcall _PWM8_1_WritePulseWidth
 0101 20                pop X
 0102                   .dbline 149
 0102           ;               }
 0102 8008              xjmp L25
 0104           L24:
 0104                   .dbline 151
 0104           ;               // Bremsen durch Kurzschluss
 0104           ;               else{                           
 0104                   .dbline 152
 0104           ;                       IN1_On;
 0104                   .dbline 153
 0104           ;                       IN2_On;
 0104                   .dbline 154
 0104           ;                       PWM8_1_WritePulseWidth(0);
 0104 10                push X
 0105 5000              mov A,0
 0107 7C0000            xcall _PWM8_1_WritePulseWidth
 010A 20                pop X
 010B                   .dbline 155
 010B           ;               }
 010B           L25:
 010B           L22:
 010B                   .dbline -2
 010B           L20:
 010B 20                pop X
 010C                   .dbline 0 ; func end
 010C 7F                ret
 010D                   .dbsym l hichAusgangswert -4 c
 010D                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 19
 0013                   .dbstruct 0 19 .1
 0013                   .dbfield 0 rgchLCD A[15:15]c
 0013                   .dbfield 15 pdchBechleunigung c
 0013                   .dbfield 16 pdchEntfernung c
 0013                   .dbfield 17 pdchSollwert c
 0013                   .dbfield 18 pdchPulsweite c
 0013                   .dbend
 0013                   .dbsym e prozess _prozess S[.1]
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
