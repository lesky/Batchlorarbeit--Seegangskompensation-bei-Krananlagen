                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+4
 0000           ; hichAusgangswert -> X+3
 0000           ;         kochKS -> X+2
 0000           ;         kochKP -> X+1
 0000           ; kochPeriodendauer -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; *I/O-Konfiguration:                                                                           *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; *Zusätzlich definierte Prüfixe zur Variablenbenennung       *
 0004           ; *Mittels Ungaricher Notation nach Charles Simonyi:            *
 0004           ; *pd   -> Prozessbezogene Daten                                                        *
 0004           ; *ko   -> Konstanten                                                                           *
 0004           ; *hi   -> Interne Hilfsgrößen                                                                *
 0004           ; *in   -> Datentyp Integer                                                                     *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <stdio.h>
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; // Reguläre mani Funktion
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 54
 0004           ;       // Difinition der Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560032            mov [X+0],50
 0007                   .dbline 65
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablendeklration
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       // Initialisierung des Controlers
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 68
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 71
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5200              mov A,[X+0]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 72
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 75
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 76
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 77
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 79
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 80
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 81
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 85
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 86
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 87
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 91
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 92
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 95
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 96
 004F           ;       IN2_Start;
 004F                   .dbline 97
 004F           ;       SELBSTTEST_Start;
 004F                   .dbline 124
 004F           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 004F           ;       #ifndef TEST
 004F           ;               
 004F           ;               // Endlosschleife
 004F           ;               while(1) 
 004F           ;                       {
 004F           ;                       // Daten Einlesen
 004F           ;                       Dateneinlesen();
 004F           ;                                                
 004F           ;                       // Parameter Berechnen
 004F           ;                       
 004F           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 004F           ;                       
 004F           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 004F           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 004F           ;                       //TODO: Korekturfaktor Einfügen 
 004F           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 004F           ;                       
 004F           ;                       Ausgangansteuern(hichAusgangswert);
 004F           ;                       LCDansteuern(prozess.pdchEntfernung);
 004F           ;                       
 004F           ;               };
 004F           ;       // Präprozessor: kompiliere whileschleife wenn test;
 004F           ;       #else
 004F           ;               
 004F           ;               // Selbsttest des Beshleunigungssensoers anschalten
 004F           ;               SELBSTTEST_On;
 004F 8014              xjmp L4
 0051           L3:
 0051                   .dbline 129
 0051           ;                       
 0051           ;               // whileschleife zu testzwecken
 0051           ;               // Konstante zur verweildauer in der schleife
 0051           ;               while (1)
 0051           ;                       {
 0051                   .dbline 133
 0051           ;                               // Daten Einlesen
 0051           ;                               void Dateneinlesen(void);
 0051           ;                               // Daten Nacheinander auf LCD Ausgeeben
 0051           ;                               test(prozess.pdchBechleunigung);
 0051 5100              mov A,[_prozess]
 0053 08                push A
 0054 90A4              xcall _test
 0056 38FF              add SP,-1
 0058                   .dbline 134
 0058           ;                               test(prozess.pdchEntfernung);
 0058 5101              mov A,[_prozess+1]
 005A 08                push A
 005B 909D              xcall _test
 005D                   .dbline 135
 005D           ;                               test(prozess.pdchSollwert);                     
 005D 5102              mov A,[_prozess+2]
 005F 08                push A
 0060 9098              xcall _test
 0062 38FE              add SP,-2
 0064                   .dbline 136
 0064           ;                       };
 0064           L4:
 0064                   .dbline 128
 0064 8FEC              xjmp L3
 0066           X0:
 0066                   .dbline -2
 0066           L2:
 0066 38FB              add SP,-5
 0068 20                pop X
 0069                   .dbline 0 ; func end
 0069 8FFF              jmp .
 006B                   .dbsym l hichBeschleunigungssumme 4 c
 006B                   .dbsym l hichAusgangswert 3 c
 006B                   .dbsym l kochKS 2 c
 006B                   .dbsym l kochKP 1 c
 006B                   .dbsym l kochPeriodendauer 0 c
 006B                   .dbend
 006B                   .dbfunc e LCDansteuern _LCDansteuern fV
 006B           ;  rgchErstzeile -> X+0
 006B           ;       hichdata -> X-4
 006B           _LCDansteuern::
 006B                   .dbline -1
 006B 10                push X
 006C 4F                mov X,SP
 006D 380C              add SP,12
 006F                   .dbline 145
 006F           ;                       
 006F           ;       // Präprozessor: Ende der Verzweifung
 006F           ;       #endif 
 006F           ; }
 006F           ; 
 006F           ; // Funktionen:
 006F           ;       
 006F           ; void LCDansteuern(char hichdata)
 006F           ;       {
 006F                   .dbline 148
 006F           ;       char rgchErstzeile[12];
 006F           ;       // LCD Ansteuern 
 006F           ;       csprintf(rgchErstzeile,"Abstand:%c",hichdata);
 006F 52FC              mov A,[X-4]
 0071 5300              mov [__r1],A
 0073 5000              mov A,0
 0075 08                push A
 0076 5100              mov A,[__r1]
 0078 08                push A
 0079 5000              mov A,>L9
 007B 08                push A
 007C 5000              mov A,<L9
 007E 08                push A
 007F 5000              mov A,0
 0081 08                push A
 0082 10                push X
 0083 7C0000            xcall _csprintf
 0086 38FA              add SP,-6
 0088                   .dbline 149
 0088           ;       LCD_1_Position(1,0);
 0088 10                push X
 0089 5700              mov X,0
 008B 5001              mov A,1
 008D 7C0000            xcall _LCD_1_Position
 0090 20                pop X
 0091                   .dbline 150
 0091           ;       LCD_1_PrString(rgchErstzeile);
 0091 10                push X
 0092 5100              mov A,[__r0]
 0094 7C0000            xcall _LCD_1_PrString
 0097 20                pop X
 0098                   .dbline -2
 0098           L8:
 0098 38F4              add SP,-12
 009A 20                pop X
 009B                   .dbline 0 ; func end
 009B 7F                ret
 009C                   .dbsym l rgchErstzeile 0 A[12:12]c
 009C                   .dbsym l hichdata -4 c
 009C                   .dbend
 009C                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 009C           _Dateneinlesen::
 009C                   .dbline -1
 009C                   .dbline 154
 009C           ;       }
 009C           ;       
 009C           ; void Dateneinlesen(void)
 009C           ;       {       
 009C                   .dbline 156
 009C           ;       // Wenn Sollwertdaten bereit sind
 009C           ;       if(ADCINC_fIsDataAvailable() != 0)
 009C 10                push X
 009D 7C0000            xcall _ADCINC_fIsDataAvailable
 00A0 20                pop X
 00A1 3900              cmp A,0
 00A3 A008              jz L15
 00A5                   .dbline 160
 00A5           ;                       
 00A5           ;               // Einlesen des Sollwertes
 00A5           ;               // data ready flag zurüvksetzen        
 00A5           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00A5 10                push X
 00A6 7C0000            xcall _ADCINC_cClearFlagGetData
 00A9 20                pop X
 00AA 5302              mov [_prozess+2],A
 00AC           L14:
 00AC                   .dbline 163
 00AC           ;                          
 00AC           ;       // Auf Entfernung und Position Warten
 00AC           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00AC           L15:
 00AC                   .dbline 163
 00AC 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00AE 10                push X
 00AF 5800              mov X,[__r1]
 00B1 08                push A
 00B2 28                romx
 00B3 5300              mov [__r0],A
 00B5 18                pop A
 00B6 75                inc X
 00B7 0900              adc A,0
 00B9 28                romx
 00BA 20                pop X
 00BB 3C0000            cmp [__r0],0
 00BE AFED              jz L14
 00C0                   .dbline 165
 00C0           ;               // Einlesen der Beschleunigung
 00C0           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00C0 10                push X
 00C1 7C0000            xcall _DUALADC8_cGetData1
 00C4 20                pop X
 00C5 5300              mov [_prozess],A
 00C7                   .dbline 169
 00C7           ;       
 00C7           ;               // Einlesen der Entfernung
 00C7           ;         // data ready flag zurüvksetzen         
 00C7           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00C7 10                push X
 00C8 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00CB 20                pop X
 00CC 5301              mov [_prozess+1],A
 00CE                   .dbline -2
 00CE           L10:
 00CE                   .dbline 0 ; func end
 00CE 7F                ret
 00CF                   .dbend
 00CF                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00CF           ; hichAusgangswert -> X-4
 00CF           _Ausgangansteuern::
 00CF                   .dbline -1
 00CF 10                push X
 00D0 4F                mov X,SP
 00D1                   .dbline 173
 00D1           ;       }
 00D1           ; 
 00D1           ; void Ausgangansteuern(char hichAusgangswert)
 00D1           ;       {
 00D1                   .dbline 175
 00D1           ;               // linksdrehend 
 00D1           ;               if (hichAusgangswert > 0){                              
 00D1 5000              mov A,0
 00D3 3BFC              cmp A,[X-4]
 00D5 D00A              jnc L19
 00D7           X1:
 00D7                   .dbline 176
 00D7           ;                       IN1_On;
 00D7                   .dbline 176
 00D7                   .dbline 177
 00D7           ;                       IN2_Off;
 00D7                   .dbline 178
 00D7           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 00D7 10                push X
 00D8 5103              mov A,[_prozess+3]
 00DA 7C0000            xcall _PWM8_1_WritePulseWidth
 00DD 20                pop X
 00DE                   .dbline 179
 00DE           ;               }
 00DE 8019              xjmp L20
 00E0           L19:
 00E0                   .dbline 181
 00E0           ;               // rechtsdrehend
 00E0           ;               else if (hichAusgangswert < 0){                         
 00E0 3DFC00            cmp [X-4],0
 00E3 D00D              jnc L22
 00E5           X2:
 00E5                   .dbline 182
 00E5           ;                       IN1_On;
 00E5                   .dbline 182
 00E5                   .dbline 183
 00E5           ;                       IN2_Off;
 00E5                   .dbline 184
 00E5           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 00E5 5103              mov A,[_prozess+3]
 00E7 73                cpl A
 00E8 11FF              sub A,-1
 00EA 10                push X
 00EB 7C0000            xcall _PWM8_1_WritePulseWidth
 00EE 20                pop X
 00EF                   .dbline 185
 00EF           ;               }
 00EF 8008              xjmp L23
 00F1           L22:
 00F1                   .dbline 187
 00F1           ;               // Bremsen durch Kurzschluss
 00F1           ;               else{                           
 00F1                   .dbline 188
 00F1           ;                       IN1_On;
 00F1                   .dbline 189
 00F1           ;                       IN2_On;
 00F1                   .dbline 190
 00F1           ;                       PWM8_1_WritePulseWidth(0);
 00F1 10                push X
 00F2 5000              mov A,0
 00F4 7C0000            xcall _PWM8_1_WritePulseWidth
 00F7 20                pop X
 00F8                   .dbline 191
 00F8           ;               }
 00F8           L23:
 00F8           L20:
 00F8                   .dbline -2
 00F8           L18:
 00F8 20                pop X
 00F9                   .dbline 0 ; func end
 00F9 7F                ret
 00FA                   .dbsym l hichAusgangswert -4 c
 00FA                   .dbend
 00FA                   .dbfunc e test _test fV
 00FA           ;            iin -> X+0
 00FA           ;       hichdata -> X-4
 00FA           _test::
 00FA                   .dbline -1
 00FA 10                push X
 00FB 4F                mov X,SP
 00FC 3802              add SP,2
 00FE                   .dbline 197
 00FE           ;       }       
 00FE           ; // Präprozessor: kompiliere Funktion nur wenn Test
 00FE           ; #ifdef TEST
 00FE           ;       // Ausgabe der Testdaten auf LCD-Display
 00FE           ;       void test(char hichdata)
 00FE           ;               {
 00FE                   .dbline 200
 00FE           ;               // gibt 99999 mal LCD Aus
 00FE           ;               int iin;
 00FE           ;               for (iin = 0; iin <= 99999; iin ++)
 00FE 560100            mov [X+1],0
 0101 560000            mov [X+0],0
 0104 800D              xjmp L29
 0106           L26:
 0106                   .dbline 201
 0106           ;                       {
 0106                   .dbline 202
 0106           ;                       LCDansteuern(hichdata); 
 0106 52FC              mov A,[X-4]
 0108 08                push A
 0109 9F60              xcall _LCDansteuern
 010B 38FF              add SP,-1
 010D                   .dbline 203
 010D           ;                       }
 010D           L27:
 010D                   .dbline 200
 010D 7701              inc [X+1]
 010F 0F0000            adc [X+0],0
 0112           L29:
 0112                   .dbline 200
 0112 5201              mov A,[X+1]
 0114 5300              mov [__r3],A
 0116 5200              mov A,[X+0]
 0118 5300              mov [__r2],A
 011A 470080            tst [__r2],-128
 011D A009              jz X3
 011F 5500FF            mov [__r1],-1
 0122 5500FF            mov [__r0],-1
 0125 8007              jmp X4
 0127           X3:
 0127 550000            mov [__r1],0
 012A 550000            mov [__r0],0
 012D           X4:
 012D 509F              mov A,-97
 012F 1200              sub A,[__r3]
 0131 5086              mov A,-122
 0133 1A00              sbb A,[__r2]
 0135 5001              mov A,1
 0137 1A00              sbb A,[__r1]
 0139 5100              mov A,[__r0]
 013B 3180              xor A,-128
 013D 5300              mov [__rX],A
 013F 5080              mov A,(0 ^ 0x80)
 0141 1A00              sbb A,[__rX]
 0143 DFC2              jnc L26
 0145           X5:
 0145                   .dbline -2
 0145           L25:
 0145 38FE              add SP,-2
 0147 20                pop X
 0148                   .dbline 0 ; func end
 0148 7F                ret
 0149                   .dbsym l iin 0 I
 0149                   .dbsym l hichdata -4 c
 0149                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L9:
 0000 41627374616E643A256300    .byte 'A,'b,'s,'t,'a,'n,'d,58,37,'c,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
