                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; kochPeriodendauer -> X+4
 0000           ;         kochKS -> X+3
 0000           ;         kochKP -> X+2
 0000           ; hichBeschleunigungssumme -> X+1
 0000           ; hichAusgangswert -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; *I/O-Konfiguration:                                                                           *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; *Zusätzlich definierte Prüfixe zur Variablenbenennung       *
 0004           ; *Mittels Ungaricher Notation nach Charles Simonyi:            *
 0004           ; *pd   -> Prozessbezogene Daten                                                        *
 0004           ; *ko   -> Konstanten                                                                           *
 0004           ; *hi   -> Interne Hilfsgrößen                                                                *
 0004           ; *in   -> Datentyp Integer                                                                     *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <stdio.h>
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; // #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; // Reguläre mani Funktion
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 54
 0004           ;       // Difinition der Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560432            mov [X+4],50
 0007                   .dbline 65
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablendeklration
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       // Initialisierung des Controlers
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 68
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 71
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5204              mov A,[X+4]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 72
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 75
 0017           ;       
 0017           ;       // Initialisieren der Verstärker
 0017           ;       PGA_1_SetGain(PGA_1_G0_12);                                             
 0017 5010              mov A,16
 0019 7C0000            xcall _PGA_1_SetGain
 001C                   .dbline 76
 001C           ;       PGA_2_SetGain(PGA_2_G0_12);
 001C 5010              mov A,16
 001E 7C0000            xcall _PGA_2_SetGain
 0021                   .dbline 77
 0021           ;       PGA_3_SetGain(PGA_3_G0_12);
 0021 5010              mov A,16
 0023 7C0000            xcall _PGA_3_SetGain
 0026                   .dbline 79
 0026           ;       
 0026           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0026 5001              mov A,1
 0028 7C0000            xcall _PGA_1_Start
 002B                   .dbline 80
 002B           ;       PGA_2_Start(PGA_2_LOWPOWER);
 002B 5001              mov A,1
 002D 7C0000            xcall _PGA_2_Start
 0030                   .dbline 81
 0030           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0030 5001              mov A,1
 0032 7C0000            xcall _PGA_3_Start
 0035                   .dbline 85
 0035           ;       
 0035           ;       // Initialisieren des Dualen AD-Wandlers
 0035           ;       // für Entfernung und Beschleunigung
 0035           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                     
 0035 5003              mov A,3
 0037 7C0000            xcall _DUALADC8_Start
 003A                   .dbline 86
 003A           ;       DUALADC8_SetCalcTime(100);                              
 003A 5700              mov X,0
 003C 5064              mov A,100
 003E 7C0000            xcall _DUALADC8_SetCalcTime
 0041                   .dbline 87
 0041           ;       DUALADC8_GetSamples(); 
 0041 7C0000            xcall _DUALADC8_GetSamples
 0044                   .dbline 91
 0044           ;       
 0044           ;       // Initialisieren des AD-Wandlers
 0044           ;       // für den Sollwert
 0044           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0044 5003              mov A,3
 0046 7C0000            xcall _ADCINC_Start
 0049                   .dbline 92
 0049           ;       ADCINC_GetSamples(0);                                   
 0049 5000              mov A,0
 004B 7C0000            xcall _ADCINC_GetSamples
 004E 20                pop X
 004F                   .dbline 95
 004F           ;       
 004F           ;       //Initialisieren der Digitalen Ausgänge
 004F           ;       IN1_Start;      
 004F                   .dbline 96
 004F           ;       IN2_Start;
 004F                   .dbline 97
 004F           ;       SELBSTTEST_Start;
 004F 8047              xjmp L4
 0051           L3:
 0051                   .dbline 103
 0051           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0051           ;       #ifndef TEST
 0051           ;               
 0051           ;               // Endlosschleife
 0051           ;               while(1) 
 0051           ;                       {
 0051                   .dbline 105
 0051           ;                       // Daten Einlesen
 0051           ;                       Dateneinlesen();
 0051 907C              xcall _Dateneinlesen
 0053                   .dbline 109
 0053           ;                                                
 0053           ;                       // Parameter Berechnen
 0053           ;                       
 0053           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0053 5100              mov A,[_prozess]
 0055 0501              add [X+1],A
 0057                   .dbline 111
 0057           ;                       
 0057           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0057 5203              mov A,[X+3]
 0059 08                push A
 005A 5001              mov A,1
 005C 08                push A
 005D 7C0000            xcall __divmodu_8X8_8
 0060 18                pop A
 0061 5300              mov [__r0],A
 0063 38FF              add SP,-1
 0065 5201              mov A,[X+1]
 0067 60E8              mov REG[0xe8],A
 0069 5100              mov A,[__r0]
 006B 60E9              mov REG[0xe9],A
 006D 40                nop
 006E 5DEB              mov A,REG[0xeb]
 0070 5300              mov [__r0],A
 0072 5102              mov A,[_prozess+2]
 0074 1200              sub A,[_prozess]
 0076 5300              mov [__r2],A
 0078 5202              mov A,[X+2]
 007A 60E8              mov REG[0xe8],A
 007C 5100              mov A,[__r2]
 007E 60E9              mov REG[0xe9],A
 0080 40                nop
 0081 5DEB              mov A,REG[0xeb]
 0083 1200              sub A,[__r0]
 0085 5400              mov [X+0],A
 0087                   .dbline 114
 0087           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 0087           ;                       //TODO: Korekturfaktor Einfügen 
 0087           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 0087 5200              mov A,[X+0]
 0089 5303              mov [_prozess+3],A
 008B                   .dbline 116
 008B           ;                       
 008B           ;                       Ausgangansteuern(hichAusgangswert);
 008B 5200              mov A,[X+0]
 008D 08                push A
 008E 9072              xcall _Ausgangansteuern
 0090                   .dbline 117
 0090           ;                       LCDansteuern(prozess.pdchEntfernung);
 0090 5101              mov A,[_prozess+1]
 0092 08                push A
 0093 9009              xcall _LCDansteuern
 0095 38FE              add SP,-2
 0097                   .dbline 119
 0097           ;                       
 0097           ;               };
 0097           L4:
 0097                   .dbline 102
 0097 8FB9              xjmp L3
 0099           X0:
 0099                   .dbline -2
 0099           L2:
 0099 38FB              add SP,-5
 009B 20                pop X
 009C                   .dbline 0 ; func end
 009C 8FFF              jmp .
 009E                   .dbsym l kochPeriodendauer 4 c
 009E                   .dbsym l kochKS 3 c
 009E                   .dbsym l kochKP 2 c
 009E                   .dbsym l hichBeschleunigungssumme 1 c
 009E                   .dbsym l hichAusgangswert 0 c
 009E                   .dbend
 009E                   .dbfunc e LCDansteuern _LCDansteuern fV
 009E           ;  rgchErstzeile -> X+0
 009E           ;       hichdata -> X-4
 009E           _LCDansteuern::
 009E                   .dbline -1
 009E 10                push X
 009F 4F                mov X,SP
 00A0 380C              add SP,12
 00A2                   .dbline 143
 00A2           ;       // Präprozessor: kompiliere whileschleife wenn test;
 00A2           ;       #else
 00A2           ;               
 00A2           ;                       
 00A2           ;               // whileschleife zu testzwecken
 00A2           ;               // Konstante zur verweildauer in der schleife
 00A2           ;               while (1)
 00A2           ;                       {
 00A2           ;                               // Daten Einlesen
 00A2           ;                               void Dateneinlesen(void);
 00A2           ;                               // Daten Nacheinander auf LCD Ausgeeben
 00A2           ;                               test(prozess.pdchBechleunigung);
 00A2           ;                               test(prozess.pdchEntfernung);
 00A2           ;                               test(prozess.pdchSollwert);                     
 00A2           ;                       };
 00A2           ;                       
 00A2           ;       // Präprozessor: Ende der Verzweifung
 00A2           ;       #endif 
 00A2           ; }
 00A2           ; 
 00A2           ; // Funktionen:
 00A2           ;       
 00A2           ; void LCDansteuern(char hichdata)
 00A2           ;       {
 00A2                   .dbline 146
 00A2           ;       char rgchErstzeile[12];
 00A2           ;       // LCD Ansteuern 
 00A2           ;       csprintf(rgchErstzeile,"Abstand:%c",hichdata);
 00A2 52FC              mov A,[X-4]
 00A4 5300              mov [__r1],A
 00A6 5000              mov A,0
 00A8 08                push A
 00A9 5100              mov A,[__r1]
 00AB 08                push A
 00AC 5000              mov A,>L10
 00AE 08                push A
 00AF 5000              mov A,<L10
 00B1 08                push A
 00B2 5000              mov A,0
 00B4 08                push A
 00B5 10                push X
 00B6 7C0000            xcall _csprintf
 00B9 38FA              add SP,-6
 00BB                   .dbline 147
 00BB           ;       LCD_1_Position(1,0);
 00BB 10                push X
 00BC 5700              mov X,0
 00BE 5001              mov A,1
 00C0 7C0000            xcall _LCD_1_Position
 00C3 20                pop X
 00C4                   .dbline 148
 00C4           ;       LCD_1_PrString(rgchErstzeile);
 00C4 10                push X
 00C5 5100              mov A,[__r0]
 00C7 7C0000            xcall _LCD_1_PrString
 00CA 20                pop X
 00CB                   .dbline -2
 00CB           L9:
 00CB 38F4              add SP,-12
 00CD 20                pop X
 00CE                   .dbline 0 ; func end
 00CE 7F                ret
 00CF                   .dbsym l rgchErstzeile 0 A[12:12]c
 00CF                   .dbsym l hichdata -4 c
 00CF                   .dbend
 00CF                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00CF           _Dateneinlesen::
 00CF                   .dbline -1
 00CF                   .dbline 152
 00CF           ;       }
 00CF           ;       
 00CF           ; void Dateneinlesen(void)
 00CF           ;       {       
 00CF                   .dbline 154
 00CF           ;       // Wenn Sollwertdaten bereit sind
 00CF           ;       if(ADCINC_fIsDataAvailable() != 0)
 00CF 10                push X
 00D0 7C0000            xcall _ADCINC_fIsDataAvailable
 00D3 20                pop X
 00D4 3900              cmp A,0
 00D6 A008              jz L16
 00D8                   .dbline 158
 00D8           ;                       
 00D8           ;               // Einlesen des Sollwertes
 00D8           ;               // data ready flag zurüvksetzen        
 00D8           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00D8 10                push X
 00D9 7C0000            xcall _ADCINC_cClearFlagGetData
 00DC 20                pop X
 00DD 5302              mov [_prozess+2],A
 00DF           L15:
 00DF                   .dbline 161
 00DF           ;                          
 00DF           ;       // Auf Entfernung und Position Warten
 00DF           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00DF           L16:
 00DF                   .dbline 161
 00DF 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00E1 10                push X
 00E2 5800              mov X,[__r1]
 00E4 08                push A
 00E5 28                romx
 00E6 5300              mov [__r0],A
 00E8 18                pop A
 00E9 75                inc X
 00EA 0900              adc A,0
 00EC 28                romx
 00ED 20                pop X
 00EE 3C0000            cmp [__r0],0
 00F1 AFED              jz L15
 00F3                   .dbline 163
 00F3           ;               // Einlesen der Beschleunigung
 00F3           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00F3 10                push X
 00F4 7C0000            xcall _DUALADC8_cGetData1
 00F7 20                pop X
 00F8 5300              mov [_prozess],A
 00FA                   .dbline 167
 00FA           ;       
 00FA           ;               // Einlesen der Entfernung
 00FA           ;         // data ready flag zurüvksetzen         
 00FA           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00FA 10                push X
 00FB 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00FE 20                pop X
 00FF 5301              mov [_prozess+1],A
 0101                   .dbline -2
 0101           L11:
 0101                   .dbline 0 ; func end
 0101 7F                ret
 0102                   .dbend
 0102                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 0102           ; hichAusgangswert -> X-4
 0102           _Ausgangansteuern::
 0102                   .dbline -1
 0102 10                push X
 0103 4F                mov X,SP
 0104                   .dbline 171
 0104           ;       }
 0104           ; 
 0104           ; void Ausgangansteuern(char hichAusgangswert)
 0104           ;       {
 0104                   .dbline 173
 0104           ;               // linksdrehend 
 0104           ;               if (hichAusgangswert > 0){                              
 0104 5000              mov A,0
 0106 3BFC              cmp A,[X-4]
 0108 D00A              jnc L20
 010A           X1:
 010A                   .dbline 174
 010A           ;                       IN1_On;
 010A                   .dbline 174
 010A                   .dbline 175
 010A           ;                       IN2_Off;
 010A                   .dbline 176
 010A           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 010A 10                push X
 010B 5103              mov A,[_prozess+3]
 010D 7C0000            xcall _PWM8_1_WritePulseWidth
 0110 20                pop X
 0111                   .dbline 177
 0111           ;               }
 0111 8019              xjmp L21
 0113           L20:
 0113                   .dbline 179
 0113           ;               // rechtsdrehend
 0113           ;               else if (hichAusgangswert < 0){                         
 0113 3DFC00            cmp [X-4],0
 0116 D00D              jnc L23
 0118           X2:
 0118                   .dbline 180
 0118           ;                       IN1_On;
 0118                   .dbline 180
 0118                   .dbline 181
 0118           ;                       IN2_Off;
 0118                   .dbline 182
 0118           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 0118 5103              mov A,[_prozess+3]
 011A 73                cpl A
 011B 11FF              sub A,-1
 011D 10                push X
 011E 7C0000            xcall _PWM8_1_WritePulseWidth
 0121 20                pop X
 0122                   .dbline 183
 0122           ;               }
 0122 8008              xjmp L24
 0124           L23:
 0124                   .dbline 185
 0124           ;               // Bremsen durch Kurzschluss
 0124           ;               else{                           
 0124                   .dbline 186
 0124           ;                       IN1_On;
 0124                   .dbline 187
 0124           ;                       IN2_On;
 0124                   .dbline 188
 0124           ;                       PWM8_1_WritePulseWidth(0);
 0124 10                push X
 0125 5000              mov A,0
 0127 7C0000            xcall _PWM8_1_WritePulseWidth
 012A 20                pop X
 012B                   .dbline 189
 012B           ;               }
 012B           L24:
 012B           L21:
 012B                   .dbline -2
 012B           L19:
 012B 20                pop X
 012C                   .dbline 0 ; func end
 012C 7F                ret
 012D                   .dbsym l hichAusgangswert -4 c
 012D                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Studium\Bechlor\SOFTWA~1\master\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L10:
 0000 41627374616E643A256300    .byte 'A,'b,'s,'t,'a,'n,'d,58,37,'c,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
