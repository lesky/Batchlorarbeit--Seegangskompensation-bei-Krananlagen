                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; hichBeschleunigungssumme -> X+3
 0000           ; hichAusgangswert -> X+2
 0000           ;         kochKS -> X+1
 0000           ;         kochKP -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 52
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.7                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; 
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char, char);
 0004           ; 
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 71
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten                                   
 0004           ;       char kochKP;
 0004           ;       char kochKS;
 0004           ;               
 0004           ;       // Variablen
 0004           ;       char hichAusgangswert;                                                  
 0004           ;       char hichBeschleunigungssumme;  
 0004           ;               
 0004           ;       /********************************************************
 0004           ;       *                       Initialisierung des Controllers                         *
 0004           ;       ********************************************************/
 0004           ;       
 0004           ;       //globale Interrupts Freigeben
 0004           ;       M8C_EnableGInt;                                                 
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 74
 0006           ;       
 0006           ;       // Initialisieren des LCD-Displays
 0006           ;       LCD_1_Start();                                                  
 0006 10                push X
 0007 7C0000            xcall _LCD_1_Start
 000A                   .dbline 78
 000A           ;       
 000A           ;       // Initialisieren des PWM-Moduls
 000A           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 000A           ;     PWM8_1_Start();
 000A 7C0000            xcall _PWM8_1_Start
 000D                   .dbline 80
 000D           ;       
 000D           ;       PGA_1_Start(PGA_1_HIGHPOWER);
 000D 5003              mov A,3
 000F 7C0000            xcall _PGA_1_Start
 0012                   .dbline 81
 0012           ;       PGA_2_Start(PGA_2_HIGHPOWER);
 0012 5003              mov A,3
 0014 7C0000            xcall _PGA_2_Start
 0017                   .dbline 82
 0017           ;       PGA_3_Start(PGA_3_HIGHPOWER);   
 0017 5003              mov A,3
 0019 7C0000            xcall _PGA_3_Start
 001C                   .dbline 86
 001C           ;       
 001C           ;       // Initialisieren des Dualen AD-Wandlers
 001C           ;       // für Entfernung und Beschleunigung
 001C           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                                             
 001C 5003              mov A,3
 001E 7C0000            xcall _DUALADC8_Start
 0021                   .dbline 87
 0021           ;       DUALADC8_GetSamples(); 
 0021 7C0000            xcall _DUALADC8_GetSamples
 0024                   .dbline 91
 0024           ;       
 0024           ;       // Initialisieren des AD-Wandlers
 0024           ;       // für den Sollwert
 0024           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 0024 5003              mov A,3
 0026 7C0000            xcall _ADCINC_Start
 0029                   .dbline 92
 0029           ;       ADCINC_GetSamples(0);                                   
 0029 5000              mov A,0
 002B 7C0000            xcall _ADCINC_GetSamples
 002E                   .dbline 95
 002E           ;       
 002E           ;       //Initialisieren der Digitalen Ausgänge
 002E           ;       IN1_Start();    
 002E 7C0000            xcall _IN1_Start
 0031                   .dbline 96
 0031           ;       IN2_Start();
 0031 7C0000            xcall _IN2_Start
 0034                   .dbline 97
 0034           ;       SELBSTTEST_Start();
 0034 7C0000            xcall _SELBSTTEST_Start
 0037                   .dbline 139
 0037           ;       
 0037           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0037           ;       #ifndef TEST
 0037           ;               
 0037           ;               /********************************************************
 0037           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0037           ;               ********************************************************/
 0037           ; 
 0037           ;               while(1) 
 0037           ;                       {
 0037           ;                       // Daten Einlesen
 0037           ;                       
 0037           ;                       Dateneinlesen();
 0037           ;                                                
 0037           ;                       // Parameter Berechnen
 0037           ;                       
 0037           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0037           ;                       
 0037           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 0037           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 0037           ;                       
 0037           ;                       // Daten Ausgeben:
 0037           ;                               
 0037           ;                       Ausgangansteuern(hichAusgangswert);
 0037           ;                       
 0037           ;                       LCDansteuern(prozess.pdchEntfernung);
 0037           ; 
 0037           ;                               
 0037           ;                       };
 0037           ;                       
 0037           ;       /********************************************************
 0037           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0037           ;       * und sind für das Fertige Programm nicht relevant.            *
 0037           ;       * Sie werden anstelle der Regulären while Schleife             *
 0037           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0037           ;       * erfüllt ist.                                                                                 *
 0037           ;       ********************************************************/
 0037           ; 
 0037           ;       #else
 0037           ;                       
 0037           ;               // Selbsttest des Beshleunigungssensoers anschalten
 0037           ;               SELBSTTEST_Switch(1);
 0037 5001              mov A,1
 0039 7C0000            xcall _SELBSTTEST_Switch
 003C 20                pop X
 003D 8032              xjmp L4
 003F           L3:
 003F                   .dbline 144
 003F           ;                       
 003F           ;               // whileschleife zu testzwecken
 003F           ;               // Konstante zur verweildauer in der schleife
 003F           ;               while (1)
 003F           ;                       {
 003F                   .dbline 145
 003F           ;                               Dateneinlesen();
 003F 9071              xcall _Dateneinlesen
 0041                   .dbline 146
 0041           ;                               Ausgangansteuern(0, 2);
 0041 5002              mov A,2
 0043 08                push A
 0044 5000              mov A,0
 0046 08                push A
 0047 909C              xcall _Ausgangansteuern
 0049 38FE              add SP,-2
 004B                   .dbline 159
 004B           ;                               
 004B           ;                               // Testfunktionen Aufrufen:
 004B           ;                               // test(prozess.pdchBechleunigung);
 004B           ;                               // test(prozess.pdchEntfernung);
 004B           ;                               // test(prozess.pdchSollwert);
 004B           ;                               // LCDansteuern(1);
 004B           ;                               //if (PRT0DR & 0x01)
 004B           ;                               //{LCDansteuern(1);}
 004B           ;                               //else {LCDansteuern(PRT0DR & 0x01);}
 004B           ;                                       //LCDansteuern(PRT0DR & 0x01);
 004B           ;                               
 004B           ;                               // Erkennen von eingangssignalen über A/D-Wandler
 004B           ;                               if (prozess.pdchEntfernung <= 110)
 004B 506E              mov A,110
 004D 3A01              cmp A,[_prozess+1]
 004F C00A              jc L6
 0051           X1:
 0051                   .dbline 160
 0051           ;                               {LCDansteuern(4);}
 0051                   .dbline 160
 0051 5004              mov A,4
 0053 08                push A
 0054 9021              xcall _LCDansteuern
 0056 38FF              add SP,-1
 0058                   .dbline 160
 0058 8017              xjmp L7
 005A           L6:
 005A                   .dbline 161
 005A           ;                               else if (prozess.pdchBechleunigung <= 110)
 005A 506E              mov A,110
 005C 3A00              cmp A,[_prozess]
 005E C00A              jc L9
 0060           X2:
 0060                   .dbline 162
 0060           ;                               {LCDansteuern(5);}
 0060                   .dbline 162
 0060 5005              mov A,5
 0062 08                push A
 0063 9012              xcall _LCDansteuern
 0065 38FF              add SP,-1
 0067                   .dbline 162
 0067 8008              xjmp L10
 0069           L9:
 0069                   .dbline 163
 0069           ;                               else {
 0069                   .dbline 164
 0069           ;                               LCDansteuern(0);        
 0069 5000              mov A,0
 006B 08                push A
 006C 9009              xcall _LCDansteuern
 006E 38FF              add SP,-1
 0070                   .dbline 165
 0070           ;                               }
 0070           L10:
 0070           L7:
 0070                   .dbline 166
 0070           ;                       };
 0070           L4:
 0070                   .dbline 143
 0070 8FCE              xjmp L3
 0072           X0:
 0072                   .dbline -2
 0072           L2:
 0072 38FC              add SP,-4
 0074 20                pop X
 0075                   .dbline 0 ; func end
 0075 8FFF              jmp .
 0077                   .dbsym l hichBeschleunigungssumme 3 c
 0077                   .dbsym l hichAusgangswert 2 c
 0077                   .dbsym l kochKS 1 c
 0077                   .dbsym l kochKP 0 c
 0077                   .dbend
 0077                   .dbfunc e LCDansteuern _LCDansteuern fV
 0077           ;           rgch -> X+0
 0077           ;       hichdata -> X-4
 0077           _LCDansteuern::
 0077                   .dbline -1
 0077 10                push X
 0078 4F                mov X,SP
 0079 3805              add SP,5
 007B                   .dbline 177
 007B           ;                       
 007B           ;       // Präprozessor: Ende der Verzweifung
 007B           ;       #endif 
 007B           ; }
 007B           ;       
 007B           ; /********************************************************
 007B           ; *                     Funktionsdeklarationen                                          *
 007B           ; ********************************************************/
 007B           ;       
 007B           ; void LCDansteuern(char hichdata)
 007B           ;       {               
 007B                   .dbline 180
 007B           ;                       char rgch[5];
 007B           ;                       // Text auf LCD ausgeben
 007B           ;                       LCD_1_Position(0,5);    
 007B 10                push X
 007C 5705              mov X,5
 007E 5000              mov A,0
 0080 7C0000            xcall _LCD_1_Position
 0083                   .dbline 181
 0083           ;                       LCD_1_PrCString("Wert:");
 0083 5000              mov A,>L12
 0085 08                push A
 0086 5000              mov A,<L12
 0088 5C                mov X,A
 0089 18                pop A
 008A 7C0000            xcall _LCD_1_PrCString
 008D 20                pop X
 008E                   .dbline 184
 008E           ;                       
 008E           ;                       // Zahl Auf LCD ausgeben
 008E           ;                       itoa(rgch,hichdata,10);
 008E 5000              mov A,0
 0090 08                push A
 0091 500A              mov A,10
 0093 08                push A
 0094 52FC              mov A,[X-4]
 0096 5300              mov [__r1],A
 0098 5000              mov A,0
 009A 08                push A
 009B 5100              mov A,[__r1]
 009D 08                push A
 009E 5000              mov A,0
 00A0 08                push A
 00A1 10                push X
 00A2 7C0000            xcall _itoa
 00A5 38FA              add SP,-6
 00A7                   .dbline 185
 00A7           ;                       LCD_1_PrString(rgch);           
 00A7 10                push X
 00A8 5100              mov A,[__r0]
 00AA 7C0000            xcall _LCD_1_PrString
 00AD 20                pop X
 00AE                   .dbline -2
 00AE           L11:
 00AE 38FB              add SP,-5
 00B0 20                pop X
 00B1                   .dbline 0 ; func end
 00B1 7F                ret
 00B2                   .dbsym l rgch 0 A[5:5]c
 00B2                   .dbsym l hichdata -4 c
 00B2                   .dbend
 00B2                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00B2           _Dateneinlesen::
 00B2                   .dbline -1
 00B2                   .dbline 190
 00B2           ; 
 00B2           ;       }
 00B2           ;       
 00B2           ; void Dateneinlesen(void)
 00B2           ;       {       
 00B2                   .dbline 192
 00B2           ;       // Wenn Sollwertdaten bereit sind
 00B2           ;       if(ADCINC_fIsDataAvailable() != 0)
 00B2 10                push X
 00B3 7C0000            xcall _ADCINC_fIsDataAvailable
 00B6 20                pop X
 00B7 3900              cmp A,0
 00B9 A008              jz L18
 00BB                   .dbline 196
 00BB           ;                       
 00BB           ;               // Einlesen des Sollwertes
 00BB           ;               // data ready flag zurüvksetzen        
 00BB           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00BB 10                push X
 00BC 7C0000            xcall _ADCINC_cClearFlagGetData
 00BF 20                pop X
 00C0 5302              mov [_prozess+2],A
 00C2           L17:
 00C2                   .dbline 199
 00C2           ;                          
 00C2           ;       // Auf Entfernung und Position Warten
 00C2           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00C2           L18:
 00C2                   .dbline 199
 00C2 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00C4 10                push X
 00C5 5800              mov X,[__r1]
 00C7 08                push A
 00C8 28                romx
 00C9 5300              mov [__r0],A
 00CB 18                pop A
 00CC 75                inc X
 00CD 0900              adc A,0
 00CF 28                romx
 00D0 20                pop X
 00D1 3C0000            cmp [__r0],0
 00D4 AFED              jz L17
 00D6                   .dbline 201
 00D6           ;               // Einlesen der Beschleunigung
 00D6           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00D6 10                push X
 00D7 7C0000            xcall _DUALADC8_cGetData1
 00DA 20                pop X
 00DB 5300              mov [_prozess],A
 00DD                   .dbline 205
 00DD           ;       
 00DD           ;               // Einlesen der Entfernung
 00DD           ;         // data ready flag zurüvksetzen         
 00DD           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00DD 10                push X
 00DE 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00E1 20                pop X
 00E2 5301              mov [_prozess+1],A
 00E4                   .dbline -2
 00E4           L13:
 00E4                   .dbline 0 ; func end
 00E4 7F                ret
 00E5                   .dbend
 00E5                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00E5           ;            iin -> X+0
 00E5           ;   hichRichtung -> X-5
 00E5           ; hichAusgangswert -> X-4
 00E5           _Ausgangansteuern::
 00E5                   .dbline -1
 00E5 10                push X
 00E6 4F                mov X,SP
 00E7 3804              add SP,4
 00E9                   .dbline 209
 00E9           ;       }
 00E9           ; 
 00E9           ;       void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 00E9           ;       {
 00E9                   .dbline 214
 00E9           ;               // Variablendeklaration
 00E9           ;               int iin;
 00E9           ;               
 00E9           ;               // Drehrichtung Auswählen
 00E9           ;               switch(hichRichtung) {
 00E9 52FB              mov A,[X-5]
 00EB 5403              mov [X+3],A
 00ED 560200            mov [X+2],0
 00F0 3D0200            cmp [X+2],0
 00F3 B006              jnz X3
 00F5 3D0301            cmp [X+3],1
 00F8 A00D              jz L25
 00FA           X3:
 00FA 3D0200            cmp [X+2],0
 00FD B006              jnz X4
 00FF 3D0302            cmp [X+3],2
 0102 A011              jz L26
 0104           X4:
 0104 801D              xjmp L22
 0106           L25:
 0106                   .dbline 219
 0106           ;                       
 0106           ;                       // Linkslauf
 0106           ;                       case 1: 
 0106           ;                               // IN1 und IN2 Ansteuern
 0106           ;                               IN1_Switch(0);
 0106 10                push X
 0107 5000              mov A,0
 0109 7C0000            xcall _IN1_Switch
 010C                   .dbline 220
 010C           ;                               IN2_Switch(1);
 010C 5001              mov A,1
 010E 7C0000            xcall _IN2_Switch
 0111 20                pop X
 0112                   .dbline 221
 0112           ;                               break;
 0112 8018              xjmp L23
 0114           L26:
 0114                   .dbline 227
 0114           ;                       
 0114           ;                       // Rechtslauf
 0114           ;                       case 2:
 0114           ;                               
 0114           ;                               // IN1 und IN2 Ansteuern
 0114           ;                               IN1_Switch(1);
 0114 10                push X
 0115 5001              mov A,1
 0117 7C0000            xcall _IN1_Switch
 011A                   .dbline 228
 011A           ;                               IN2_Switch(0);
 011A 5000              mov A,0
 011C 7C0000            xcall _IN2_Switch
 011F 20                pop X
 0120                   .dbline 229
 0120           ;                               break;
 0120 800A              xjmp L23
 0122           L22:
 0122                   .dbline 234
 0122           ;                               
 0122           ;                       // Ungültiger Wert
 0122           ;                       default:
 0122           ;                               // Pulsweite auf 0 setzen
 0122           ;                               PWM8_1_WritePulseWidth(0);
 0122 10                push X
 0123 5000              mov A,0
 0125 7C0000            xcall _PWM8_1_WritePulseWidth
 0128 20                pop X
 0129                   .dbline 236
 0129           ;                               // Funktion verlassen
 0129           ;                               return ;
 0129 8008              xjmp L21
 012B           L23:
 012B                   .dbline 241
 012B           ;                               
 012B           ;                       }
 012B           ;               
 012B           ;               // Pulsweite auf hichAusgangswert setzen                
 012B           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 012B 10                push X
 012C 52FC              mov A,[X-4]
 012E 7C0000            xcall _PWM8_1_WritePulseWidth
 0131 20                pop X
 0132                   .dbline -2
 0132           L21:
 0132 38FC              add SP,-4
 0134 20                pop X
 0135                   .dbline 0 ; func end
 0135 7F                ret
 0136                   .dbsym l iin 0 I
 0136                   .dbsym l hichRichtung -5 c
 0136                   .dbsym l hichAusgangswert -4 c
 0136                   .dbend
 0136                   .dbfunc e test _test fV
 0136           ;            iin -> X+0
 0136           ;       hichdata -> X-4
 0136           _test::
 0136                   .dbline -1
 0136 10                push X
 0137 4F                mov X,SP
 0138 3802              add SP,2
 013A                   .dbline 248
 013A           ;       }
 013A           ;               
 013A           ; // Präprozessor: kompiliere Funktion nur wenn Test
 013A           ; #ifdef TEST
 013A           ;       // Ausgabe der Testdaten auf LCD-Display
 013A           ;       void test(char hichdata)
 013A           ;               {
 013A                   .dbline 251
 013A           ;               // gibt 99999 mal LCD Aus
 013A           ;               int iin;
 013A           ;               for (iin = 0; iin <= 500; iin ++)
 013A 560100            mov [X+1],0
 013D 560000            mov [X+0],0
 0140           L28:
 0140                   .dbline 252
 0140           ;                       {
 0140                   .dbline 253
 0140           ;                       LCDansteuern(hichdata); 
 0140 52FC              mov A,[X-4]
 0142 08                push A
 0143 9F32              xcall _LCDansteuern
 0145 38FF              add SP,-1
 0147                   .dbline 254
 0147           ;                       }
 0147           L29:
 0147                   .dbline 251
 0147 7701              inc [X+1]
 0149 0F0000            adc [X+0],0
 014C                   .dbline 251
 014C 50F4              mov A,-12
 014E 1301              sub A,[X+1]
 0150 5200              mov A,[X+0]
 0152 3180              xor A,-128
 0154 5300              mov [__rX],A
 0156 5081              mov A,(1 ^ 0x80)
 0158 1A00              sbb A,[__rX]
 015A DFE5              jnc L28
 015C           X5:
 015C                   .dbline -2
 015C           L27:
 015C 38FE              add SP,-2
 015E 20                pop X
 015F                   .dbline 0 ; func end
 015F 7F                ret
 0160                   .dbsym l iin 0 I
 0160                   .dbsym l hichdata -4 c
 0160                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\NEUERO~1\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L12:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
