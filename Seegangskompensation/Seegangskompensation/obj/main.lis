                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Git\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ; kochPeriodendauer -> X+4
 0000           ;         kochKS -> X+3
 0000           ;         kochKP -> X+2
 0000           ; hichBeschleunigungssumme -> X+1
 0000           ; hichAusgangswert -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 51
 0004           ; /********************************************************
 0004           ; * C main-Funktion                                                                             *
 0004           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0004           ; * Controler: CY8C27446-24PXI                                                  *
 0004           ; *                                                                                                             *
 0004           ; * I/O-Konfiguration:                                                                  *
 0004           ; * LCD                         -> Port 2                                                               *
 0004           ; * Selbsttest  -> 1.1                                                                  *
 0004           ; * IN1                 -> 1.2                                                                  *
 0004           ; * IN2                 -> 1.3                                                                  *
 0004           ; * PWM 1                       -> 1.4                                                                  *
 0004           ; * Beschleunigung-> 0.1                                                                        *
 0004           ; * Entfernung  -> 0.4                                                                  *
 0004           ; * Sollwert            -> 0.5                                                                  *
 0004           ; *                                                                                                             *
 0004           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0004           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0004           ; * pd  -> Prozessbezogene Daten                                                *
 0004           ; * ko  -> Konstanten                                                                   *
 0004           ; * hi  -> Interne Hilfsgrößen                                                        *
 0004           ; * in  -> Datentyp Integer                                                             *
 0004           ; ********************************************************/
 0004           ; 
 0004           ; #include <m8c.h>        
 0004           ; #include "PSoCAPI.h"    
 0004           ; #include <stdlib.h>
 0004           ; // Präprozessor:Für testzwecke 
 0004           ; // #defein Test nicht auskomentieren:
 0004           ; // #define TEST
 0004           ; 
 0004           ; // Funktionsprototypen:
 0004           ; void LCDansteuern(char);
 0004           ; void Dateneinlesen(void);
 0004           ; void Ausgangansteuern(char);
 0004           ; 
 0004           ; // Präprozessor: kompiliere Funktion nur wenn Test
 0004           ; #ifdef TEST
 0004           ;       void test(char);
 0004           ; #endif 
 0004           ; 
 0004           ; // globale Structur zur Übergabe der Prozessdaten:
 0004           ; struct 
 0004           ;    {                                                  
 0004           ;       char pdchBechleunigung, pdchEntfernung;                 
 0004           ;       char pdchSollwert;                                                              
 0004           ;       char pdchPulsweite;
 0004           ;     } prozess;
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ;       {
 0004                   .dbline 58
 0004           ;       
 0004           ;       /********************************************************
 0004           ;       *                       Deffinitionen und Deklarationen                         *
 0004           ;       ********************************************************/       
 0004           ;               
 0004           ;       // Konstanten
 0004           ;       char kochPeriodendauer = 50;                                    
 0004 560432            mov [X+4],50
 0007                   .dbline 71
 0007           ;       char kochKP;
 0007           ;       char kochKS;
 0007           ;               
 0007           ;       // Variablen
 0007           ;       char hichAusgangswert;                                                  
 0007           ;       char hichBeschleunigungssumme;  
 0007           ;               
 0007           ;       /********************************************************
 0007           ;       *                       Initialisierung des Controllers                         *
 0007           ;       ********************************************************/
 0007           ;       
 0007           ;       //globale Interrupts Freigeben
 0007           ;       M8C_EnableGInt;                                                 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 74
 0009           ;       
 0009           ;       // Initialisieren des LCD-Displays
 0009           ;       LCD_1_Start();                                                  
 0009 10                push X
 000A 7C0000            xcall _LCD_1_Start
 000D 20                pop X
 000E                   .dbline 77
 000E           ;       
 000E           ;       // Initialisieren des PWM-Moduls
 000E           ;       PWM8_1_WritePeriod(kochPeriodendauer);                              
 000E 10                push X
 000F 5204              mov A,[X+4]
 0011 7C0000            xcall _PWM8_1_WritePeriod
 0014                   .dbline 78
 0014           ;     PWM8_1_Start();
 0014 7C0000            xcall _PWM8_1_Start
 0017                   .dbline 80
 0017           ;       
 0017           ;       PGA_1_Start(PGA_1_LOWPOWER);
 0017 5001              mov A,1
 0019 7C0000            xcall _PGA_1_Start
 001C                   .dbline 81
 001C           ;       PGA_2_Start(PGA_2_LOWPOWER);
 001C 5001              mov A,1
 001E 7C0000            xcall _PGA_2_Start
 0021                   .dbline 82
 0021           ;       PGA_3_Start(PGA_3_LOWPOWER);    
 0021 5001              mov A,1
 0023 7C0000            xcall _PGA_3_Start
 0026                   .dbline 86
 0026           ;       
 0026           ;       // Initialisieren des Dualen AD-Wandlers
 0026           ;       // für Entfernung und Beschleunigung
 0026           ;       DUALADC8_Start(DUALADC8_HIGHPOWER);                                             
 0026 5003              mov A,3
 0028 7C0000            xcall _DUALADC8_Start
 002B                   .dbline 87
 002B           ;       DUALADC8_GetSamples(); 
 002B 7C0000            xcall _DUALADC8_GetSamples
 002E                   .dbline 91
 002E           ;       
 002E           ;       // Initialisieren des AD-Wandlers
 002E           ;       // für den Sollwert
 002E           ;       ADCINC_Start(ADCINC_HIGHPOWER);                         
 002E 5003              mov A,3
 0030 7C0000            xcall _ADCINC_Start
 0033                   .dbline 92
 0033           ;       ADCINC_GetSamples(0);                                   
 0033 5000              mov A,0
 0035 7C0000            xcall _ADCINC_GetSamples
 0038                   .dbline 95
 0038           ;       
 0038           ;       //Initialisieren der Digitalen Ausgänge
 0038           ;       IN1_Start();    
 0038 7C0000            xcall _IN1_Start
 003B                   .dbline 96
 003B           ;       IN2_Start();
 003B 7C0000            xcall _IN2_Start
 003E                   .dbline 97
 003E           ;       SELBSTTEST_Start();
 003E 7C0000            xcall _SELBSTTEST_Start
 0041 20                pop X
 0042 8047              xjmp L4
 0044           L3:
 0044                   .dbline 107
 0044           ;       
 0044           ;       // Präprozessor: kompiliere whileschleife wenn kein test
 0044           ;       #ifndef TEST
 0044           ;               
 0044           ;               /********************************************************
 0044           ;               *                       Endlosschleife für Dauerbetrieb                                *
 0044           ;               ********************************************************/
 0044           ; 
 0044           ;               while(1) 
 0044           ;                       {
 0044                   .dbline 109
 0044           ;                       // Daten Einlesen
 0044           ;                       Dateneinlesen();
 0044 9086              xcall _Dateneinlesen
 0046                   .dbline 113
 0046           ;                                                
 0046           ;                       // Parameter Berechnen
 0046           ;                       
 0046           ;                       hichBeschleunigungssumme = hichBeschleunigungssumme + prozess.pdchBechleunigung;
 0046 5100              mov A,[_prozess]
 0048 0501              add [X+1],A
 004A                   .dbline 115
 004A           ;                       
 004A           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKP
 004A 5203              mov A,[X+3]
 004C 08                push A
 004D 5001              mov A,1
 004F 08                push A
 0050 7C0000            xcall __divmodu_8X8_8
 0053 18                pop A
 0054 5300              mov [__r0],A
 0056 38FF              add SP,-1
 0058 5201              mov A,[X+1]
 005A 60E8              mov REG[0xe8],A
 005C 5100              mov A,[__r0]
 005E 60E9              mov REG[0xe9],A
 0060 40                nop
 0061 5DEB              mov A,REG[0xeb]
 0063 5300              mov [__r0],A
 0065 5102              mov A,[_prozess+2]
 0067 1200              sub A,[_prozess]
 0069 5300              mov [__r2],A
 006B 5202              mov A,[X+2]
 006D 60E8              mov REG[0xe8],A
 006F 5100              mov A,[__r2]
 0071 60E9              mov REG[0xe9],A
 0073 40                nop
 0074 5DEB              mov A,REG[0xeb]
 0076 1200              sub A,[__r0]
 0078 5400              mov [X+0],A
 007A                   .dbline 118
 007A           ;                                                               - 1 / kochKS * hichBeschleunigungssumme;
 007A           ;                       //TODO: Korekturfaktor Einfügen 
 007A           ;                       prozess.pdchPulsweite = hichAusgangswert; 
 007A 5200              mov A,[X+0]
 007C 5303              mov [_prozess+3],A
 007E                   .dbline 120
 007E           ;                       
 007E           ;                       Ausgangansteuern(hichAusgangswert);
 007E 5200              mov A,[X+0]
 0080 08                push A
 0081 907C              xcall _Ausgangansteuern
 0083                   .dbline 122
 0083           ;                       
 0083           ;                       LCDansteuern(prozess.pdchEntfernung);
 0083 5101              mov A,[_prozess+1]
 0085 08                push A
 0086 9009              xcall _LCDansteuern
 0088 38FE              add SP,-2
 008A                   .dbline 125
 008A           ; 
 008A           ;                               
 008A           ;                       };
 008A           L4:
 008A                   .dbline 106
 008A 8FB9              xjmp L3
 008C           X0:
 008C                   .dbline -2
 008C           L2:
 008C 38FB              add SP,-5
 008E 20                pop X
 008F                   .dbline 0 ; func end
 008F 8FFF              jmp .
 0091                   .dbsym l kochPeriodendauer 4 c
 0091                   .dbsym l kochKS 3 c
 0091                   .dbsym l kochKP 2 c
 0091                   .dbsym l hichBeschleunigungssumme 1 c
 0091                   .dbsym l hichAusgangswert 0 c
 0091                   .dbend
 0091                   .dbfunc e LCDansteuern _LCDansteuern fV
 0091           ;            xyz -> X+0
 0091           ;       hichdata -> X-4
 0091           _LCDansteuern::
 0091                   .dbline -1
 0091 10                push X
 0092 4F                mov X,SP
 0093 3805              add SP,5
 0095                   .dbline 174
 0095           ;                       
 0095           ;       /********************************************************
 0095           ;       * Achtung die Folgenden Zeilen dienen nur zu Testzwecken*
 0095           ;       * und sind für das Fertige Programm nicht relevant.            *
 0095           ;       * Sie werden anstelle der Regulären while Schleife             *
 0095           ;       * Kompiliert, wenn die Bedingung #ifndef TEST nicht     *
 0095           ;       * erfüllt ist.                                                                                 *
 0095           ;       ********************************************************/
 0095           ; 
 0095           ;       #else
 0095           ;               
 0095           ;               // Selbsttest des Beshleunigungssensoers anschalten
 0095           ;               SELBSTTEST_Switch(1);
 0095           ;                       
 0095           ;               // whileschleife zu testzwecken
 0095           ;               // Konstante zur verweildauer in der schleife
 0095           ;               while (1)
 0095           ;                       {
 0095           ;                               //konstanten definiren
 0095           ;                               
 0095           ;                               // Daten Einlesen
 0095           ;                               void Dateneinlesen(void);
 0095           ;                               // Daten Nacheinander auf LCD Ausgeeben
 0095           ;                               //prozess.pdchPulsweite = 50;
 0095           ;                               //prozess.pdchBechleunigung = 1;
 0095           ;                               //prozess.pdchEntfernung =2;
 0095           ;                               //prozess.pdchSollwert =3;
 0095           ;                               Ausgangansteuern(50);
 0095           ;                               test(prozess.pdchBechleunigung);
 0095           ;                               test(prozess.pdchEntfernung);
 0095           ;                               test(prozess.pdchSollwert);
 0095           ;                               // Ausgangansteuern(-50);
 0095           ;                               test(prozess.pdchBechleunigung);
 0095           ;                               test(prozess.pdchEntfernung);
 0095           ;                               test(prozess.pdchSollwert);
 0095           ;                               
 0095           ;                               
 0095           ;                       };
 0095           ;                       
 0095           ;       // Präprozessor: Ende der Verzweifung
 0095           ;       #endif 
 0095           ; }
 0095           ;       
 0095           ; /********************************************************
 0095           ; *                     Funktionsdeklarationen                                          *
 0095           ; ********************************************************/
 0095           ;       
 0095           ; void LCDansteuern(char hichdata)
 0095           ;       {               
 0095                   .dbline 178
 0095           ;                       //TODO: Variablen Umbenennen 
 0095           ;                       // Komentieren
 0095           ;                       char xyz[5]; 
 0095           ;                                LCD_1_Position(0,5);    
 0095 10                push X
 0096 5705              mov X,5
 0098 5000              mov A,0
 009A 7C0000            xcall _LCD_1_Position
 009D                   .dbline 179
 009D           ;                       LCD_1_PrCString("Wert:");                               
 009D 5000              mov A,>L10
 009F 08                push A
 00A0 5000              mov A,<L10
 00A2 5C                mov X,A
 00A3 18                pop A
 00A4 7C0000            xcall _LCD_1_PrCString
 00A7 20                pop X
 00A8                   .dbline 180
 00A8           ;                       itoa(xyz,hichdata,10);
 00A8 5000              mov A,0
 00AA 08                push A
 00AB 500A              mov A,10
 00AD 08                push A
 00AE 52FC              mov A,[X-4]
 00B0 5300              mov [__r1],A
 00B2 5000              mov A,0
 00B4 08                push A
 00B5 5100              mov A,[__r1]
 00B7 08                push A
 00B8 5000              mov A,0
 00BA 08                push A
 00BB 10                push X
 00BC 7C0000            xcall _itoa
 00BF 38FA              add SP,-6
 00C1                   .dbline 181
 00C1           ;                       LCD_1_PrString(xyz);            
 00C1 10                push X
 00C2 5100              mov A,[__r0]
 00C4 7C0000            xcall _LCD_1_PrString
 00C7 20                pop X
 00C8                   .dbline -2
 00C8           L9:
 00C8 38FB              add SP,-5
 00CA 20                pop X
 00CB                   .dbline 0 ; func end
 00CB 7F                ret
 00CC                   .dbsym l xyz 0 A[5:5]c
 00CC                   .dbsym l hichdata -4 c
 00CC                   .dbend
 00CC                   .dbfunc e Dateneinlesen _Dateneinlesen fV
 00CC           _Dateneinlesen::
 00CC                   .dbline -1
 00CC                   .dbline 186
 00CC           ; 
 00CC           ;       }
 00CC           ;       
 00CC           ; void Dateneinlesen(void)
 00CC           ;       {       
 00CC                   .dbline 188
 00CC           ;       // Wenn Sollwertdaten bereit sind
 00CC           ;       if(ADCINC_fIsDataAvailable() != 0)
 00CC 10                push X
 00CD 7C0000            xcall _ADCINC_fIsDataAvailable
 00D0 20                pop X
 00D1 3900              cmp A,0
 00D3 A008              jz L16
 00D5                   .dbline 192
 00D5           ;                       
 00D5           ;               // Einlesen des Sollwertes
 00D5           ;               // data ready flag zurüvksetzen        
 00D5           ;               prozess.pdchSollwert = ADCINC_cClearFlagGetData();              
 00D5 10                push X
 00D6 7C0000            xcall _ADCINC_cClearFlagGetData
 00D9 20                pop X
 00DA 5302              mov [_prozess+2],A
 00DC           L15:
 00DC                   .dbline 195
 00DC           ;                          
 00DC           ;       // Auf Entfernung und Position Warten
 00DC           ;               while(DUALADC8_fIsDataAvailable == 0);                  
 00DC           L16:
 00DC                   .dbline 195
 00DC 5000              mov A,<PL_DUALADC8_fIsDataAvailable
 00DE 10                push X
 00DF 5800              mov X,[__r1]
 00E1 08                push A
 00E2 28                romx
 00E3 5300              mov [__r0],A
 00E5 18                pop A
 00E6 75                inc X
 00E7 0900              adc A,0
 00E9 28                romx
 00EA 20                pop X
 00EB 3C0000            cmp [__r0],0
 00EE AFED              jz L15
 00F0                   .dbline 197
 00F0           ;               // Einlesen der Beschleunigung
 00F0           ;               prozess.pdchBechleunigung = DUALADC8_cGetData1();       
 00F0 10                push X
 00F1 7C0000            xcall _DUALADC8_cGetData1
 00F4 20                pop X
 00F5 5300              mov [_prozess],A
 00F7                   .dbline 201
 00F7           ;       
 00F7           ;               // Einlesen der Entfernung
 00F7           ;         // data ready flag zurüvksetzen         
 00F7           ;               prozess.pdchEntfernung = DUALADC8_cGetData2ClearFlag();         
 00F7 10                push X
 00F8 7C0000            xcall _DUALADC8_cGetData2ClearFlag
 00FB 20                pop X
 00FC 5301              mov [_prozess+1],A
 00FE                   .dbline -2
 00FE           L11:
 00FE                   .dbline 0 ; func end
 00FE 7F                ret
 00FF                   .dbend
 00FF                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 00FF           ; hichAusgangswert -> X-4
 00FF           _Ausgangansteuern::
 00FF                   .dbline -1
 00FF 10                push X
 0100 4F                mov X,SP
 0101                   .dbline 205
 0101           ;       }
 0101           ; 
 0101           ; void Ausgangansteuern(char hichAusgangswert)
 0101           ;       {
 0101                   .dbline 207
 0101           ;               // linksdrehend 
 0101           ;               if (hichAusgangswert > 0){                              
 0101 5000              mov A,0
 0103 3BFC              cmp A,[X-4]
 0105 D014              jnc L20
 0107           X1:
 0107                   .dbline 208
 0107           ;                       IN1_Switch(1);
 0107                   .dbline 208
 0107 10                push X
 0108 5001              mov A,1
 010A 7C0000            xcall _IN1_Switch
 010D                   .dbline 209
 010D           ;                       IN2_Switch(0);
 010D 5000              mov A,0
 010F 7C0000            xcall _IN2_Switch
 0112                   .dbline 210
 0112           ;                       PWM8_1_WritePulseWidth(prozess.pdchPulsweite);
 0112 5103              mov A,[_prozess+3]
 0114 7C0000            xcall _PWM8_1_WritePulseWidth
 0117 20                pop X
 0118                   .dbline 211
 0118           ;               }
 0118 802F              xjmp L21
 011A           L20:
 011A                   .dbline 213
 011A           ;               // rechtsdrehend
 011A           ;               else if (hichAusgangswert < 0){                         
 011A 3DFC00            cmp [X-4],0
 011D D019              jnc L23
 011F           X2:
 011F                   .dbline 214
 011F           ;                       IN1_Switch(1);
 011F                   .dbline 214
 011F 10                push X
 0120 5001              mov A,1
 0122 7C0000            xcall _IN1_Switch
 0125                   .dbline 215
 0125           ;                       IN2_Switch(0);
 0125 5000              mov A,0
 0127 7C0000            xcall _IN2_Switch
 012A 20                pop X
 012B                   .dbline 216
 012B           ;                       PWM8_1_WritePulseWidth(-prozess.pdchPulsweite);
 012B 5103              mov A,[_prozess+3]
 012D 73                cpl A
 012E 11FF              sub A,-1
 0130 10                push X
 0131 7C0000            xcall _PWM8_1_WritePulseWidth
 0134 20                pop X
 0135                   .dbline 217
 0135           ;               }
 0135 8012              xjmp L24
 0137           L23:
 0137                   .dbline 219
 0137           ;               // Bremsen durch Leerlauf
 0137           ;               else{                           
 0137                   .dbline 220
 0137           ;                       IN1_Switch(0);
 0137 10                push X
 0138 5000              mov A,0
 013A 7C0000            xcall _IN1_Switch
 013D                   .dbline 221
 013D           ;                       IN2_Switch(0);
 013D 5000              mov A,0
 013F 7C0000            xcall _IN2_Switch
 0142                   .dbline 222
 0142           ;                       PWM8_1_WritePulseWidth(0);
 0142 5000              mov A,0
 0144 7C0000            xcall _PWM8_1_WritePulseWidth
 0147 20                pop X
 0148                   .dbline 223
 0148           ;               }
 0148           L24:
 0148           L21:
 0148                   .dbline -2
 0148           L19:
 0148 20                pop X
 0149                   .dbline 0 ; func end
 0149 7F                ret
 014A                   .dbsym l hichAusgangswert -4 c
 014A                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\Dropbox\Git\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 4
 0004                   .dbstruct 0 4 .1
 0004                   .dbfield 0 pdchBechleunigung c
 0004                   .dbfield 1 pdchEntfernung c
 0004                   .dbfield 2 pdchSollwert c
 0004                   .dbfield 3 pdchPulsweite c
 0004                   .dbend
 0004                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L10:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
                        .area func_lit(rom, con, rel, proclab)
 0000 0000      PL_DUALADC8_fIsDataAvailable:   .word _DUALADC8_fIsDataAvailable
