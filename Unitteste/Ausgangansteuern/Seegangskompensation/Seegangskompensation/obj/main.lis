                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\UNITTE~2\UNITTE~1\AUSGAN~1\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 51
 0000           ; /********************************************************
 0000           ; * C main-Funktion                                                                             *
 0000           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0000           ; * Controler: CY8C27446-24PXI                                                  *
 0000           ; *                                                                                                             *
 0000           ; * I/O-Konfiguration:                                                                  *
 0000           ; * LCD                         -> Port 2                                                               *
 0000           ; * SDA                 -> 1.0                                                                  *
 0000           ; * SCL                         -> 1.1                                                                  *
 0000           ; * IN1                 -> 1.3                                                                  *
 0000           ; * IN2                 -> 1.5                                                                  *
 0000           ; * PWM 1                       -> 1.4                                                                  *
 0000           ; * Beschleunigung-> 0.7                                                                        *
 0000           ; * Entfernung  -> 0.4                                                                  *
 0000           ; * Sollwert            -> 0.5                                                                  *
 0000           ; *                                                                                                             *
 0000           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0000           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0000           ; * pd  -> Prozessbezogene Daten                                                *
 0000           ; * ko  -> Konstanten                                                                   *
 0000           ; * hi  -> Interne Hilfsgrößen                                                        *
 0000           ; * in  -> Datentyp Integer                                                             *
 0000           ; ********************************************************/
 0000           ; 
 0000           ; // Präprozessor:Für Unittesting:
 0000           ; // #defein Test nicht auskomentieren:
 0000           ; #define UTEST
 0000           ; 
 0000           ; #include <m8c.h>        
 0000           ; #include "PSoCAPI.h"    
 0000           ; #include <stdlib.h>
 0000           ; 
 0000           ; // globale Structur zur Übergabe der Prozessdaten:
 0000           ; struct 
 0000           ;    {                                                  
 0000           ;       char pdchBechleunigung, pdchEntfernung;                 
 0000           ;       char pdchSollwert;                                                              
 0000           ;       } prozess;
 0000           ; 
 0000           ; // Funktionsprototypen:
 0000           ; void Initalisierung(void);
 0000           ; void Ausgangansteuern(char, char);
 0000           ; 
 0000           ; // mainfunktion
 0000           ; // Präprozessor: kompiliere wenn kein test
 0000           ; #ifndef UTEST
 0000           ; 
 0000           ; #else
 0000           ;       // Funktion zum Unittesting
 0000           ;       void main(void)
 0000           ;               {
 0000                   .dbline 52
 0000           ;               Initalisierung();
 0000 901D              xcall _Initalisierung
 0002                   .dbline 55
 0002           ;               
 0002           ;               // Unittest des LCD
 0002           ;               Ausgangansteuern(0,0);
 0002 5000              mov A,0
 0004 08                push A
 0005 08                push A
 0006 902B              xcall _Ausgangansteuern
 0008 38FE              add SP,-2
 000A                   .dbline 56
 000A           ;               LCD_1_Position(1,0);    
 000A 10                push X
 000B 5700              mov X,0
 000D 5001              mov A,1
 000F 7C0000            xcall _LCD_1_Position
 0012                   .dbline 57
 0012           ;       LCD_1_PrCString("OK");
 0012 5000              mov A,>L3
 0014 08                push A
 0015 5000              mov A,<L3
 0017 5C                mov X,A
 0018 18                pop A
 0019 7C0000            xcall _LCD_1_PrCString
 001C 20                pop X
 001D                   .dbline -2
 001D           L2:
 001D                   .dbline 0 ; func end
 001D 8FFF              jmp .
 001F                   .dbend
 001F                   .dbfunc e Initalisierung _Initalisierung fV
 001F           _Initalisierung::
 001F                   .dbline -1
 001F                   .dbline 63
 001F           ;               }
 001F           ; #endif 
 001F           ; 
 001F           ; 
 001F           ; void Initalisierung(void)
 001F           ;       {
 001F                   .dbline 65
 001F           ;       //globale Interrupts Freigeben
 001F           ;       M8C_EnableGInt;
 001F 7101                      or  F, 01h
 0021           
 0021                   .dbline 68
 0021           ;               
 0021           ;       // I2C Starten
 0021           ;       I2Cm_Start();
 0021 10                push X
 0022 7C0000            xcall _I2Cm_Start
 0025                   .dbline 74
 0025           ; //    // A/D Wandler konfigurieren
 0025           ; //    I2Cm_fSendStart(0x48,I2Cm_WRITE);       
 0025           ; //    I2Cm_fWrite(0x00);
 0025           ; //    I2Cm_SendStop();
 0025           ;       // Initialisieren des LCD-Displays
 0025           ;       LCD_1_Start();                                                  
 0025 7C0000            xcall _LCD_1_Start
 0028                   .dbline 78
 0028           ;       
 0028           ;       // Initialisieren des PWM-Moduls
 0028           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 0028           ;     PWM8_1_Start();
 0028 7C0000            xcall _PWM8_1_Start
 002B                   .dbline 81
 002B           ;       
 002B           ;       //Initialisieren der Digitalen Ausgänge
 002B           ;       IN1_Start();    
 002B 7C0000            xcall _IN1_Start
 002E                   .dbline 82
 002E           ;       IN2_Start();
 002E 7C0000            xcall _IN2_Start
 0031 20                pop X
 0032                   .dbline -2
 0032           L4:
 0032                   .dbline 0 ; func end
 0032 7F                ret
 0033                   .dbend
 0033                   .dbfunc e Ausgangansteuern _Ausgangansteuern fV
 0033           ;   hichRichtung -> X-5
 0033           ; hichAusgangswert -> X-4
 0033           _Ausgangansteuern::
 0033                   .dbline -1
 0033 10                push X
 0034 4F                mov X,SP
 0035 3802              add SP,2
 0037                   .dbline 86
 0037           ;       }
 0037           ; 
 0037           ; void Ausgangansteuern(char hichAusgangswert, char hichRichtung)
 0037           ;       {
 0037                   .dbline 88
 0037           ;               // Drehrichtung Auswählen
 0037           ;               switch(hichRichtung) {
 0037 52FB              mov A,[X-5]
 0039 5401              mov [X+1],A
 003B 560000            mov [X+0],0
 003E 3D0000            cmp [X+0],0
 0041 B006              jnz X0
 0043 3D0101            cmp [X+1],1
 0046 A00D              jz L9
 0048           X0:
 0048 3D0000            cmp [X+0],0
 004B B006              jnz X1
 004D 3D0102            cmp [X+1],2
 0050 A011              jz L10
 0052           X1:
 0052 801D              xjmp L6
 0054           L9:
 0054                   .dbline 93
 0054           ;                       
 0054           ;                       // Linkslauf
 0054           ;                       case 1: 
 0054           ;                               // IN1 und IN2 Ansteuern
 0054           ;                               IN1_Switch(0);
 0054 10                push X
 0055 5000              mov A,0
 0057 7C0000            xcall _IN1_Switch
 005A                   .dbline 94
 005A           ;                               IN2_Switch(1);
 005A 5001              mov A,1
 005C 7C0000            xcall _IN2_Switch
 005F 20                pop X
 0060                   .dbline 95
 0060           ;                               break;
 0060 8018              xjmp L7
 0062           L10:
 0062                   .dbline 101
 0062           ;                       
 0062           ;                       // Rechtslauf
 0062           ;                       case 2:
 0062           ;                               
 0062           ;                               // IN1 und IN2 Ansteuern
 0062           ;                               IN1_Switch(1);
 0062 10                push X
 0063 5001              mov A,1
 0065 7C0000            xcall _IN1_Switch
 0068                   .dbline 102
 0068           ;                               IN2_Switch(0);
 0068 5000              mov A,0
 006A 7C0000            xcall _IN2_Switch
 006D 20                pop X
 006E                   .dbline 103
 006E           ;                               break;
 006E 800A              xjmp L7
 0070           L6:
 0070                   .dbline 108
 0070           ;                               
 0070           ;                       // Ungültiger Wert
 0070           ;                       default:
 0070           ;                               // Pulsweite auf 0 setzen
 0070           ;                               PWM8_1_WritePulseWidth(0);
 0070 10                push X
 0071 5000              mov A,0
 0073 7C0000            xcall _PWM8_1_WritePulseWidth
 0076 20                pop X
 0077                   .dbline 110
 0077           ;                               // Funktion verlassen
 0077           ;                               return ;
 0077 8008              xjmp L5
 0079           L7:
 0079                   .dbline 115
 0079           ;                               
 0079           ;                       }
 0079           ;               
 0079           ;               // Pulsweite auf hichAusgangswert setzen                
 0079           ;               PWM8_1_WritePulseWidth(hichAusgangswert);
 0079 10                push X
 007A 52FC              mov A,[X-4]
 007C 7C0000            xcall _PWM8_1_WritePulseWidth
 007F 20                pop X
 0080                   .dbline -2
 0080           L5:
 0080 38FE              add SP,-2
 0082 20                pop X
 0083                   .dbline 0 ; func end
 0083 7F                ret
 0084                   .dbsym l hichRichtung -5 c
 0084                   .dbsym l hichAusgangswert -4 c
 0084                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\UNITTE~2\UNITTE~1\AUSGAN~1\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 3
 0003                   .dbstruct 0 3 .1
 0003                   .dbfield 0 pdchBechleunigung c
 0003                   .dbfield 1 pdchEntfernung c
 0003                   .dbfield 2 pdchSollwert c
 0003                   .dbend
 0003                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L3:
 0000 4F4B00            .byte 'O,'K,0
