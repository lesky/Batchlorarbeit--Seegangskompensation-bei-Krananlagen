                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Lesky\Desktop\UNITTE~2\UNITTE~1\AUSGAN~2\SEEGAN~1\SEEGAN~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 54
 0000           ; /********************************************************
 0000           ; * C main-Funktion                                                                             *
 0000           ; * Programm: Seegangskompensation bei Krahnanlagen             *
 0000           ; * Controler: CY8C27446-24PXI                                                  *
 0000           ; *                                                                                                             *
 0000           ; * I/O-Konfiguration:                                                                  *
 0000           ; * LCD                         -> Port 2                                                               *
 0000           ; * SDA                 -> 1.0                                                                  *
 0000           ; * SCL                         -> 1.1                                                                  *
 0000           ; * IN1                 -> 1.3                                                                  *
 0000           ; * IN2                 -> 1.5                                                                  *
 0000           ; * PWM 1                       -> 1.4                                                                  *
 0000           ; * Beschleunigung-> 0.7                                                                        *
 0000           ; * Entfernung  -> 0.4                                                                  *
 0000           ; * Sollwert            -> 0.5                                                                  *
 0000           ; *                                                                                                             *
 0000           ; * Zusätzlich definierte Prüfixe zur Variablenbenennung      *
 0000           ; * Mittels Ungaricher Notation nach Charles Simonyi:           *
 0000           ; * pd  -> Prozessbezogene Daten                                                *
 0000           ; * ko  -> Konstanten                                                                   *
 0000           ; * hi  -> Interne Hilfsgrößen                                                        *
 0000           ; * in  -> Datentyp Integer                                                             *
 0000           ; ********************************************************/
 0000           ; 
 0000           ; // Präprozessor:Für Unittesting:
 0000           ; // #defein Test nicht auskomentieren:
 0000           ; #define UTEST
 0000           ; 
 0000           ; #include <m8c.h>        
 0000           ; #include "PSoCAPI.h"    
 0000           ; #include <stdlib.h>
 0000           ; 
 0000           ; // globale Structur zur Übergabe der Prozessdaten:
 0000           ; struct 
 0000           ;    {                                                  
 0000           ;       char pdchBechleunigung, pdchEntfernung;                 
 0000           ;       char pdchSollwert;
 0000           ;       char pdchDrehzahl; 
 0000           ;       char pdchRichtung;
 0000           ;       char hichBeschleunigungssumme;
 0000           ;       } prozess;
 0000           ; 
 0000           ; // Funktionsprototypen:
 0000           ; void Initalisierung(void);
 0000           ; void Ausgangberechnen(void);
 0000           ; 
 0000           ; // mainfunktion
 0000           ; // Präprozessor: kompiliere wenn kein test
 0000           ; #ifndef UTEST
 0000           ; 
 0000           ; #else
 0000           ;       // Funktion zum Unittesting
 0000           ;       void main(void)
 0000           ;               {
 0000                   .dbline 55
 0000           ;               Initalisierung();
 0000 9015              xcall _Initalisierung
 0002                   .dbline 59
 0002           ;               
 0002           ;               // Unittest des LCD
 0002           ; 
 0002           ;               LCD_1_Position(1,0);    
 0002 10                push X
 0003 5700              mov X,0
 0005 5001              mov A,1
 0007 7C0000            xcall _LCD_1_Position
 000A                   .dbline 60
 000A           ;       LCD_1_PrCString("OK");
 000A 5000              mov A,>L3
 000C 08                push A
 000D 5000              mov A,<L3
 000F 5C                mov X,A
 0010 18                pop A
 0011 7C0000            xcall _LCD_1_PrCString
 0014 20                pop X
 0015                   .dbline -2
 0015           L2:
 0015                   .dbline 0 ; func end
 0015 8FFF              jmp .
 0017                   .dbend
 0017                   .dbfunc e Initalisierung _Initalisierung fV
 0017           _Initalisierung::
 0017                   .dbline -1
 0017                   .dbline 66
 0017           ;               }
 0017           ; #endif 
 0017           ; 
 0017           ; 
 0017           ; void Initalisierung(void)
 0017           ;       {
 0017                   .dbline 68
 0017           ;       //globale Interrupts Freigeben
 0017           ;       M8C_EnableGInt;
 0017 7101                      or  F, 01h
 0019           
 0019                   .dbline 71
 0019           ;               
 0019           ;       // I2C Starten
 0019           ;       I2Cm_Start();
 0019 10                push X
 001A 7C0000            xcall _I2Cm_Start
 001D                   .dbline 77
 001D           ; //    // A/D Wandler konfigurieren
 001D           ; //    I2Cm_fSendStart(0x48,I2Cm_WRITE);       
 001D           ; //    I2Cm_fWrite(0x00);
 001D           ; //    I2Cm_SendStop();
 001D           ;       // Initialisieren des LCD-Displays
 001D           ;       LCD_1_Start();                                                  
 001D 7C0000            xcall _LCD_1_Start
 0020                   .dbline 81
 0020           ;       
 0020           ;       // Initialisieren des PWM-Moduls
 0020           ;       // PWM8_1_WritePeriod(kochPeriodendauer);                                   
 0020           ;     PWM8_1_Start();
 0020 7C0000            xcall _PWM8_1_Start
 0023                   .dbline 84
 0023           ;       
 0023           ;       //Initialisieren der Digitalen Ausgänge
 0023           ;       IN1_Start();    
 0023 7C0000            xcall _IN1_Start
 0026                   .dbline 85
 0026           ;       IN2_Start();
 0026 7C0000            xcall _IN2_Start
 0029 20                pop X
 002A                   .dbline -2
 002A           L4:
 002A                   .dbline 0 ; func end
 002A 7F                ret
 002B                   .dbend
 002B                   .dbfunc e Ausgangberechnen _Ausgangberechnen fV
 002B           ;        kochKRZ -> X+2
 002B           ;         kochKR -> X+1
 002B           ; hichAusgangswert -> X+0
 002B           _Ausgangberechnen::
 002B                   .dbline -1
 002B 10                push X
 002C 4F                mov X,SP
 002D 3803              add SP,3
 002F                   .dbline 89
 002F           ;       }
 002F           ;       
 002F           ; void Ausgangberechnen(void)
 002F           ;     {   
 002F                   .dbline 98
 002F           ;       // Variablen
 002F           ;       char hichAusgangswert;
 002F           ;               
 002F           ;       // Konstanten                                   
 002F           ;       char kochKR;
 002F           ;       char kochKRZ;
 002F           ;               // Parameter Berechnen
 002F           ;                       
 002F           ;                       prozess.hichBeschleunigungssumme = prozess.hichBeschleunigungssumme + prozess.pdchBechleunigung;
 002F 5100              mov A,[_prozess]
 0031 0405              add [_prozess+5],A
 0033                   .dbline 100
 0033           ;                       
 0033           ;                       hichAusgangswert = ( prozess.pdchSollwert - prozess.pdchBechleunigung ) * kochKR
 0033 5105              mov A,[_prozess+5]
 0035 60E8              mov REG[0xe8],A
 0037 5202              mov A,[X+2]
 0039 60E9              mov REG[0xe9],A
 003B 40                nop
 003C 5DEB              mov A,REG[0xeb]
 003E 5300              mov [__r0],A
 0040 5102              mov A,[_prozess+2]
 0042 1200              sub A,[_prozess]
 0044 5300              mov [__r2],A
 0046 5201              mov A,[X+1]
 0048 60E8              mov REG[0xe8],A
 004A 5100              mov A,[__r2]
 004C 60E9              mov REG[0xe9],A
 004E 40                nop
 004F 5DEB              mov A,REG[0xeb]
 0051 1200              sub A,[__r0]
 0053 5400              mov [X+0],A
 0055                   .dbline -2
 0055           L5:
 0055 38FD              add SP,-3
 0057 20                pop X
 0058                   .dbline 0 ; func end
 0058 7F                ret
 0059                   .dbsym l kochKRZ 2 c
 0059                   .dbsym l kochKR 1 c
 0059                   .dbsym l hichAusgangswert 0 c
 0059                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\Lesky\Desktop\UNITTE~2\UNITTE~1\AUSGAN~2\SEEGAN~1\SEEGAN~1\main.c
 0000           _prozess::
 0000                   .blkb 6
 0006                   .dbstruct 0 6 .1
 0006                   .dbfield 0 pdchBechleunigung c
 0006                   .dbfield 1 pdchEntfernung c
 0006                   .dbfield 2 pdchSollwert c
 0006                   .dbfield 3 pdchDrehzahl c
 0006                   .dbfield 4 pdchRichtung c
 0006                   .dbfield 5 hichBeschleunigungssumme c
 0006                   .dbend
 0006                   .dbsym e prozess _prozess S[.1]
                        .area lit(rom, con, rel, lit)
 0000           L3:
 0000 4F4B00            .byte 'O,'K,0
