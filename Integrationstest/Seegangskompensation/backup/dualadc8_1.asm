;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: DUALADC8_1.asm
;;   Version: 1.20, Updated on 2013/5/19 at 10:43:29
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: DualADC8 User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "DUALADC8_1.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  DUALADC8_1_Start
export _DUALADC8_1_Start
export  DUALADC8_1_SetPower
export _DUALADC8_1_SetPower
export  DUALADC8_1_Stop
export _DUALADC8_1_Stop
export  DUALADC8_1_GetSamples
export _DUALADC8_1_GetSamples
export  DUALADC8_1_StopAD
export _DUALADC8_1_StopAD
export  DUALADC8_1_fIsData
export _DUALADC8_1_fIsData
export  DUALADC8_1_fIsDataAvailable
export _DUALADC8_1_fIsDataAvailable
export  DUALADC8_1_cGetData1
export _DUALADC8_1_cGetData1
export  DUALADC8_1_cGetData2
export _DUALADC8_1_cGetData2
export  DUALADC8_1_ClearFlag
export _DUALADC8_1_ClearFlag
export  DUALADC8_1_cGetData1ClearFlag
export _DUALADC8_1_cGetData1ClearFlag
export  DUALADC8_1_cGetData2ClearFlag
export _DUALADC8_1_cGetData2ClearFlag
export  DUALADC8_1_SetCalcTime
export _DUALADC8_1_SetCalcTime
export _DUALADC8_1_iCalcTime
export  DUALADC8_1_iCalcTime

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------
LowByte:       equ 1
HighByte:      equ 0

;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------
area seegangskompensation_RAM (RAM, REL, CON)
_DUALADC8_1_iCalcTime:
 DUALADC8_1_iCalcTime:      BLK   2  ;CalcTime

AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_Start
;
;  DESCRIPTION:
;     Applies power setting to the module's analog PSoc block.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;    A contains the power setting 0-3
;
;  RETURNS:  None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.    
;
 DUALADC8_1_Start:
_DUALADC8_1_Start:
 DUALADC8_1_SetPower:
_DUALADC8_1_SetPower:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A,DUALADC8_1_bfPOWERMASK                    ; Mask only the valid power setting bits
   mov   X, SP                                       ; Get location of next location on stack
   push  A                                           ; Save power value on temp location

                                                     ; Set power for ADC1
   mov   A, reg[DUALADC8_1_bfADC1cr3]                ; Get current value of ADC1cr3
   and   A, ~DUALADC8_1_bfPOWERMASK                  ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[DUALADC8_1_bfADC1cr3], A                ; Reload CR with new power value

                                                     ; Set power for ADC2
   mov   A, reg[DUALADC8_1_bfADC2cr3]                ; Get current value of ADC2cr3
   and   A, ~DUALADC8_1_bfPOWERMASK                  ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[DUALADC8_1_bfADC2cr3], A                ; Reload CR with new power value

   pop   A                                           ; Restore the stack and power value
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_Stop
;
;  DESCRIPTION:
;     Removes power from the module's analog PSoc block, but the digital
;     blocks keep on running.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  None
;
;  RETURNS: None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 DUALADC8_1_Stop:
_DUALADC8_1_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[DUALADC8_1_bfADC1cr3], ~DUALADC8_1_bfPOWERMASK
   and   reg[DUALADC8_1_bfADC2cr3], ~DUALADC8_1_bfPOWERMASK
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_GetSamples
;
;  DESCRIPTION:
;     Starts the A/D convertor and will place data is memory.  A flag
;     is set whenever a new data value is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     None:
;
;  RETURNS:  None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 DUALADC8_1_GetSamples:
_DUALADC8_1_GetSamples:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_iCalcTime
   call  DUALADC8_1_StopAD                                 ; Halt PWM and counter, Disable
                                                           ; Interrupts, Put A/D in reset

   mov   reg[DUALADC8_1_bPWM_IntTime_LSB], 00h
   mov   reg[DUALADC8_1_bPWM_IntTime_MSB], 0x04

                                                   ; Load the CalcTime into the PWM Period
   mov   A,[DUALADC8_1_iCalcTime+LowByte]
   mov   reg[DUALADC8_1_bPWM_Period_LSB],A
   mov   A,0x4
   add   A,[DUALADC8_1_iCalcTime+HighByte]
   mov   reg[DUALADC8_1_bPWM_Period_MSB],A


DUALADC8_1_LoadMSBCounter:                                 ; The PWM has been setup by SetResolution, now set the upper
                                                           ; counter which will be the same as the period.
                                                           ; Reset MSB of counter to most negative value
   RAM_SETPAGE_CUR >DUALADC8_1_cCounter1U
IF (DUALADC8_1_DATA_FORMAT)
   mov   [DUALADC8_1_cCounter1U], 0xFE                     ; Start counter1 at most negative signed value
   mov   [DUALADC8_1_cCounter2U], 0xFE                     ; Start counter2 at most negative signed value
ELSE
   mov   [DUALADC8_1_cCounter1U], 00h                      ; Always start at zero for unsigned values for ADC1
   mov   [DUALADC8_1_cCounter2U], 00h                      ; Always start at zero for unsigned values for ADC2
ENDIF
   mov   A, reg[DUALADC8_1_bPWM_IntTime_LSB]               ; Dummy Read  - required do not remove
   mov   reg[DUALADC8_1_bPeriod1], FFh                     ; Make sure counter1 starts at FF
   mov   reg[DUALADC8_1_bPeriod2], FFh                     ; Make sure counter2 starts at FF

   and   reg[DUALADC8_1_bfADC1cr3],~DUALADC8_1_fFSW0       ; Take Integrator out of reset
   and   reg[DUALADC8_1_bfADC2cr3],~DUALADC8_1_fFSW0       ; Take Integrator out of reset
IF DUALADC8_1_NoAZ
   and   reg[DUALADC8_1_bfADC1cr2],~DUALADC8_1_fAutoZero   ; Take Integrator out of AutoZero
   and   reg[DUALADC8_1_bfADC2cr2],~DUALADC8_1_fAutoZero   ; Take Integrator out of AutoZero
ENDIF

                                                               ; Enable the A/D and Start it!
   or    reg[DUALADC8_1_bCounter1_CR0], (DUALADC8_1_fDBLK_ENABLE|DUALADC8_1_fPULSE_WIDE)   ; Enable the Counter
   or    reg[DUALADC8_1_bCounter2_CR0], (DUALADC8_1_fDBLK_ENABLE|DUALADC8_1_fPULSE_WIDE)   ; Enable the Counter
   or    reg[DUALADC8_1_fPWM_LSB_CR0], DUALADC8_1_fDBLK_ENABLE          ; Enable PWM
   or    reg[DUALADC8_1_bfPWM16_INT_REG], DUALADC8_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
   or    reg[DUALADC8_1_bfCounter1_INT_REG], DUALADC8_1_bfCounter1_Mask
   or    reg[DUALADC8_1_bfCounter2_INT_REG], DUALADC8_1_bfCounter2_Mask
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_StopAD
;
;  DESCRIPTION:
;     Completely shuts down the A/D is an orderly manner.  Both the
;     Timer and Counter are disabled and their interrupts are deactivated.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 DUALADC8_1_StopAD:
_DUALADC8_1_StopAD:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[DUALADC8_1_fPWM_LSB_CR0], ~DUALADC8_1_fDBLK_ENABLE     ; Disable the PWM

   and   reg[DUALADC8_1_bCounter1_CR0], ~DUALADC8_1_fDBLK_ENABLE           ; Disable the Counter
   and   reg[DUALADC8_1_bCounter2_CR0], ~DUALADC8_1_fDBLK_ENABLE           ; Disable the Counter

IF DUALADC8_1_NoAZ
   or    reg[DUALADC8_1_bfADC1cr2], DUALADC8_1_fAutoZero       ; Put the Integrator into Autozero mode
   or    reg[DUALADC8_1_bfADC2cr2], DUALADC8_1_fAutoZero       ; Put the Integrator into Autozero mode
ENDIF

   or   reg[DUALADC8_1_bfADC1cr3], DUALADC8_1_fFSW0            ; Put Integrator into reset
   or   reg[DUALADC8_1_bfADC2cr3], DUALADC8_1_fFSW0            ; Put Integrator into reset

   and   reg[DUALADC8_1_bfPWM16_INT_REG], ~DUALADC8_1_bfPWM16_Mask      ; Disable interrupts
   and   reg[DUALADC8_1_bfCounter1_INT_REG], ~DUALADC8_1_bfCounter1_Mask
   and   reg[DUALADC8_1_bfCounter2_INT_REG], ~DUALADC8_1_bfCounter2_Mask
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_fIsData
;  FUNCTION NAME: DUALADC8_1_fIsDataAvailable
;
;  DESCRIPTION:
;    Returns flag to denote completion of an ADC conversion.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:
;     A returned data status A =: 0 no data available
;                             !=: 0 data available.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
 DUALADC8_1_fIsData:
_DUALADC8_1_fIsData:
 DUALADC8_1_fIsDataAvailable:
_DUALADC8_1_fIsDataAvailable:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus
   mov   A, [DUALADC8_1_bfStatus]                     ; Get status byte
   and   A, DUALADC8_1_fDATA_READY                    ; Mask off other bits
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_cGetData1ClearFlag
;  FUNCTION NAME: DUALADC8_1_cGetData1
;
;  DESCRIPTION:
;     Returns result data from channel one of the ADC.  If iGetData1ClearFlag
;     is called, the data ready flag will be cleared as well.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  None
;
;  RETURNS:
;     A returns the ADC result for channel 1.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 DUALADC8_1_cGetData1ClearFlag:
_DUALADC8_1_cGetData1ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus   
   and   [DUALADC8_1_bfStatus], ~DUALADC8_1_fDATA_READY  ; Clear Data ready bit
   mov   A, [(DUALADC8_1_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 DUALADC8_1_cGetData1:
_DUALADC8_1_cGetData1:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus
   mov   A, [(DUALADC8_1_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_cGetData2ClearFlag
;  FUNCTION NAME: DUALADC8_1_cGetData2
;
;  DESCRIPTION:
;     Returns result data from channel two of the ADC.  If iGetData2ClearFlag
;     is called, the data ready flag will be cleared as well.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  None
;
;  RETURNS:
;     A returns the ADC result for channel 2.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
 DUALADC8_1_cGetData2ClearFlag:
_DUALADC8_1_cGetData2ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus
   and   [DUALADC8_1_bfStatus], ~DUALADC8_1_fDATA_READY  ; Clear Data ready bit
   mov   A, [(DUALADC8_1_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 DUALADC8_1_cGetData2:
_DUALADC8_1_cGetData2:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus
   mov   A, [(DUALADC8_1_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_ClearFlag
;
;  DESCRIPTION:
;     Clears the data ready flag.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:  None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
 DUALADC8_1_ClearFlag:
_DUALADC8_1_ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_bfStatus
   and   [DUALADC8_1_bfStatus], ~DUALADC8_1_fDATA_READY  ; Clear Data ready bit
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC8_1_SetCalcTime
;
;  DESCRIPTION:
;    Set the CalcTime of the ADC.  Adds this value to the ADC PWM period
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;    X:A  16-Bit Calc Value
;
;  RETURNS:
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
 DUALADC8_1_SetCalcTime:
_DUALADC8_1_SetCalcTime:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC8_1_iCalcTime
   mov  [DUALADC8_1_iCalcTime+LowByte],A
   mov  [DUALADC8_1_iCalcTime+HighByte],X
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

DUALADC8_1_API_End:

